/*
ShaderGlass shader border/shaders\bigblur imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/border/shaders/bigblur.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

// BigBlur by hunterk
// license: public domain
// Smoothstep - amazingly, smoothstep() is slower than calculating directly the expression!

*/

#pragma once

namespace RetroArchBorderShadersBigblurShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,25,196,
62,194,118,71,44,105,
243,138,76,48,251,204,
217,91,1,0,0,0,
60,11,0,0,5,0,
0,0,52,0,0,0,
40,6,0,0,116,6,
0,0,228,6,0,0,
160,10,0,0,82,68,
69,70,236,5,0,0,
2,0,0,0,136,0,
0,0,2,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
194,5,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
124,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,128,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,85,66,
79,0,80,117,115,104,
0,171,171,171,124,0,
0,0,1,0,0,0,
184,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,128,0,
0,0,18,0,0,0,
24,1,0,0,112,0,
0,0,0,0,0,0,
0,0,0,0,224,0,
0,0,0,0,0,0,
64,0,0,0,2,0,
0,0,244,0,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,103,108,111,98,
97,108,95,77,86,80,
0,102,108,111,97,116,
52,120,52,0,2,0,
3,0,4,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
235,0,0,0,232,3,
0,0,0,0,0,0,
16,0,0,0,2,0,
0,0,4,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,40,4,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
4,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
60,4,0,0,32,0,
0,0,16,0,0,0,
2,0,0,0,4,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,78,4,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,104,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,140,4,0,0,
52,0,0,0,4,0,
0,0,2,0,0,0,
164,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
200,4,0,0,56,0,
0,0,4,0,0,0,
2,0,0,0,164,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,216,4,
0,0,60,0,0,0,
4,0,0,0,2,0,
0,0,164,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,235,4,0,0,
64,0,0,0,4,0,
0,0,0,0,0,0,
164,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
253,4,0,0,68,0,
0,0,4,0,0,0,
2,0,0,0,164,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,18,5,
0,0,72,0,0,0,
4,0,0,0,2,0,
0,0,164,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,35,5,0,0,
76,0,0,0,4,0,
0,0,0,0,0,0,
164,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
58,5,0,0,80,0,
0,0,4,0,0,0,
0,0,0,0,164,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,79,5,
0,0,84,0,0,0,
4,0,0,0,0,0,
0,0,164,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,96,5,0,0,
88,0,0,0,4,0,
0,0,0,0,0,0,
164,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
112,5,0,0,92,0,
0,0,4,0,0,0,
0,0,0,0,164,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,131,5,
0,0,96,0,0,0,
4,0,0,0,0,0,
0,0,164,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,153,5,0,0,
100,0,0,0,4,0,
0,0,0,0,0,0,
164,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
173,5,0,0,104,0,
0,0,4,0,0,0,
0,0,0,0,164,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,112,97,
114,97,109,115,95,79,
117,116,112,117,116,83,
105,122,101,0,102,108,
111,97,116,52,0,171,
171,171,1,0,3,0,
1,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,250,3,
0,0,112,97,114,97,
109,115,95,79,114,105,
103,105,110,97,108,83,
105,122,101,0,112,97,
114,97,109,115,95,83,
111,117,114,99,101,83,
105,122,101,0,112,97,
114,97,109,115,95,70,
114,97,109,101,67,111,
117,110,116,0,100,119,
111,114,100,0,171,171,
0,0,19,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,96,4,0,0,
112,97,114,97,109,115,
95,97,115,112,101,99,
116,95,120,0,102,108,
111,97,116,0,171,171,
0,0,3,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,156,4,0,0,
112,97,114,97,109,115,
95,97,115,112,101,99,
116,95,121,0,112,97,
114,97,109,115,95,98,
111,114,100,101,114,95,
122,111,111,109,0,112,
97,114,97,109,115,95,
66,82,73,71,72,84,
78,69,83,83,0,112,
97,114,97,109,115,95,
105,110,116,101,103,101,
114,95,115,99,97,108,
101,0,112,97,114,97,
109,115,95,111,118,101,
114,115,99,97,108,101,
0,112,97,114,97,109,
115,95,115,99,97,110,
108,105,110,101,95,116,
111,103,103,108,101,0,
112,97,114,97,109,115,
95,105,110,116,101,114,
112,95,116,111,103,103,
108,101,0,112,97,114,
97,109,115,95,84,72,
73,67,75,78,69,83,
83,0,112,97,114,97,
109,115,95,68,65,82,
75,78,69,83,83,0,
112,97,114,97,109,115,
95,79,83,95,77,65,
83,75,95,84,79,80,
0,112,97,114,97,109,
115,95,79,83,95,77,
65,83,75,95,66,79,
84,84,79,77,0,112,
97,114,97,109,115,95,
79,83,95,77,65,83,
75,95,76,69,70,84,
0,112,97,114,97,109,
115,95,79,83,95,77,
65,83,75,95,82,73,
71,72,84,0,77,105,
99,114,111,115,111,102,
116,32,40,82,41,32,
72,76,83,76,32,83,
104,97,100,101,114,32,
67,111,109,112,105,108,
101,114,32,49,48,46,
49,0,171,171,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
104,0,0,0,3,0,
0,0,8,0,0,0,
80,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
80,0,0,0,1,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,12,3,0,0,
89,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,180,3,
0,0,80,0,1,0,
237,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
89,0,0,4,70,142,
32,0,1,0,0,0,
5,0,0,0,95,0,
0,3,242,16,16,0,
0,0,0,0,95,0,
0,3,50,16,16,0,
1,0,0,0,101,0,
0,3,50,32,16,0,
0,0,0,0,101,0,
0,3,194,32,16,0,
0,0,0,0,103,0,
0,4,242,32,16,0,
1,0,0,0,1,0,
0,0,104,0,0,2,
3,0,0,0,49,0,
0,8,18,0,16,0,
0,0,0,0,1,64,
0,0,0,0,0,63,
26,128,32,0,1,0,
0,0,4,0,0,0,
14,0,0,9,34,0,
16,0,0,0,0,0,
26,128,32,0,1,0,
0,0,0,0,0,0,
26,128,32,0,1,0,
0,0,2,0,0,0,
65,0,0,5,66,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,0,0,0,8,
66,0,16,0,0,0,
0,0,42,0,16,0,
0,0,0,0,42,128,
32,0,1,0,0,0,
4,0,0,0,55,0,
0,9,18,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,14,0,
0,9,18,0,16,0,
1,0,0,0,26,128,
32,0,1,0,0,0,
2,0,0,0,10,128,
32,0,1,0,0,0,
2,0,0,0,54,0,
0,6,34,0,16,0,
2,0,0,0,26,128,
32,0,1,0,0,0,
2,0,0,0,54,0,
0,8,162,0,16,0,
1,0,0,0,2,64,
0,0,0,0,0,0,
0,0,128,63,0,0,
0,0,0,0,128,63,
14,0,0,9,66,0,
16,0,0,0,0,0,
26,128,32,0,1,0,
0,0,3,0,0,0,
42,128,32,0,1,0,
0,0,3,0,0,0,
56,0,0,8,18,0,
16,0,2,0,0,0,
42,0,16,0,0,0,
0,0,10,128,32,0,
1,0,0,0,2,0,
0,0,56,0,0,7,
50,0,16,0,1,0,
0,0,70,0,16,0,
1,0,0,0,70,0,
16,0,2,0,0,0,
14,0,0,8,50,0,
16,0,1,0,0,0,
70,128,32,0,1,0,
0,0,0,0,0,0,
70,0,16,0,1,0,
0,0,14,0,0,7,
50,0,16,0,0,0,
0,0,70,0,16,0,
1,0,0,0,6,0,
16,0,0,0,0,0,
0,0,0,10,50,0,
16,0,1,0,0,0,
70,16,16,0,1,0,
0,0,2,64,0,0,
176,254,255,190,176,254,
255,190,0,0,0,0,
0,0,0,0,50,0,
0,12,50,32,16,0,
0,0,0,0,70,0,
16,0,1,0,0,0,
70,0,16,0,0,0,
0,0,2,64,0,0,
176,254,255,62,176,254,
255,62,0,0,0,0,
0,0,0,0,14,0,
0,8,50,0,16,0,
0,0,0,0,70,0,
16,0,1,0,0,0,
246,143,32,0,1,0,
0,0,3,0,0,0,
14,0,0,9,66,0,
16,0,1,0,0,0,
10,128,32,0,1,0,
0,0,0,0,0,0,
26,128,32,0,1,0,
0,0,0,0,0,0,
56,0,0,7,50,0,
16,0,0,0,0,0,
230,10,16,0,1,0,
0,0,70,0,16,0,
0,0,0,0,54,0,
0,5,130,0,16,0,
0,0,0,0,1,64,
0,0,0,0,128,63,
14,0,0,7,50,0,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,230,10,16,0,
0,0,0,0,0,0,
0,10,194,32,16,0,
0,0,0,0,6,4,
16,0,0,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,0,
176,254,255,62,176,254,
255,62,56,0,0,8,
242,0,16,0,0,0,
0,0,86,21,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,6,16,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,0,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,166,26,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
2,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,32,
16,0,1,0,0,0,
246,31,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,3,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,26,0,
0,0,3,0,0,0,
0,0,0,0,5,0,
0,0,21,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,255,64,
78,83,130,49,174,31,
235,56,253,60,245,16,
111,232,1,0,0,0,
4,13,0,0,5,0,
0,0,52,0,0,0,
64,6,0,0,140,6,
0,0,192,6,0,0,
104,12,0,0,82,68,
69,70,4,6,0,0,
1,0,0,0,24,1,
0,0,5,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
218,5,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
220,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,236,0,0,0,
3,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
1,0,0,0,255,0,
0,0,2,0,0,0,
5,0,0,0,4,0,
0,0,255,255,255,255,
2,0,0,0,1,0,
0,0,13,0,0,0,
6,1,0,0,2,0,
0,0,5,0,0,0,
4,0,0,0,255,255,
255,255,3,0,0,0,
1,0,0,0,13,0,
0,0,16,1,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,95,83,
111,117,114,99,101,95,
115,97,109,112,108,101,
114,0,95,82,101,102,
101,114,101,110,99,101,
95,115,97,109,112,108,
101,114,0,83,111,117,
114,99,101,0,82,101,
102,101,114,101,110,99,
101,0,80,117,115,104,
0,171,171,171,16,1,
0,0,18,0,0,0,
48,1,0,0,112,0,
0,0,0,0,0,0,
0,0,0,0,0,4,
0,0,0,0,0,0,
16,0,0,0,2,0,
0,0,28,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,64,4,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
28,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
84,4,0,0,32,0,
0,0,16,0,0,0,
2,0,0,0,28,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,102,4,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,128,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,164,4,0,0,
52,0,0,0,4,0,
0,0,0,0,0,0,
188,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
224,4,0,0,56,0,
0,0,4,0,0,0,
0,0,0,0,188,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,240,4,
0,0,60,0,0,0,
4,0,0,0,0,0,
0,0,188,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,3,5,0,0,
64,0,0,0,4,0,
0,0,2,0,0,0,
188,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
21,5,0,0,68,0,
0,0,4,0,0,0,
0,0,0,0,188,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,42,5,
0,0,72,0,0,0,
4,0,0,0,0,0,
0,0,188,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,59,5,0,0,
76,0,0,0,4,0,
0,0,2,0,0,0,
188,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
82,5,0,0,80,0,
0,0,4,0,0,0,
2,0,0,0,188,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,5,
0,0,84,0,0,0,
4,0,0,0,2,0,
0,0,188,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,120,5,0,0,
88,0,0,0,4,0,
0,0,2,0,0,0,
188,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
136,5,0,0,92,0,
0,0,4,0,0,0,
2,0,0,0,188,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,155,5,
0,0,96,0,0,0,
4,0,0,0,2,0,
0,0,188,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,177,5,0,0,
100,0,0,0,4,0,
0,0,2,0,0,0,
188,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
197,5,0,0,104,0,
0,0,4,0,0,0,
2,0,0,0,188,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,112,97,
114,97,109,115,95,79,
117,116,112,117,116,83,
105,122,101,0,102,108,
111,97,116,52,0,171,
171,171,1,0,3,0,
1,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,18,4,
0,0,112,97,114,97,
109,115,95,79,114,105,
103,105,110,97,108,83,
105,122,101,0,112,97,
114,97,109,115,95,83,
111,117,114,99,101,83,
105,122,101,0,112,97,
114,97,109,115,95,70,
114,97,109,101,67,111,
117,110,116,0,100,119,
111,114,100,0,171,171,
0,0,19,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,120,4,0,0,
112,97,114,97,109,115,
95,97,115,112,101,99,
116,95,120,0,102,108,
111,97,116,0,171,171,
0,0,3,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,180,4,0,0,
112,97,114,97,109,115,
95,97,115,112,101,99,
116,95,121,0,112,97,
114,97,109,115,95,98,
111,114,100,101,114,95,
122,111,111,109,0,112,
97,114,97,109,115,95,
66,82,73,71,72,84,
78,69,83,83,0,112,
97,114,97,109,115,95,
105,110,116,101,103,101,
114,95,115,99,97,108,
101,0,112,97,114,97,
109,115,95,111,118,101,
114,115,99,97,108,101,
0,112,97,114,97,109,
115,95,115,99,97,110,
108,105,110,101,95,116,
111,103,103,108,101,0,
112,97,114,97,109,115,
95,105,110,116,101,114,
112,95,116,111,103,103,
108,101,0,112,97,114,
97,109,115,95,84,72,
73,67,75,78,69,83,
83,0,112,97,114,97,
109,115,95,68,65,82,
75,78,69,83,83,0,
112,97,114,97,109,115,
95,79,83,95,77,65,
83,75,95,84,79,80,
0,112,97,114,97,109,
115,95,79,83,95,77,
65,83,75,95,66,79,
84,84,79,77,0,112,
97,114,97,109,115,95,
79,83,95,77,65,83,
75,95,76,69,70,84,
0,112,97,114,97,109,
115,95,79,83,95,77,
65,83,75,95,82,73,
71,72,84,0,77,105,
99,114,111,115,111,102,
116,32,40,82,41,32,
72,76,83,76,32,83,
104,97,100,101,114,32,
67,111,109,112,105,108,
101,114,32,49,48,46,
49,0,171,171,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,3,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,12,12,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,0,0,0,
83,86,95,84,97,114,
103,101,116,0,171,171,
83,72,69,88,160,5,
0,0,80,0,0,0,
104,1,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,1,0,
0,0,7,0,0,0,
90,0,0,3,0,96,
16,0,2,0,0,0,
90,0,0,3,0,96,
16,0,3,0,0,0,
88,24,0,4,0,112,
16,0,2,0,0,0,
85,85,0,0,88,24,
0,4,0,112,16,0,
3,0,0,0,85,85,
0,0,98,16,0,3,
50,16,16,0,0,0,
0,0,98,16,0,3,
194,16,16,0,0,0,
0,0,101,0,0,3,
242,32,16,0,0,0,
0,0,104,0,0,2,
4,0,0,0,50,0,
0,13,50,0,16,0,
0,0,0,0,70,16,
16,0,0,0,0,0,
70,128,32,0,1,0,
0,0,2,0,0,0,
2,64,0,0,0,0,
0,63,0,0,0,63,
0,0,0,0,0,0,
0,0,65,0,0,5,
194,0,16,0,0,0,
0,0,6,4,16,0,
0,0,0,0,0,0,
0,8,50,0,16,0,
0,0,0,0,230,10,
16,128,65,0,0,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
50,0,0,15,50,0,
16,0,1,0,0,0,
70,0,16,0,0,0,
0,0,2,64,0,0,
0,0,160,193,0,0,
160,193,0,0,0,0,
0,0,0,0,2,64,
0,0,0,0,140,66,
0,0,140,66,0,0,
0,0,0,0,0,0,
50,0,0,12,50,0,
16,0,1,0,0,0,
70,0,16,0,0,0,
0,0,70,0,16,0,
1,0,0,0,2,64,
0,0,0,0,168,194,
0,0,168,194,0,0,
0,0,0,0,0,0,
50,0,0,12,50,0,
16,0,1,0,0,0,
70,0,16,0,0,0,
0,0,70,0,16,0,
1,0,0,0,2,64,
0,0,0,0,12,66,
0,0,12,66,0,0,
0,0,0,0,0,0,
56,0,0,7,50,0,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,70,0,16,0,
0,0,0,0,56,0,
0,7,50,0,16,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,50,0,0,9,
50,0,16,0,0,0,
0,0,70,0,16,0,
0,0,0,0,70,0,
16,0,1,0,0,0,
230,10,16,0,0,0,
0,0,0,0,0,10,
50,0,16,0,0,0,
0,0,70,0,16,0,
0,0,0,0,2,64,
0,0,0,0,0,191,
0,0,0,191,0,0,
0,0,0,0,0,0,
14,0,0,8,50,0,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,70,128,32,0,
1,0,0,0,2,0,
0,0,49,0,0,8,
66,0,16,0,0,0,
0,0,10,128,32,0,
1,0,0,0,5,0,
0,0,1,64,0,0,
0,0,0,63,55,0,
0,9,50,0,16,0,
0,0,0,0,166,10,
16,0,0,0,0,0,
70,16,16,0,0,0,
0,0,70,0,16,0,
0,0,0,0,49,0,
0,8,66,0,16,0,
0,0,0,0,26,128,
32,0,1,0,0,0,
6,0,0,0,10,0,
16,0,0,0,0,0,
0,0,0,12,50,0,
16,0,1,0,0,0,
2,64,0,0,0,0,
128,63,0,0,128,63,
0,0,0,0,0,0,
0,0,38,138,32,128,
65,0,0,0,1,0,
0,0,6,0,0,0,
49,0,0,7,50,0,
16,0,1,0,0,0,
70,0,16,0,0,0,
0,0,70,0,16,0,
1,0,0,0,1,0,
0,7,66,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
10,0,16,0,1,0,
0,0,1,0,0,7,
66,0,16,0,0,0,
0,0,26,0,16,0,
1,0,0,0,42,0,
16,0,0,0,0,0,
49,0,0,8,130,0,
16,0,0,0,0,0,
58,128,32,0,1,0,
0,0,5,0,0,0,
26,0,16,0,0,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,242,0,16,0,
1,0,0,0,70,0,
16,0,0,0,0,0,
70,126,16,0,3,0,
0,0,0,96,16,0,
3,0,0,0,1,0,
0,7,18,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,0,0,0,9,
34,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,42,128,
32,128,65,0,0,0,
1,0,0,0,5,0,
0,0,56,0,0,7,
242,0,16,0,2,0,
0,0,86,5,16,0,
0,0,0,0,70,14,
16,0,1,0,0,0,
14,0,0,9,34,0,
16,0,0,0,0,0,
26,128,32,0,1,0,
0,0,0,0,0,0,
26,128,32,0,1,0,
0,0,2,0,0,0,
0,0,0,7,34,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,1,64,0,0,
229,242,255,62,65,0,
0,5,34,0,16,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
14,0,0,10,34,0,
16,0,0,0,0,0,
2,64,0,0,0,0,
128,63,0,0,128,63,
0,0,128,63,0,0,
128,63,26,0,16,0,
0,0,0,0,56,0,
0,8,34,0,16,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
26,128,32,0,1,0,
0,0,5,0,0,0,
56,0,0,8,66,0,
16,0,0,0,0,0,
26,16,16,0,0,0,
0,0,26,128,32,0,
1,0,0,0,2,0,
0,0,26,0,0,5,
66,0,16,0,0,0,
0,0,42,0,16,0,
0,0,0,0,49,0,
0,7,34,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,49,0,0,8,
66,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,63,58,128,
32,0,1,0,0,0,
4,0,0,0,1,0,
0,7,34,0,16,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,55,0,0,9,
242,0,16,0,1,0,
0,0,86,5,16,0,
0,0,0,0,70,14,
16,0,2,0,0,0,
70,14,16,0,1,0,
0,0,54,0,0,6,
18,0,16,0,2,0,
0,0,10,128,32,0,
1,0,0,0,4,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,242,0,16,0,
3,0,0,0,230,26,
16,0,0,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,54,0,
0,5,130,0,16,0,
2,0,0,0,58,0,
16,0,3,0,0,0,
0,0,0,7,242,0,
16,0,2,0,0,0,
6,12,16,0,2,0,
0,0,70,14,16,0,
3,0,0,0,55,0,
0,9,242,32,16,0,
0,0,0,0,6,0,
16,0,0,0,0,0,
70,14,16,0,1,0,
0,0,70,14,16,0,
2,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,40,0,
0,0,4,0,0,0,
0,0,0,0,3,0,
0,0,28,0,0,0,
0,0,0,0,4,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
2,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
3,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const uint32_t sVertexHash[] = 
{
0x3668634a,0xd9c553dc,0x45fe73f7,0xe6be687e,0xa458bba4,0xe9200f07,
0x67f41e1a,0xad87254
};


static const uint32_t sFragmentHash[] =
{
0x291a99d5,0xa3b6f005,0x96e3fb24,0xcf10c5f1,0x7d3d0aec,0xf1e17b8f,
0xc266ae56,0x2938bd51
};

}

namespace RetroArch
{
class BorderShadersBigblurShaderDef : public ShaderDef
{
public:
	BorderShadersBigblurShaderDef() : ShaderDef{}
	{
		Name = "bigblur";
		VertexByteCode = RetroArchBorderShadersBigblurShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchBorderShadersBigblurShaderDefs::sVertexByteCode);
		VertexHash = RetroArchBorderShadersBigblurShaderDefs::sVertexHash;
		FragmentByteCode = RetroArchBorderShadersBigblurShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchBorderShadersBigblurShaderDefs::sFragmentByteCode);
		FragmentHash = RetroArchBorderShadersBigblurShaderDefs::sFragmentHash;
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FrameCount", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("aspect_x", -1, 52, 4, 1.000000f, 256.000000f, 64.000000f, 1.000000f, "Aspect Ratio Numerator"));
		Params.push_back(ShaderParam("aspect_y", -1, 56, 4, 1.000000f, 256.000000f, 49.000000f, 1.000000f, "Aspect Ratio Denominator"));
		Params.push_back(ShaderParam("border_zoom", -1, 60, 4, 0.500000f, 10.000000f, 1.500000f, 0.500000f, "Border Zoom"));
		Params.push_back(ShaderParam("BRIGHTNESS", -1, 64, 4, -1.000000f, 1.000000f, 0.000000f, 0.050000f, "Border Brightness Mod"));
		Params.push_back(ShaderParam("integer_scale", -1, 68, 4, 0.000000f, 1.000000f, 1.000000f, 1.000000f, "Force Integer Scaling"));
		Params.push_back(ShaderParam("overscale", -1, 72, 4, 0.000000f, 1.000000f, 0.000000f, 1.000000f, "Integer Overscale"));
		Params.push_back(ShaderParam("scanline_toggle", -1, 76, 4, 0.000000f, 1.000000f, 0.000000f, 1.000000f, "Scanline Toggle"));
		Params.push_back(ShaderParam("interp_toggle", -1, 80, 4, 0.000000f, 1.000000f, 0.000000f, 1.000000f, "Sharpen Linear Scaling"));
		Params.push_back(ShaderParam("THICKNESS", -1, 84, 4, 1.000000f, 12.000000f, 2.000000f, 1.000000f, "Scanline Thickness"));
		Params.push_back(ShaderParam("DARKNESS", -1, 88, 4, 0.000000f, 1.000000f, 0.350000f, 0.050000f, "Scanline Darkness"));
		Params.push_back(ShaderParam("OS_MASK_TOP", -1, 92, 4, 0.000000f, 1.000000f, 0.000000f, 0.005000f, "OS Mask Top"));
		Params.push_back(ShaderParam("OS_MASK_BOTTOM", -1, 96, 4, 0.000000f, 1.000000f, 0.000000f, 0.005000f, "OS Mask Bottom"));
		Params.push_back(ShaderParam("OS_MASK_LEFT", -1, 100, 4, 0.000000f, 1.000000f, 0.000000f, 0.005000f, "OS Mask Left"));
		Params.push_back(ShaderParam("OS_MASK_RIGHT", -1, 104, 4, 0.000000f, 1.000000f, 0.000000f, 0.005000f, "OS Mask Right"));
		Samplers.push_back(ShaderSampler("Source", 2));
		Samplers.push_back(ShaderSampler("Reference", 3));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
