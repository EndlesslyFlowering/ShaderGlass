/*
ShaderGlass shader border/shaders/autocrop-koko\autocrop2_display imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/border/shaders/autocrop-koko/autocrop2_display.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

/////////////////////////////  GPL LICENSE NOTICE  /////////////////////////////
//
//  autocrop-koko
//  Copyright (C) 2024 Antonio Orefice <kokoko3k@gmail.com>
//
//  This program is free software; you can redistribute it and/or modify it
//  under the terms of the GNU General Public License as published by the Free
//  Software Foundation; either version 3 of the License, or any later version.
//
////////////////////////////////////////////////////////////////////////////////
/////////////////////////////  GPL LICENSE NOTICE  /////////////////////////////
//
//  autocrop-koko
//  Copyright (C) 2024 Antonio Orefice <kokoko3k@gmail.com>
//
//  This program is free software; you can redistribute it and/or modify it
//  under the terms of the GNU General Public License as published by the Free
//  Software Foundation; either version 3 of the License, or any later version.
//
////////////////////////////////////////////////////////////////////////////////
//Coords holding the autocrop zoom value
//How much colors can differ to to be considered part of a solid area

*/

#pragma once

namespace RetroArchBorderShadersAutocropKokoAutocrop2_displayShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,250,217,
137,229,226,125,184,74,
116,33,98,74,47,109,
178,54,1,0,0,0,
64,5,0,0,5,0,
0,0,52,0,0,0,
240,2,0,0,60,3,
0,0,148,3,0,0,
164,4,0,0,82,68,
69,70,180,2,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
140,2,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,7,0,
0,0,120,0,0,0,
96,0,0,0,0,0,
0,0,0,0,0,0,
144,1,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,164,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,200,1,
0,0,64,0,0,0,
4,0,0,0,0,0,
0,0,228,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,8,2,0,0,
68,0,0,0,4,0,
0,0,0,0,0,0,
228,1,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
28,2,0,0,72,0,
0,0,4,0,0,0,
0,0,0,0,228,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,52,2,
0,0,76,0,0,0,
4,0,0,0,0,0,
0,0,228,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,80,2,0,0,
80,0,0,0,4,0,
0,0,0,0,0,0,
228,1,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
113,2,0,0,84,0,
0,0,4,0,0,0,
0,0,0,0,228,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,155,1,0,0,
103,108,111,98,97,108,
95,65,85,84,79,67,
82,79,80,95,77,65,
88,0,102,108,111,97,
116,0,171,171,0,0,
3,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
220,1,0,0,103,108,
111,98,97,108,95,65,
85,84,79,67,82,79,
80,95,77,73,78,0,
103,108,111,98,97,108,
95,65,85,84,79,67,
82,79,80,95,83,65,
77,80,76,69,83,0,
103,108,111,98,97,108,
95,65,85,84,79,67,
82,79,80,95,83,65,
77,80,76,69,95,83,
73,90,69,0,103,108,
111,98,97,108,95,65,
85,84,79,67,82,79,
80,95,84,82,65,78,
83,73,84,73,79,78,
95,83,80,69,69,68,
0,103,108,111,98,97,
108,95,65,85,84,79,
67,82,79,80,95,83,
84,69,65,68,73,78,
69,83,83,0,77,105,
99,114,111,115,111,102,
116,32,40,82,41,32,
72,76,83,76,32,83,
104,97,100,101,114,32,
67,111,109,112,105,108,
101,114,32,49,48,46,
49,0,73,83,71,78,
68,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,15,0,0,
56,0,0,0,1,0,
0,0,0,0,0,0,
3,0,0,0,1,0,
0,0,3,3,0,0,
84,69,88,67,79,79,
82,68,0,171,171,171,
79,83,71,78,80,0,
0,0,2,0,0,0,
8,0,0,0,56,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
3,12,0,0,65,0,
0,0,0,0,0,0,
1,0,0,0,3,0,
0,0,1,0,0,0,
15,0,0,0,84,69,
88,67,79,79,82,68,
0,83,86,95,80,111,
115,105,116,105,111,110,
0,171,171,171,83,72,
69,88,8,1,0,0,
80,0,1,0,66,0,
0,0,106,8,0,1,
89,0,0,4,70,142,
32,0,0,0,0,0,
4,0,0,0,95,0,
0,3,242,16,16,0,
0,0,0,0,95,0,
0,3,50,16,16,0,
1,0,0,0,101,0,
0,3,50,32,16,0,
0,0,0,0,103,0,
0,4,242,32,16,0,
1,0,0,0,1,0,
0,0,104,0,0,2,
1,0,0,0,54,0,
0,5,50,32,16,0,
0,0,0,0,70,16,
16,0,1,0,0,0,
56,0,0,8,242,0,
16,0,0,0,0,0,
86,21,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,1,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,6,16,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
0,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,0,
16,0,0,0,0,0,
166,26,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,2,0,
0,0,70,14,16,0,
0,0,0,0,50,0,
0,10,242,32,16,0,
1,0,0,0,246,31,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,3,0,0,0,
70,14,16,0,0,0,
0,0,62,0,0,1,
83,84,65,84,148,0,
0,0,6,0,0,0,
1,0,0,0,0,0,
0,0,4,0,0,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,82,80,
249,17,206,3,159,254,
159,30,2,169,97,44,
174,247,1,0,0,0,
136,6,0,0,5,0,
0,0,52,0,0,0,
196,3,0,0,248,3,
0,0,44,4,0,0,
236,5,0,0,82,68,
69,70,136,3,0,0,
1,0,0,0,52,1,
0,0,5,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
96,3,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
220,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,245,0,0,0,
3,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
1,0,0,0,15,1,
0,0,2,0,0,0,
5,0,0,0,4,0,
0,0,255,255,255,255,
2,0,0,0,1,0,
0,0,13,0,0,0,
31,1,0,0,2,0,
0,0,5,0,0,0,
4,0,0,0,255,255,
255,255,3,0,0,0,
1,0,0,0,13,0,
0,0,48,1,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
1,0,0,0,95,97,
117,116,111,99,114,111,
112,95,112,114,101,99,
117,116,95,115,97,109,
112,108,101,114,0,95,
97,117,116,111,99,114,
111,112,95,99,111,109,
112,117,116,101,95,115,
97,109,112,108,101,114,
0,97,117,116,111,99,
114,111,112,95,112,114,
101,99,117,116,0,97,
117,116,111,99,114,111,
112,95,99,111,109,112,
117,116,101,0,85,66,
79,0,48,1,0,0,
7,0,0,0,76,1,
0,0,96,0,0,0,
0,0,0,0,0,0,
0,0,100,2,0,0,
0,0,0,0,64,0,
0,0,0,0,0,0,
120,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
156,2,0,0,64,0,
0,0,4,0,0,0,
2,0,0,0,184,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,220,2,
0,0,68,0,0,0,
4,0,0,0,0,0,
0,0,184,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,240,2,0,0,
72,0,0,0,4,0,
0,0,0,0,0,0,
184,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
8,3,0,0,76,0,
0,0,4,0,0,0,
0,0,0,0,184,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,36,3,
0,0,80,0,0,0,
4,0,0,0,0,0,
0,0,184,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,69,3,0,0,
84,0,0,0,4,0,
0,0,0,0,0,0,
184,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
103,108,111,98,97,108,
95,77,86,80,0,102,
108,111,97,116,52,120,
52,0,2,0,3,0,
4,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,111,2,
0,0,103,108,111,98,
97,108,95,65,85,84,
79,67,82,79,80,95,
77,65,88,0,102,108,
111,97,116,0,171,171,
0,0,3,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,176,2,0,0,
103,108,111,98,97,108,
95,65,85,84,79,67,
82,79,80,95,77,73,
78,0,103,108,111,98,
97,108,95,65,85,84,
79,67,82,79,80,95,
83,65,77,80,76,69,
83,0,103,108,111,98,
97,108,95,65,85,84,
79,67,82,79,80,95,
83,65,77,80,76,69,
95,83,73,90,69,0,
103,108,111,98,97,108,
95,65,85,84,79,67,
82,79,80,95,84,82,
65,78,83,73,84,73,
79,78,95,83,80,69,
69,68,0,103,108,111,
98,97,108,95,65,85,
84,79,67,82,79,80,
95,83,84,69,65,68,
73,78,69,83,83,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,44,0,0,0,
1,0,0,0,8,0,
0,0,32,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,0,0,0,
83,86,95,84,97,114,
103,101,116,0,171,171,
83,72,69,88,184,1,
0,0,80,0,0,0,
110,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,5,0,0,0,
90,0,0,3,0,96,
16,0,2,0,0,0,
90,0,0,3,0,96,
16,0,3,0,0,0,
88,24,0,4,0,112,
16,0,2,0,0,0,
85,85,0,0,88,24,
0,4,0,112,16,0,
3,0,0,0,85,85,
0,0,98,16,0,3,
50,16,16,0,0,0,
0,0,101,0,0,3,
242,32,16,0,0,0,
0,0,104,0,0,2,
1,0,0,0,49,0,
0,8,18,0,16,0,
0,0,0,0,1,64,
0,0,0,0,0,0,
10,128,32,0,0,0,
0,0,4,0,0,0,
31,0,4,3,10,0,
16,0,0,0,0,0,
69,0,0,142,194,0,
0,128,67,85,21,0,
18,0,16,0,0,0,
0,0,2,64,0,0,
0,0,0,62,0,0,
0,62,0,0,0,0,
0,0,0,0,54,121,
16,0,3,0,0,0,
0,96,16,0,3,0,
0,0,0,0,0,10,
98,0,16,0,0,0,
0,0,6,17,16,0,
0,0,0,0,2,64,
0,0,0,0,0,0,
0,0,0,191,0,0,
0,191,0,0,0,0,
14,0,0,7,50,0,
16,0,0,0,0,0,
150,5,16,0,0,0,
0,0,6,0,16,0,
0,0,0,0,0,0,
0,10,50,0,16,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
2,64,0,0,0,0,
0,63,0,0,0,63,
0,0,0,0,0,0,
0,0,18,0,0,1,
54,0,0,5,50,0,
16,0,0,0,0,0,
70,16,16,0,0,0,
0,0,21,0,0,1,
69,0,0,139,194,0,
0,128,67,85,21,0,
114,0,16,0,0,0,
0,0,70,0,16,0,
0,0,0,0,70,126,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,54,0,0,5,
114,32,16,0,0,0,
0,0,70,2,16,0,
0,0,0,0,54,0,
0,5,130,32,16,0,
0,0,0,0,1,64,
0,0,0,0,128,63,
62,0,0,1,83,84,
65,84,148,0,0,0,
13,0,0,0,1,0,
0,0,0,0,0,0,
2,0,0,0,4,0,
0,0,0,0,0,0,
0,0,0,0,2,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};


static const uint32_t sVertexHash[] = 
{
0x83a412b0,0xc0538b11,0xfc24c705,0x7d85f103,0xb0258b5d,0x33762d3c,
0x86e632c0,0x4ff3bc9a
};


static const uint32_t sFragmentHash[] =
{
0x2b27597a,0x888ef4d4,0x388b64f7,0x61ca397f,0x76cb3c1,0xe717e198,
0x3d24932c,0x4b9f9d9b
};

}

namespace RetroArch
{
class BorderShadersAutocropKokoAutocrop2_displayShaderDef : public ShaderDef
{
public:
	BorderShadersAutocropKokoAutocrop2_displayShaderDef() : ShaderDef{}
	{
		Name = "autocrop2_display";
		VertexByteCode = RetroArchBorderShadersAutocropKokoAutocrop2_displayShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchBorderShadersAutocropKokoAutocrop2_displayShaderDefs::sVertexByteCode);
		VertexHash = RetroArchBorderShadersAutocropKokoAutocrop2_displayShaderDefs::sVertexHash;
		FragmentByteCode = RetroArchBorderShadersAutocropKokoAutocrop2_displayShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchBorderShadersAutocropKokoAutocrop2_displayShaderDefs::sFragmentByteCode);
		FragmentHash = RetroArchBorderShadersAutocropKokoAutocrop2_displayShaderDefs::sFragmentHash;
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("AUTOCROP_MAX", 0, 64, 4, 0.000000f, 0.500000f, 25.000000f, 0.010000f, "★ Autocrop: maximum amount"));
		Params.push_back(ShaderParam("AUTOCROP_MIN", 0, 68, 4, 0.000000f, 10.000000f, 1.000000f, 1.000000f, "Number of mandatory lines to crop"));
		Params.push_back(ShaderParam("AUTOCROP_SAMPLES", 0, 72, 4, 0.000000f, 300.000000f, 20.000000f, 1.000000f, "Samples per frame (faster response, higher gpu use)"));
		Params.push_back(ShaderParam("AUTOCROP_SAMPLE_SIZE", 0, 76, 4, 0.000000f, 5.000000f, 2.000000f, 1.000000f, "Sample size (big speedup, less accurate)"));
		Params.push_back(ShaderParam("AUTOCROP_TRANSITION_SPEED", 0, 80, 4, 0.050000f, 1.000000f, 0.100000f, 0.050000f, "Transition speed"));
		Params.push_back(ShaderParam("AUTOCROP_STEADINESS", 0, 84, 4, 0.000000f, 0.500000f, 0.200000f, 0.010000f, "Scene change treshold (0 = continuous cropping)"));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FrameCount", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Samplers.push_back(ShaderSampler("autocrop_compute", 3));
		Samplers.push_back(ShaderSampler("autocrop_precut", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
