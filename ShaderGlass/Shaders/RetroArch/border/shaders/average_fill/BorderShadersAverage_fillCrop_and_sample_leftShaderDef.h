/*
ShaderGlass shader border/shaders/average_fill\crop_and_sample_left imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/border/shaders/average_fill/crop_and_sample_left.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

// See compose.slang for copyright and other information.
// See compose.slang for copyright and other information.
// See input_transform.inc for copyright and other information.
// Use to unrotate coordinates.
// It expects coordinates centered at (0.5,0.5).
// Get 2 corners of input in texel space, spanning the input image.
// corners.x and .y define the top-left corner, corners.z and .w define the
// bottom-right corner.
// Get adjusted center in input pixel (texel) coordinate system.
// Crop is in input pixels (texels).
// Shift is in output pixels.
// If input and output sizes have different parity, shift by 1/2 of an
// output pixel to avoid having input pixel (texel) edges on output pixel
// centers, which leads to all sorts of issues.
// Scaling from input to output space.
// Aspect ratio before cropping.
// Corrected for forced aspect ratio.
// Pixels in input coord. space, after cropping.
// Scale will be limited by width. Calc x scale, then derive y scale
// using aspect ratio.
// Scale will be limited by height.
// See compose.slang for copyright and other information.
// clang-format off
// clang-format off
// clang-format on
// clang-format on
// Own settings
// From input transform library, cropping section

*/

#pragma once

namespace RetroArchBorderShadersAverage_fillCrop_and_sample_leftShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,251,162,
248,251,53,233,12,133,
151,165,135,141,65,200,
17,40,1,0,0,0,
4,8,0,0,5,0,
0,0,52,0,0,0,
152,3,0,0,228,3,
0,0,60,4,0,0,
104,7,0,0,82,68,
69,70,92,3,0,0,
2,0,0,0,136,0,
0,0,2,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
50,3,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
124,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,128,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,85,66,
79,0,80,117,115,104,
0,171,171,171,124,0,
0,0,1,0,0,0,
184,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,128,0,
0,0,7,0,0,0,
24,1,0,0,48,0,
0,0,0,0,0,0,
0,0,0,0,224,0,
0,0,0,0,0,0,
64,0,0,0,2,0,
0,0,244,0,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,103,108,111,98,
97,108,95,77,86,80,
0,102,108,111,97,116,
52,120,52,0,2,0,
3,0,4,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
235,0,0,0,48,2,
0,0,0,0,0,0,
16,0,0,0,2,0,
0,0,72,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,108,2,0,0,
16,0,0,0,4,0,
0,0,2,0,0,0,
132,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
168,2,0,0,20,0,
0,0,4,0,0,0,
2,0,0,0,192,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,228,2,
0,0,24,0,0,0,
4,0,0,0,2,0,
0,0,192,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,246,2,0,0,
28,0,0,0,4,0,
0,0,2,0,0,0,
192,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
11,3,0,0,32,0,
0,0,4,0,0,0,
2,0,0,0,192,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,30,3,
0,0,36,0,0,0,
4,0,0,0,2,0,
0,0,192,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,112,97,114,97,
109,95,73,110,112,117,
116,83,105,122,101,0,
102,108,111,97,116,52,
0,171,1,0,3,0,
1,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,64,2,
0,0,112,97,114,97,
109,95,82,111,116,97,
116,105,111,110,0,100,
119,111,114,100,0,171,
171,171,0,0,19,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,123,2,
0,0,112,97,114,97,
109,95,83,65,77,80,
76,69,95,83,73,90,
69,0,102,108,111,97,
116,0,0,0,3,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,186,2,
0,0,112,97,114,97,
109,95,79,83,95,67,
82,79,80,95,84,79,
80,0,112,97,114,97,
109,95,79,83,95,67,
82,79,80,95,66,79,
84,84,79,77,0,112,
97,114,97,109,95,79,
83,95,67,82,79,80,
95,76,69,70,84,0,
112,97,114,97,109,95,
79,83,95,67,82,79,
80,95,82,73,71,72,
84,0,77,105,99,114,
111,115,111,102,116,32,
40,82,41,32,72,76,
83,76,32,83,104,97,
100,101,114,32,67,111,
109,112,105,108,101,114,
32,49,48,46,49,0,
171,171,73,83,71,78,
68,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,15,0,0,
56,0,0,0,1,0,
0,0,0,0,0,0,
3,0,0,0,1,0,
0,0,3,3,0,0,
84,69,88,67,79,79,
82,68,0,171,171,171,
79,83,71,78,80,0,
0,0,2,0,0,0,
8,0,0,0,56,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
3,12,0,0,65,0,
0,0,0,0,0,0,
1,0,0,0,3,0,
0,0,1,0,0,0,
15,0,0,0,84,69,
88,67,79,79,82,68,
0,83,86,95,80,111,
115,105,116,105,111,110,
0,171,171,171,83,72,
69,88,36,3,0,0,
80,0,1,0,201,0,
0,0,106,8,0,1,
89,0,0,4,70,142,
32,0,0,0,0,0,
4,0,0,0,89,0,
0,4,70,142,32,0,
1,0,0,0,3,0,
0,0,95,0,0,3,
242,16,16,0,0,0,
0,0,95,0,0,3,
50,16,16,0,1,0,
0,0,101,0,0,3,
50,32,16,0,0,0,
0,0,103,0,0,4,
242,32,16,0,1,0,
0,0,1,0,0,0,
104,0,0,2,2,0,
0,0,56,0,0,8,
242,0,16,0,0,0,
0,0,86,21,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,6,16,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,0,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,166,26,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
2,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,32,
16,0,1,0,0,0,
246,31,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,3,0,
0,0,70,14,16,0,
0,0,0,0,76,0,
0,4,10,128,32,0,
1,0,0,0,1,0,
0,0,6,0,0,3,
1,64,0,0,1,0,
0,0,54,0,0,6,
34,0,16,0,0,0,
0,0,10,128,32,0,
1,0,0,0,2,0,
0,0,54,0,0,6,
18,0,16,0,0,0,
0,0,58,128,32,0,
1,0,0,0,1,0,
0,0,54,0,0,6,
18,0,16,0,1,0,
0,0,26,128,32,0,
1,0,0,0,2,0,
0,0,2,0,0,1,
6,0,0,3,1,64,
0,0,2,0,0,0,
54,0,0,6,34,0,
16,0,0,0,0,0,
58,128,32,0,1,0,
0,0,1,0,0,0,
54,0,0,6,18,0,
16,0,0,0,0,0,
26,128,32,0,1,0,
0,0,2,0,0,0,
54,0,0,6,18,0,
16,0,1,0,0,0,
42,128,32,0,1,0,
0,0,1,0,0,0,
2,0,0,1,6,0,
0,3,1,64,0,0,
3,0,0,0,54,0,
0,6,34,0,16,0,
0,0,0,0,26,128,
32,0,1,0,0,0,
2,0,0,0,54,0,
0,6,18,0,16,0,
0,0,0,0,42,128,
32,0,1,0,0,0,
1,0,0,0,54,0,
0,6,18,0,16,0,
1,0,0,0,10,128,
32,0,1,0,0,0,
2,0,0,0,2,0,
0,1,10,0,0,1,
54,0,0,6,34,0,
16,0,0,0,0,0,
42,128,32,0,1,0,
0,0,1,0,0,0,
54,0,0,6,18,0,
16,0,0,0,0,0,
10,128,32,0,1,0,
0,0,2,0,0,0,
54,0,0,6,18,0,
16,0,1,0,0,0,
58,128,32,0,1,0,
0,0,1,0,0,0,
2,0,0,1,23,0,
0,1,0,0,0,8,
66,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,26,128,
32,0,1,0,0,0,
1,0,0,0,0,0,
0,9,130,0,16,0,
0,0,0,0,10,0,
16,128,65,0,0,0,
1,0,0,0,26,128,
32,0,1,0,0,0,
0,0,0,0,56,0,
0,8,50,0,16,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
230,138,32,0,1,0,
0,0,0,0,0,0,
50,0,0,11,194,0,
16,0,0,0,0,0,
166,142,32,0,1,0,
0,0,0,0,0,0,
166,14,16,0,0,0,
0,0,6,4,16,128,
65,0,0,0,0,0,
0,0,50,0,0,9,
50,32,16,0,0,0,
0,0,70,16,16,0,
1,0,0,0,230,10,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,62,0,0,1,
83,84,65,84,148,0,
0,0,32,0,0,0,
2,0,0,0,0,0,
0,0,4,0,0,0,
9,0,0,0,0,0,
0,0,0,0,0,0,
6,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
12,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,189,156,
156,129,18,104,222,18,
159,7,116,248,192,151,
132,4,1,0,0,0,
164,2,0,0,5,0,
0,0,52,0,0,0,
248,0,0,0,44,1,
0,0,96,1,0,0,
8,2,0,0,82,68,
69,70,188,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
145,0,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
124,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,139,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,95,73,
110,112,117,116,95,115,
97,109,112,108,101,114,
0,73,110,112,117,116,
0,77,105,99,114,111,
115,111,102,116,32,40,
82,41,32,72,76,83,
76,32,83,104,97,100,
101,114,32,67,111,109,
112,105,108,101,114,32,
49,48,46,49,0,171,
171,171,73,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,3,0,0,
84,69,88,67,79,79,
82,68,0,171,171,171,
79,83,71,78,44,0,
0,0,1,0,0,0,
8,0,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
15,0,0,0,83,86,
95,84,97,114,103,101,
116,0,171,171,83,72,
69,88,160,0,0,0,
80,0,0,0,40,0,
0,0,106,8,0,1,
90,0,0,3,0,96,
16,0,2,0,0,0,
88,24,0,4,0,112,
16,0,2,0,0,0,
85,85,0,0,98,16,
0,3,50,16,16,0,
0,0,0,0,101,0,
0,3,242,32,16,0,
0,0,0,0,104,0,
0,2,1,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
114,0,16,0,0,0,
0,0,70,16,16,0,
0,0,0,0,70,126,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,54,0,0,5,
114,32,16,0,0,0,
0,0,70,2,16,0,
0,0,0,0,54,0,
0,5,130,32,16,0,
0,0,0,0,1,64,
0,0,0,0,128,63,
62,0,0,1,83,84,
65,84,148,0,0,0,
4,0,0,0,1,0,
0,0,0,0,0,0,
2,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,2,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};

}

namespace RetroArch
{
class BorderShadersAverage_fillCrop_and_sample_leftShaderDef : public ShaderDef
{
public:
	BorderShadersAverage_fillCrop_and_sample_leftShaderDef() : ShaderDef{}
	{
		Name = "crop_and_sample_left";
		VertexByteCode = RetroArchBorderShadersAverage_fillCrop_and_sample_leftShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchBorderShadersAverage_fillCrop_and_sample_leftShaderDefs::sVertexByteCode);
		FragmentByteCode = RetroArchBorderShadersAverage_fillCrop_and_sample_leftShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchBorderShadersAverage_fillCrop_and_sample_leftShaderDefs::sFragmentByteCode);
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("InputSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("Rotation", -1, 16, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SAMPLE_SIZE", -1, 20, 4, 1.000000f, 64.000000f, 8.000000f, 1.000000f, "No. of lines for calculating the average"));
		Params.push_back(ShaderParam("OS_CROP_TOP", -1, 24, 4, 0.000000f, 1024.000000f, 0.000000f, 1.000000f, "Overscan crop top"));
		Params.push_back(ShaderParam("OS_CROP_BOTTOM", -1, 28, 4, 0.000000f, 1024.000000f, 0.000000f, 1.000000f, "Overscan crop bottom"));
		Params.push_back(ShaderParam("OS_CROP_LEFT", -1, 32, 4, 0.000000f, 1024.000000f, 0.000000f, 1.000000f, "Overscan crop left"));
		Params.push_back(ShaderParam("OS_CROP_RIGHT", -1, 36, 4, 0.000000f, 1024.000000f, 0.000000f, 1.000000f, "Overscan crop right"));
		Samplers.push_back(ShaderSampler("Input", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
