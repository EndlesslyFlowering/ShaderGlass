/*
ShaderGlass shader interpolation/shaders\spline16-y imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/interpolation/shaders/spline16-y.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

// Anti-ringing

*/

#pragma once

namespace RetroArchInterpolationShadersSpline16YShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,48,161,
10,213,115,11,149,44,
178,187,198,201,237,99,
126,192,1,0,0,0,
160,3,0,0,5,0,
0,0,52,0,0,0,
60,1,0,0,136,1,
0,0,224,1,0,0,
4,3,0,0,82,68,
69,70,0,1,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
216,0,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,1,0,
0,0,120,0,0,0,
64,0,0,0,0,0,
0,0,0,0,0,0,
160,0,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,180,0,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,171,0,0,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
80,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
65,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,28,1,
0,0,80,0,1,0,
71,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
95,0,0,3,242,16,
16,0,0,0,0,0,
95,0,0,3,50,16,
16,0,1,0,0,0,
101,0,0,3,50,32,
16,0,0,0,0,0,
103,0,0,4,242,32,
16,0,1,0,0,0,
1,0,0,0,104,0,
0,2,1,0,0,0,
0,0,0,10,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,2,64,0,0,
23,183,209,56,23,183,
209,56,0,0,0,0,
0,0,0,0,56,0,
0,8,242,0,16,0,
0,0,0,0,86,21,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,1,0,0,0,
50,0,0,10,242,0,
16,0,0,0,0,0,
6,16,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,0,0,
0,0,70,14,16,0,
0,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,166,26,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,2,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,32,16,0,1,0,
0,0,246,31,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
3,0,0,0,70,14,
16,0,0,0,0,0,
62,0,0,1,83,84,
65,84,148,0,0,0,
6,0,0,0,1,0,
0,0,0,0,0,0,
4,0,0,0,5,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,216,183,
27,21,255,25,95,156,
255,63,177,39,38,152,
207,216,1,0,0,0,
40,13,0,0,5,0,
0,0,52,0,0,0,
228,2,0,0,24,3,
0,0,76,3,0,0,
140,12,0,0,82,68,
69,70,168,2,0,0,
1,0,0,0,184,0,
0,0,3,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
128,2,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,172,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,179,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,80,
117,115,104,0,179,0,
0,0,5,0,0,0,
208,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,152,1,
0,0,0,0,0,0,
16,0,0,0,2,0,
0,0,180,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,216,1,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
180,1,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
236,1,0,0,32,0,
0,0,16,0,0,0,
0,0,0,0,180,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,254,1,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,24,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,60,2,0,0,
52,0,0,0,4,0,
0,0,2,0,0,0,
92,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
112,97,114,97,109,115,
95,83,111,117,114,99,
101,83,105,122,101,0,
102,108,111,97,116,52,
0,171,171,171,1,0,
3,0,1,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
170,1,0,0,112,97,
114,97,109,115,95,79,
114,105,103,105,110,97,
108,83,105,122,101,0,
112,97,114,97,109,115,
95,79,117,116,112,117,
116,83,105,122,101,0,
112,97,114,97,109,115,
95,70,114,97,109,101,
67,111,117,110,116,0,
100,119,111,114,100,0,
171,171,0,0,19,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,16,2,
0,0,112,97,114,97,
109,115,95,83,49,54,
95,65,78,84,73,95,
82,73,78,71,73,78,
71,0,102,108,111,97,
116,0,171,171,0,0,
3,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
84,2,0,0,77,105,
99,114,111,115,111,102,
116,32,40,82,41,32,
72,76,83,76,32,83,
104,97,100,101,114,32,
67,111,109,112,105,108,
101,114,32,49,48,46,
49,0,73,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,3,0,0,
84,69,88,67,79,79,
82,68,0,171,171,171,
79,83,71,78,44,0,
0,0,1,0,0,0,
8,0,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
15,0,0,0,83,86,
95,84,97,114,103,101,
116,0,171,171,83,72,
69,88,56,9,0,0,
80,0,0,0,78,2,
0,0,106,8,0,1,
89,0,0,4,70,142,
32,0,1,0,0,0,
4,0,0,0,90,0,
0,3,0,96,16,0,
2,0,0,0,88,24,
0,4,0,112,16,0,
2,0,0,0,85,85,
0,0,98,16,0,3,
50,16,16,0,0,0,
0,0,101,0,0,3,
242,32,16,0,0,0,
0,0,104,0,0,2,
7,0,0,0,50,0,
0,13,50,0,16,0,
0,0,0,0,230,138,
32,0,1,0,0,0,
0,0,0,0,2,64,
0,0,0,0,0,0,
0,0,0,63,0,0,
0,0,0,0,0,0,
70,16,16,0,0,0,
0,0,14,0,0,8,
242,0,16,0,1,0,
0,0,70,5,16,0,
0,0,0,0,230,143,
32,0,1,0,0,0,
0,0,0,0,26,0,
0,5,242,0,16,0,
1,0,0,0,70,14,
16,0,1,0,0,0,
0,0,0,7,66,0,
16,0,0,0,0,0,
58,0,16,0,1,0,
0,0,1,64,0,0,
102,102,230,191,50,0,
0,9,66,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
58,0,16,0,1,0,
0,0,1,64,0,0,
205,204,76,190,50,0,
0,9,66,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
58,0,16,0,1,0,
0,0,1,64,0,0,
0,0,128,63,49,0,
0,7,130,0,16,0,
0,0,0,0,58,0,
16,0,1,0,0,0,
1,64,0,0,0,0,
128,63,1,0,0,7,
34,0,16,0,2,0,
0,0,42,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
50,0,0,9,66,0,
16,0,0,0,0,0,
58,0,16,0,1,0,
0,0,1,64,0,0,
171,170,170,62,1,64,
0,0,205,204,76,63,
50,0,0,10,66,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,58,0,16,128,
65,0,0,0,1,0,
0,0,1,64,0,0,
239,238,238,190,56,0,
0,8,66,0,16,0,
0,0,0,0,58,0,
16,128,65,0,0,0,
1,0,0,0,42,0,
16,0,0,0,0,0,
0,0,0,11,242,0,
16,0,3,0,0,0,
70,14,16,128,65,0,
0,0,1,0,0,0,
2,64,0,0,0,0,
192,191,0,0,192,191,
0,0,128,63,0,0,
128,191,0,0,0,11,
50,0,16,0,1,0,
0,0,246,15,16,128,
65,0,0,0,1,0,
0,0,2,64,0,0,
204,204,76,191,0,0,
0,64,0,0,0,0,
0,0,0,0,29,0,
0,7,130,0,16,0,
0,0,0,0,42,0,
16,0,3,0,0,0,
1,64,0,0,0,0,
128,63,49,0,0,10,
194,0,16,0,1,0,
0,0,166,10,16,0,
3,0,0,0,2,64,
0,0,0,0,0,0,
0,0,0,0,0,0,
128,63,0,0,0,64,
1,0,0,7,130,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,58,0,16,0,
1,0,0,0,1,0,
0,7,66,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,50,0,0,9,
130,0,16,0,0,0,
0,0,10,0,16,0,
1,0,0,0,42,0,
16,0,3,0,0,0,
1,64,0,0,205,204,
76,190,50,0,0,9,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,42,0,
16,0,3,0,0,0,
1,64,0,0,0,0,
128,63,55,0,0,9,
66,0,16,0,2,0,
0,0,42,0,16,0,
1,0,0,0,58,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,29,0,0,8,
66,0,16,0,0,0,
0,0,58,0,16,128,
65,0,0,0,3,0,
0,0,1,64,0,0,
0,0,128,63,49,0,
0,8,130,0,16,0,
0,0,0,0,58,0,
16,128,65,0,0,0,
3,0,0,0,1,64,
0,0,0,0,0,64,
1,0,0,7,66,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,42,0,16,0,
0,0,0,0,0,0,
0,8,130,0,16,0,
0,0,0,0,58,0,
16,128,65,0,0,0,
3,0,0,0,1,64,
0,0,0,0,128,191,
50,0,0,9,18,0,
16,0,1,0,0,0,
58,0,16,0,0,0,
0,0,1,64,0,0,
171,170,170,190,1,64,
0,0,205,204,76,63,
50,0,0,9,18,0,
16,0,1,0,0,0,
10,0,16,0,1,0,
0,0,58,0,16,0,
0,0,0,0,1,64,
0,0,239,238,238,190,
56,0,0,7,130,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,10,0,16,0,
1,0,0,0,1,0,
0,7,18,0,16,0,
2,0,0,0,58,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,29,0,0,7,
66,0,16,0,0,0,
0,0,26,0,16,0,
1,0,0,0,1,64,
0,0,0,0,128,63,
49,0,0,7,130,0,
16,0,0,0,0,0,
26,0,16,0,1,0,
0,0,1,64,0,0,
0,0,0,64,1,0,
0,7,66,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,50,0,0,9,
130,0,16,0,0,0,
0,0,42,0,16,0,
3,0,0,0,1,64,
0,0,171,170,170,190,
1,64,0,0,205,204,
76,63,50,0,0,9,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,42,0,
16,0,3,0,0,0,
1,64,0,0,239,238,
238,190,56,0,0,7,
130,0,16,0,0,0,
0,0,42,0,16,0,
3,0,0,0,58,0,
16,0,0,0,0,0,
50,0,0,10,194,0,
16,0,1,0,0,0,
6,4,16,0,3,0,
0,0,166,142,32,0,
1,0,0,0,0,0,
0,0,6,4,16,0,
0,0,0,0,1,0,
0,7,130,0,16,0,
2,0,0,0,58,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,17,0,0,10,
18,0,16,0,0,0,
0,0,70,14,16,0,
2,0,0,0,2,64,
0,0,0,0,128,63,
0,0,128,63,0,0,
128,63,0,0,128,63,
14,0,0,7,242,0,
16,0,0,0,0,0,
70,14,16,0,2,0,
0,0,6,0,16,0,
0,0,0,0,0,0,
0,8,18,0,16,0,
2,0,0,0,58,0,
16,0,1,0,0,0,
58,128,32,0,1,0,
0,0,0,0,0,0,
50,0,0,13,50,0,
16,0,1,0,0,0,
230,138,32,0,1,0,
0,0,0,0,0,0,
2,64,0,0,0,0,
0,64,0,0,0,64,
0,0,0,0,0,0,
0,0,230,10,16,0,
1,0,0,0,54,0,
0,5,34,0,16,0,
2,0,0,0,10,0,
16,0,1,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
114,0,16,0,3,0,
0,0,22,5,16,0,
2,0,0,0,70,126,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,56,0,0,7,
114,0,16,0,4,0,
0,0,86,5,16,0,
0,0,0,0,70,2,
16,0,3,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
114,0,16,0,5,0,
0,0,198,0,16,0,
1,0,0,0,70,126,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,50,0,0,10,
66,0,16,0,2,0,
0,0,58,128,32,0,
1,0,0,0,0,0,
0,0,1,64,0,0,
0,0,64,64,58,0,
16,0,1,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
114,0,16,0,2,0,
0,0,150,5,16,0,
2,0,0,0,70,126,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,114,0,16,0,
1,0,0,0,70,0,
16,0,1,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,50,0,
0,9,114,0,16,0,
4,0,0,0,6,0,
16,0,0,0,0,0,
70,2,16,0,5,0,
0,0,70,2,16,0,
4,0,0,0,50,0,
0,9,114,0,16,0,
0,0,0,0,166,10,
16,0,0,0,0,0,
70,2,16,0,1,0,
0,0,70,2,16,0,
4,0,0,0,50,0,
0,9,114,0,16,0,
0,0,0,0,246,15,
16,0,0,0,0,0,
70,2,16,0,2,0,
0,0,70,2,16,0,
0,0,0,0,51,0,
0,7,114,0,16,0,
4,0,0,0,70,2,
16,0,3,0,0,0,
70,2,16,0,5,0,
0,0,51,0,0,7,
114,0,16,0,6,0,
0,0,70,2,16,0,
2,0,0,0,70,2,
16,0,1,0,0,0,
51,0,0,7,114,0,
16,0,4,0,0,0,
70,2,16,0,4,0,
0,0,70,2,16,0,
6,0,0,0,52,0,
0,7,114,0,16,0,
4,0,0,0,70,2,
16,0,0,0,0,0,
70,2,16,0,4,0,
0,0,52,0,0,7,
114,0,16,0,6,0,
0,0,70,2,16,0,
3,0,0,0,70,2,
16,0,5,0,0,0,
0,0,0,8,114,0,
16,0,3,0,0,0,
70,2,16,128,65,0,
0,0,3,0,0,0,
70,2,16,0,5,0,
0,0,52,0,0,7,
114,0,16,0,5,0,
0,0,70,2,16,0,
2,0,0,0,70,2,
16,0,1,0,0,0,
0,0,0,8,114,0,
16,0,1,0,0,0,
70,2,16,128,65,0,
0,0,2,0,0,0,
70,2,16,0,1,0,
0,0,56,0,0,7,
114,0,16,0,1,0,
0,0,70,2,16,0,
1,0,0,0,70,2,
16,0,3,0,0,0,
29,0,0,10,114,0,
16,0,1,0,0,0,
70,2,16,0,1,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,10,114,0,16,0,
1,0,0,0,70,2,
16,0,1,0,0,0,
2,64,0,0,0,0,
128,63,0,0,128,63,
0,0,128,63,0,0,
0,0,52,0,0,7,
114,0,16,0,2,0,
0,0,70,2,16,0,
5,0,0,0,70,2,
16,0,6,0,0,0,
51,0,0,7,114,0,
16,0,2,0,0,0,
70,2,16,0,2,0,
0,0,70,2,16,0,
4,0,0,0,0,0,
0,8,114,0,16,0,
2,0,0,0,70,2,
16,128,65,0,0,0,
0,0,0,0,70,2,
16,0,2,0,0,0,
50,0,0,9,114,0,
16,0,1,0,0,0,
70,2,16,0,1,0,
0,0,70,2,16,0,
2,0,0,0,70,2,
16,0,0,0,0,0,
24,0,0,8,130,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
128,63,26,128,32,0,
1,0,0,0,3,0,
0,0,55,0,0,9,
114,32,16,0,0,0,
0,0,246,15,16,0,
0,0,0,0,70,2,
16,0,1,0,0,0,
70,2,16,0,0,0,
0,0,54,0,0,5,
130,32,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,62,0,
0,1,83,84,65,84,
148,0,0,0,69,0,
0,0,7,0,0,0,
0,0,0,0,2,0,
0,0,52,0,0,0,
0,0,0,0,8,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
2,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const uint32_t sVertexHash[] = 
{
0xe62e2b1d,0x1faa9477,0x834a2466,0x606183fb,0x5b074727,0x8cc53adc,
0x7b0f8178,0x37d68b97
};


static const uint32_t sFragmentHash[] =
{
0xb1b7d6a8,0x3dd54a2,0x221996b4,0xddc69674,0x5a6d9d35,0x761699cb,
0x89676c83,0x66d81820
};

}

namespace RetroArch
{
class InterpolationShadersSpline16YShaderDef : public ShaderDef
{
public:
	InterpolationShadersSpline16YShaderDef() : ShaderDef{}
	{
		Name = "spline16-y";
		VertexByteCode = RetroArchInterpolationShadersSpline16YShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchInterpolationShadersSpline16YShaderDefs::sVertexByteCode);
		VertexHash = RetroArchInterpolationShadersSpline16YShaderDefs::sVertexHash;
		FragmentByteCode = RetroArchInterpolationShadersSpline16YShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchInterpolationShadersSpline16YShaderDefs::sFragmentByteCode);
		FragmentHash = RetroArchInterpolationShadersSpline16YShaderDefs::sFragmentHash;
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FrameCount", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("S16_ANTI_RINGING", -1, 52, 4, 0.000000f, 1.000000f, 1.000000f, 1.000000f, "Spline16 Anti-Ringing [ OFF | ON ]"));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
