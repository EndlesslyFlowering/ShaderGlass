/*
ShaderGlass shader pixel-art-scaling/shaders/pixel_aa\pixel_aa_fast imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/pixel-art-scaling/shaders/pixel_aa/pixel_aa_fast.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

// See the main shader file for copyright and other information.

*/

#pragma once

namespace RetroArchPixelArtScalingShadersPixel_aaPixel_aa_fastShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,29,10,
240,124,225,68,132,141,
141,226,217,125,64,176,
84,237,1,0,0,0,
228,4,0,0,5,0,
0,0,52,0,0,0,
28,2,0,0,104,2,
0,0,216,2,0,0,
72,4,0,0,82,68,
69,70,224,1,0,0,
2,0,0,0,136,0,
0,0,2,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
181,1,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
124,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,128,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,85,66,
79,0,80,117,115,104,
0,171,171,171,124,0,
0,0,1,0,0,0,
184,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,128,0,
0,0,2,0,0,0,
24,1,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,224,0,
0,0,0,0,0,0,
64,0,0,0,2,0,
0,0,244,0,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,103,108,111,98,
97,108,95,77,86,80,
0,102,108,111,97,116,
52,120,52,0,2,0,
3,0,4,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
235,0,0,0,104,1,
0,0,0,0,0,0,
16,0,0,0,2,0,
0,0,128,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,164,1,0,0,
16,0,0,0,16,0,
0,0,2,0,0,0,
128,1,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
112,97,114,97,109,95,
83,111,117,114,99,101,
83,105,122,101,0,102,
108,111,97,116,52,0,
1,0,3,0,1,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,121,1,0,0,
112,97,114,97,109,95,
79,117,116,112,117,116,
83,105,122,101,0,77,
105,99,114,111,115,111,
102,116,32,40,82,41,
32,72,76,83,76,32,
83,104,97,100,101,114,
32,67,111,109,112,105,
108,101,114,32,49,48,
46,49,0,171,171,171,
73,83,71,78,68,0,
0,0,2,0,0,0,
8,0,0,0,56,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
15,15,0,0,56,0,
0,0,1,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
3,3,0,0,84,69,
88,67,79,79,82,68,
0,171,171,171,79,83,
71,78,104,0,0,0,
3,0,0,0,8,0,
0,0,80,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,12,
0,0,80,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,12,3,
0,0,89,0,0,0,
0,0,0,0,1,0,
0,0,3,0,0,0,
1,0,0,0,15,0,
0,0,84,69,88,67,
79,79,82,68,0,83,
86,95,80,111,115,105,
116,105,111,110,0,171,
171,171,83,72,69,88,
104,1,0,0,80,0,
1,0,90,0,0,0,
106,8,0,1,89,0,
0,4,70,142,32,0,
0,0,0,0,4,0,
0,0,89,0,0,4,
70,142,32,0,1,0,
0,0,2,0,0,0,
95,0,0,3,242,16,
16,0,0,0,0,0,
95,0,0,3,50,16,
16,0,1,0,0,0,
101,0,0,3,50,32,
16,0,0,0,0,0,
101,0,0,3,194,32,
16,0,0,0,0,0,
103,0,0,4,242,32,
16,0,1,0,0,0,
1,0,0,0,104,0,
0,2,1,0,0,0,
50,0,0,13,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,70,128,32,0,
1,0,0,0,0,0,
0,0,2,64,0,0,
0,0,0,191,0,0,
0,191,0,0,0,0,
0,0,0,0,56,0,
0,9,194,32,16,0,
0,0,0,0,166,142,
32,0,1,0,0,0,
0,0,0,0,6,132,
32,0,1,0,0,0,
1,0,0,0,56,0,
0,8,242,0,16,0,
0,0,0,0,86,21,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,1,0,0,0,
50,0,0,10,242,0,
16,0,0,0,0,0,
6,16,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,0,0,
0,0,70,14,16,0,
0,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,166,26,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,2,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,32,16,0,1,0,
0,0,246,31,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
3,0,0,0,70,14,
16,0,0,0,0,0,
62,0,0,1,83,84,
65,84,148,0,0,0,
7,0,0,0,1,0,
0,0,0,0,0,0,
5,0,0,0,6,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,82,142,
50,46,86,153,169,13,
156,72,96,43,33,172,
86,253,1,0,0,0,
8,5,0,0,5,0,
0,0,52,0,0,0,
212,1,0,0,32,2,
0,0,84,2,0,0,
108,4,0,0,82,68,
69,70,152,1,0,0,
1,0,0,0,184,0,
0,0,3,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
109,1,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,172,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,179,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,80,
117,115,104,0,179,0,
0,0,2,0,0,0,
208,0,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,32,1,
0,0,0,0,0,0,
16,0,0,0,2,0,
0,0,56,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,92,1,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
56,1,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
112,97,114,97,109,95,
83,111,117,114,99,101,
83,105,122,101,0,102,
108,111,97,116,52,0,
1,0,3,0,1,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,49,1,0,0,
112,97,114,97,109,95,
79,117,116,112,117,116,
83,105,122,101,0,77,
105,99,114,111,115,111,
102,116,32,40,82,41,
32,72,76,83,76,32,
83,104,97,100,101,114,
32,67,111,109,112,105,
108,101,114,32,49,48,
46,49,0,171,171,171,
73,83,71,78,68,0,
0,0,2,0,0,0,
8,0,0,0,56,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
3,3,0,0,56,0,
0,0,1,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
12,12,0,0,84,69,
88,67,79,79,82,68,
0,171,171,171,79,83,
71,78,44,0,0,0,
1,0,0,0,8,0,
0,0,32,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,0,
0,0,83,86,95,84,
97,114,103,101,116,0,
171,171,83,72,69,88,
16,2,0,0,80,0,
0,0,132,0,0,0,
106,8,0,1,89,0,
0,4,70,142,32,0,
1,0,0,0,1,0,
0,0,90,0,0,3,
0,96,16,0,2,0,
0,0,88,24,0,4,
0,112,16,0,2,0,
0,0,85,85,0,0,
98,16,0,3,50,16,
16,0,0,0,0,0,
98,16,0,3,194,16,
16,0,0,0,0,0,
101,0,0,3,242,32,
16,0,0,0,0,0,
104,0,0,2,2,0,
0,0,67,0,0,5,
50,0,16,0,0,0,
0,0,70,16,16,0,
0,0,0,0,0,0,
0,8,194,0,16,0,
0,0,0,0,6,4,
16,128,65,0,0,0,
0,0,0,0,6,20,
16,0,0,0,0,0,
0,0,0,10,194,0,
16,0,0,0,0,0,
166,14,16,0,0,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
0,0,0,0,0,191,
0,0,0,191,50,32,
0,12,194,0,16,0,
0,0,0,0,166,14,
16,0,0,0,0,0,
166,30,16,0,0,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
0,0,0,0,0,63,
0,0,0,63,56,0,
0,7,50,0,16,0,
1,0,0,0,230,10,
16,0,0,0,0,0,
230,10,16,0,0,0,
0,0,50,0,0,16,
194,0,16,0,0,0,
0,0,166,14,16,128,
65,0,0,0,0,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
0,0,0,0,0,64,
0,0,0,64,2,64,
0,0,0,0,0,0,
0,0,0,0,0,0,
64,64,0,0,64,64,
50,0,0,9,50,0,
16,0,0,0,0,0,
70,0,16,0,1,0,
0,0,230,10,16,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
0,0,0,10,50,0,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,2,64,0,0,
0,0,0,63,0,0,
0,63,0,0,0,0,
0,0,0,0,56,0,
0,8,50,0,16,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
230,138,32,0,1,0,
0,0,0,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
114,0,16,0,0,0,
0,0,70,0,16,0,
0,0,0,0,70,126,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,75,0,0,5,
114,32,16,0,0,0,
0,0,70,2,16,0,
0,0,0,0,54,0,
0,5,130,32,16,0,
0,0,0,0,1,64,
0,0,0,0,128,63,
62,0,0,1,83,84,
65,84,148,0,0,0,
13,0,0,0,2,0,
0,0,0,0,0,0,
3,0,0,0,10,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};


static const uint32_t sVertexHash[] = 
{
0x69fe14ab,0x4ef26b04,0x13ae6c2d,0x84405b68,0xb06302e7,0x6bc5e897,
0x10d2ed04,0xb53aa094
};


static const uint32_t sFragmentHash[] =
{
0x3e2f3afb,0xe9d241e0,0x504e4a3,0x4effd163,0xc99f6b62,0x3851c69e,
0x2c7645b,0x3cc193a
};

}

namespace RetroArch
{
class PixelArtScalingShadersPixel_aaPixel_aa_fastShaderDef : public ShaderDef
{
public:
	PixelArtScalingShadersPixel_aaPixel_aa_fastShaderDef() : ShaderDef{}
	{
		Name = "pixel_aa_fast";
		VertexByteCode = RetroArchPixelArtScalingShadersPixel_aaPixel_aa_fastShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchPixelArtScalingShadersPixel_aaPixel_aa_fastShaderDefs::sVertexByteCode);
		VertexHash = RetroArchPixelArtScalingShadersPixel_aaPixel_aa_fastShaderDefs::sVertexHash;
		FragmentByteCode = RetroArchPixelArtScalingShadersPixel_aaPixel_aa_fastShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchPixelArtScalingShadersPixel_aaPixel_aa_fastShaderDefs::sFragmentByteCode);
		FragmentHash = RetroArchPixelArtScalingShadersPixel_aaPixel_aa_fastShaderDefs::sFragmentHash;
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
