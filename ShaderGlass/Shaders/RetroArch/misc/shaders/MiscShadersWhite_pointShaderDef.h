/*
ShaderGlass shader misc/shaders\white_point imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/misc/shaders/white_point.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

// White Point Mapping
//          ported by Dogway
//
// From the first comment post (sRGB primaries and linear light compensated)
//      http://www.zombieprototypes.com/?p=210#comment-4695029660
// Based on the Neil Bartlett's blog update
//      http://www.zombieprototypes.com/?p=210
// Inspired itself by Tanner Helland's work
//      http://www.tannerhelland.com/4435/convert-temperature-rgb-algorithm-code/
// calculate RED
// calculate GREEN
// calculate BLUE
// clamp
// R/G/B independent manual White Point adjustment
// Linear color input

*/

#pragma once

namespace RetroArchMiscShadersWhite_pointShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,110,239,
1,38,44,138,120,137,
121,214,212,137,93,170,
129,5,1,0,0,0,
140,3,0,0,5,0,
0,0,52,0,0,0,
60,1,0,0,136,1,
0,0,224,1,0,0,
240,2,0,0,82,68,
69,70,0,1,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
216,0,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,1,0,
0,0,120,0,0,0,
64,0,0,0,0,0,
0,0,0,0,0,0,
160,0,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,180,0,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,171,0,0,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
80,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
65,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,8,1,
0,0,80,0,1,0,
66,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
95,0,0,3,242,16,
16,0,0,0,0,0,
95,0,0,3,50,16,
16,0,1,0,0,0,
101,0,0,3,50,32,
16,0,0,0,0,0,
103,0,0,4,242,32,
16,0,1,0,0,0,
1,0,0,0,104,0,
0,2,1,0,0,0,
54,0,0,5,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,56,0,0,8,
242,0,16,0,0,0,
0,0,86,21,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,6,16,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,0,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,166,26,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
2,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,32,
16,0,1,0,0,0,
246,31,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,3,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,6,0,
0,0,1,0,0,0,
0,0,0,0,4,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,252,248,
227,18,6,31,108,140,
34,19,80,219,191,206,
108,127,1,0,0,0,
24,14,0,0,5,0,
0,0,52,0,0,0,
196,3,0,0,248,3,
0,0,44,4,0,0,
124,13,0,0,82,68,
69,70,136,3,0,0,
1,0,0,0,184,0,
0,0,3,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
94,3,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,172,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,179,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,80,
117,115,104,0,179,0,
0,0,9,0,0,0,
208,0,0,0,80,0,
0,0,0,0,0,0,
0,0,0,0,56,2,
0,0,0,0,0,0,
16,0,0,0,0,0,
0,0,84,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,120,2,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
84,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
140,2,0,0,32,0,
0,0,16,0,0,0,
0,0,0,0,84,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,158,2,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,184,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,220,2,0,0,
52,0,0,0,4,0,
0,0,2,0,0,0,
248,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
28,3,0,0,56,0,
0,0,4,0,0,0,
2,0,0,0,248,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,49,3,
0,0,60,0,0,0,
4,0,0,0,2,0,
0,0,248,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,63,3,0,0,
64,0,0,0,4,0,
0,0,2,0,0,0,
248,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
79,3,0,0,68,0,
0,0,4,0,0,0,
2,0,0,0,248,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,112,97,
114,97,109,115,95,83,
111,117,114,99,101,83,
105,122,101,0,102,108,
111,97,116,52,0,171,
171,171,1,0,3,0,
1,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,74,2,
0,0,112,97,114,97,
109,115,95,79,114,105,
103,105,110,97,108,83,
105,122,101,0,112,97,
114,97,109,115,95,79,
117,116,112,117,116,83,
105,122,101,0,112,97,
114,97,109,115,95,70,
114,97,109,101,67,111,
117,110,116,0,100,119,
111,114,100,0,171,171,
0,0,19,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,176,2,0,0,
112,97,114,97,109,115,
95,116,101,109,112,101,
114,97,116,117,114,101,
0,102,108,111,97,116,
0,171,171,171,0,0,
3,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
239,2,0,0,112,97,
114,97,109,115,95,108,
117,109,97,95,112,114,
101,115,101,114,118,101,
0,112,97,114,97,109,
115,95,119,112,95,114,
101,100,0,112,97,114,
97,109,115,95,119,112,
95,103,114,101,101,110,
0,112,97,114,97,109,
115,95,119,112,95,98,
108,117,101,0,77,105,
99,114,111,115,111,102,
116,32,40,82,41,32,
72,76,83,76,32,83,
104,97,100,101,114,32,
67,111,109,112,105,108,
101,114,32,49,48,46,
49,0,171,171,73,83,
71,78,44,0,0,0,
1,0,0,0,8,0,
0,0,32,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,0,0,0,
83,86,95,84,97,114,
103,101,116,0,171,171,
83,72,69,88,72,9,
0,0,80,0,0,0,
82,2,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,1,0,
0,0,5,0,0,0,
90,0,0,3,0,96,
16,0,2,0,0,0,
88,24,0,4,0,112,
16,0,2,0,0,0,
85,85,0,0,98,16,
0,3,50,16,16,0,
0,0,0,0,101,0,
0,3,242,32,16,0,
0,0,0,0,104,0,
0,2,4,0,0,0,
50,0,0,16,242,0,
16,0,0,0,0,0,
86,133,32,0,1,0,
0,0,3,0,0,0,
2,64,0,0,23,183,
209,56,23,183,209,56,
23,183,209,56,23,183,
209,56,2,64,0,0,
10,25,90,190,185,165,
226,190,109,58,21,190,
48,128,145,191,56,0,
0,7,50,0,16,0,
1,0,0,0,214,5,
16,0,0,0,0,0,
214,5,16,0,0,0,
0,0,56,0,0,7,
50,0,16,0,1,0,
0,0,214,5,16,0,
0,0,0,0,70,0,
16,0,1,0,0,0,
56,0,0,10,50,0,
16,0,1,0,0,0,
70,0,16,0,1,0,
0,0,2,64,0,0,
39,205,167,191,149,135,
189,188,0,0,0,0,
0,0,0,0,47,0,
0,5,82,0,16,0,
0,0,0,0,6,2,
16,0,0,0,0,0,
56,0,0,10,242,0,
16,0,0,0,0,0,
70,14,16,0,0,0,
0,0,2,64,0,0,
132,199,193,191,41,244,
234,192,96,232,178,191,
112,225,194,192,25,0,
0,5,82,0,16,0,
0,0,0,0,6,2,
16,0,0,0,0,0,
50,0,0,15,82,0,
16,0,0,0,0,0,
6,2,16,0,0,0,
0,0,2,64,0,0,
102,104,73,62,0,0,
0,0,3,138,56,62,
0,0,0,0,2,64,
0,0,165,48,164,62,
0,0,0,0,76,215,
248,62,0,0,0,0,
25,0,0,5,162,0,
16,0,0,0,0,0,
86,13,16,0,0,0,
0,0,50,0,0,12,
162,0,16,0,0,0,
0,0,6,4,16,0,
1,0,0,0,86,13,
16,0,0,0,0,0,
2,64,0,0,0,0,
0,0,151,11,157,63,
0,0,0,0,74,184,
214,63,56,0,0,8,
18,0,16,0,1,0,
0,0,1,64,0,0,
23,183,209,56,26,128,
32,0,1,0,0,0,
3,0,0,0,47,0,
0,5,18,0,16,0,
1,0,0,0,10,0,
16,0,1,0,0,0,
50,0,0,12,162,0,
16,0,0,0,0,0,
6,0,16,0,1,0,
0,0,2,64,0,0,
0,0,0,0,108,11,
229,62,0,0,0,0,
184,214,146,63,86,13,
16,0,0,0,0,0,
50,0,0,12,82,0,
16,0,0,0,0,0,
6,0,16,0,1,0,
0,0,2,64,0,0,
227,170,29,188,0,0,
0,0,101,139,182,187,
0,0,0,0,6,2,
16,0,0,0,0,0,
29,0,0,11,242,0,
16,0,1,0,0,0,
2,64,0,0,0,32,
203,69,0,176,204,69,
0,0,72,68,0,128,
237,68,86,133,32,0,
1,0,0,0,3,0,
0,0,55,0,0,9,
34,0,16,0,0,0,
0,0,42,0,16,0,
1,0,0,0,1,64,
0,0,0,0,0,0,
26,0,16,0,0,0,
0,0,55,32,0,9,
34,0,16,0,2,0,
0,0,26,0,16,0,
1,0,0,0,26,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,55,32,0,9,
18,0,16,0,2,0,
0,0,10,0,16,0,
1,0,0,0,1,64,
0,0,0,0,128,63,
10,0,16,0,0,0,
0,0,0,0,0,8,
18,0,16,0,0,0,
0,0,10,0,16,0,
2,0,0,0,58,128,
32,0,1,0,0,0,
3,0,0,0,29,0,
0,8,18,0,16,0,
1,0,0,0,26,128,
32,0,1,0,0,0,
3,0,0,0,1,64,
0,0,0,64,206,69,
55,0,0,9,130,0,
16,0,0,0,0,0,
10,0,16,0,1,0,
0,0,1,64,0,0,
0,0,128,63,58,0,
16,0,0,0,0,0,
55,32,0,9,66,0,
16,0,2,0,0,0,
58,0,16,0,1,0,
0,0,1,64,0,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
0,0,0,8,98,0,
16,0,0,0,0,0,
86,6,16,0,2,0,
0,0,6,129,32,0,
1,0,0,0,4,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,114,0,16,0,
1,0,0,0,70,16,
16,0,0,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,54,32,
0,5,114,0,16,0,
1,0,0,0,70,2,
16,0,1,0,0,0,
0,0,0,10,114,0,
16,0,2,0,0,0,
70,2,16,0,1,0,
0,0,2,64,0,0,
174,71,97,61,174,71,
97,61,174,71,97,61,
0,0,0,0,56,0,
0,10,114,0,16,0,
2,0,0,0,70,2,
16,0,2,0,0,0,
2,64,0,0,111,167,
114,63,111,167,114,63,
111,167,114,63,0,0,
0,0,47,0,0,5,
114,0,16,0,2,0,
0,0,70,2,16,0,
2,0,0,0,56,0,
0,10,114,0,16,0,
2,0,0,0,70,2,
16,0,2,0,0,0,
2,64,0,0,154,153,
25,64,154,153,25,64,
154,153,25,64,0,0,
0,0,25,0,0,5,
114,0,16,0,2,0,
0,0,70,2,16,0,
2,0,0,0,29,0,
0,10,114,0,16,0,
3,0,0,0,2,64,
0,0,230,174,37,61,
230,174,37,61,230,174,
37,61,0,0,0,0,
70,2,16,0,1,0,
0,0,56,0,0,10,
114,0,16,0,1,0,
0,0,70,2,16,0,
1,0,0,0,2,64,
0,0,145,131,158,61,
145,131,158,61,145,131,
158,61,0,0,0,0,
55,0,0,9,114,0,
16,0,1,0,0,0,
70,2,16,0,3,0,
0,0,70,2,16,0,
1,0,0,0,70,2,
16,0,2,0,0,0,
56,0,0,7,114,0,
16,0,0,0,0,0,
70,2,16,0,0,0,
0,0,70,2,16,0,
1,0,0,0,16,0,
0,10,34,0,16,0,
1,0,0,0,2,64,
0,0,237,198,89,62,
55,20,55,63,125,208,
147,61,0,0,0,0,
70,2,16,0,1,0,
0,0,16,0,0,10,
130,0,16,0,0,0,
0,0,2,64,0,0,
124,45,211,62,55,20,
183,62,156,196,56,62,
0,0,0,0,70,2,
16,0,0,0,0,0,
16,0,0,10,18,0,
16,0,2,0,0,0,
2,64,0,0,33,98,
158,60,239,26,244,61,
33,71,115,63,0,0,
0,0,70,2,16,0,
0,0,0,0,16,0,
0,10,18,0,16,0,
1,0,0,0,2,64,
0,0,237,198,89,62,
55,20,55,63,125,208,
147,61,0,0,0,0,
70,2,16,0,0,0,
0,0,0,0,0,7,
18,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,10,0,
16,0,1,0,0,0,
0,0,0,7,18,0,
16,0,0,0,0,0,
10,0,16,0,2,0,
0,0,10,0,16,0,
0,0,0,0,14,0,
0,7,34,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,29,0,0,7,
66,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
14,0,0,7,18,0,
16,0,0,0,0,0,
10,0,16,0,1,0,
0,0,10,0,16,0,
0,0,0,0,55,0,
0,12,194,0,16,0,
1,0,0,0,166,10,
16,0,0,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,0,
229,208,194,62,9,249,
192,62,86,1,16,0,
0,0,0,0,24,0,
0,8,18,0,16,0,
0,0,0,0,1,64,
0,0,0,0,128,63,
42,128,32,0,1,0,
0,0,3,0,0,0,
55,0,0,9,114,0,
16,0,0,0,0,0,
6,0,16,0,0,0,
0,0,150,7,16,0,
1,0,0,0,134,3,
16,0,1,0,0,0,
14,0,0,7,66,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,42,0,16,0,
0,0,0,0,56,0,
0,7,18,0,16,0,
1,0,0,0,42,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,14,0,0,7,
34,0,16,0,0,0,
0,0,10,0,16,0,
1,0,0,0,26,0,
16,0,0,0,0,0,
50,0,0,10,34,0,
16,0,0,0,0,0,
10,0,16,128,65,0,
0,0,0,0,0,0,
42,0,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,0,0,
0,8,66,0,16,0,
1,0,0,0,10,0,
16,128,65,0,0,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
29,0,0,7,34,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
0,0,10,0,16,0,
0,0,0,0,54,0,
0,5,34,0,16,0,
1,0,0,0,10,0,
16,0,0,0,0,0,
55,0,0,9,18,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,0,1,64,
0,0,0,0,128,63,
56,0,0,7,114,0,
16,0,0,0,0,0,
70,2,16,0,1,0,
0,0,6,0,16,0,
0,0,0,0,16,32,
0,10,18,0,16,0,
1,0,0,0,2,64,
0,0,154,99,79,64,
244,192,196,191,130,63,
255,190,0,0,0,0,
70,2,16,0,0,0,
0,0,16,32,0,10,
34,0,16,0,1,0,
0,0,2,64,0,0,
209,33,120,191,31,33,
240,63,160,54,42,61,
0,0,0,0,70,2,
16,0,0,0,0,0,
16,32,0,10,66,0,
16,0,1,0,0,0,
2,64,0,0,85,234,
99,61,42,236,80,190,
40,83,135,63,0,0,
0,0,70,2,16,0,
0,0,0,0,47,0,
0,5,114,0,16,0,
0,0,0,0,70,2,
16,0,1,0,0,0,
56,0,0,10,114,0,
16,0,0,0,0,0,
70,2,16,0,0,0,
0,0,2,64,0,0,
85,85,213,62,85,85,
213,62,85,85,213,62,
0,0,0,0,25,0,
0,5,114,0,16,0,
0,0,0,0,70,2,
16,0,0,0,0,0,
50,0,0,15,114,0,
16,0,0,0,0,0,
70,2,16,0,0,0,
0,0,2,64,0,0,
61,10,135,63,61,10,
135,63,61,10,135,63,
0,0,0,0,2,64,
0,0,174,71,97,189,
174,71,97,189,174,71,
97,189,0,0,0,0,
29,0,0,10,114,0,
16,0,2,0,0,0,
2,64,0,0,231,43,
77,59,231,43,77,59,
231,43,77,59,0,0,
0,0,70,2,16,0,
1,0,0,0,56,0,
0,10,114,0,16,0,
1,0,0,0,70,2,
16,0,1,0,0,0,
2,64,0,0,82,184,
78,65,82,184,78,65,
82,184,78,65,0,0,
0,0,55,0,0,9,
114,32,16,0,0,0,
0,0,70,2,16,0,
2,0,0,0,70,2,
16,0,1,0,0,0,
70,2,16,0,0,0,
0,0,54,0,0,5,
130,32,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,62,0,
0,1,83,84,65,84,
148,0,0,0,67,0,
0,0,4,0,0,0,
0,0,0,0,2,0,
0,0,52,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
10,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const uint32_t sVertexHash[] = 
{
0xc49a5333,0x4d5cdb09,0x53954c0a,0xebfbfa7c,0x12d01f46,0x363bcc02,
0x57cc5387,0x6e9dfae
};


static const uint32_t sFragmentHash[] =
{
0x452f7a5e,0x8b2bf48a,0xe72ca40a,0x57543a8e,0xf6a93820,0x6e9490ed,
0xdd9beb1a,0x547a41f1
};

}

namespace RetroArch
{
class MiscShadersWhite_pointShaderDef : public ShaderDef
{
public:
	MiscShadersWhite_pointShaderDef() : ShaderDef{}
	{
		Name = "white_point";
		VertexByteCode = RetroArchMiscShadersWhite_pointShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchMiscShadersWhite_pointShaderDefs::sVertexByteCode);
		VertexHash = RetroArchMiscShadersWhite_pointShaderDefs::sVertexHash;
		FragmentByteCode = RetroArchMiscShadersWhite_pointShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchMiscShadersWhite_pointShaderDefs::sFragmentByteCode);
		FragmentHash = RetroArchMiscShadersWhite_pointShaderDefs::sFragmentHash;
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FrameCount", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("temperature", -1, 52, 4, 1031.000000f, 12047.000000f, 9311.000000f, 72.000000f, "White Point"));
		Params.push_back(ShaderParam("luma_preserve", -1, 56, 4, 0.000000f, 1.000000f, 1.000000f, 1.000000f, "Preserve Luminance"));
		Params.push_back(ShaderParam("wp_red", -1, 60, 4, -1.000000f, 1.000000f, 0.000000f, 0.010000f, "Red Shift"));
		Params.push_back(ShaderParam("wp_green", -1, 64, 4, -1.000000f, 1.000000f, 0.000000f, 0.010000f, "Green Shift"));
		Params.push_back(ShaderParam("wp_blue", -1, 68, 4, -1.000000f, 1.000000f, 0.000000f, 0.010000f, "Blue Shift"));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
