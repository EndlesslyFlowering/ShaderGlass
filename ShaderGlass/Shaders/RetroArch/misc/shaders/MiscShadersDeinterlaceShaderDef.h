/*
ShaderGlass shader misc/shaders\deinterlace imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/misc/shaders/deinterlace.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

//  Detect interlacing based on the number of lines in the source.
//  NTSC: 525 lines, 262.5/field; 486 active (2 half-lines), 243/field
//  NTSC Emulators: Typically 224 or 240 lines
//  PAL: 625 lines, 312.5/field; 576 active (typical), 288/field
//  PAL Emulators: ?
//  ATSC: 720p, 1080i, 1080p
//  Where do we place our cutoffs?  Assumptions:
//  1.) We only need to care about active lines.
//  2.) Anything > 288 and <= 576 lines is probably interlaced.
//  3.) Anything > 576 lines is probably not interlaced...
//  4.) ...except 1080 lines, which is a crapshoot (user decision).
//  5.) Just in case the main program uses calculated video sizes,
//      we should nudge the float thresholds a bit.
//  If we're interlacing, determine which field curr_line is in:
//  Use under_half to fix a rounding bug around exact texel locations.
//  Select the correct color, and output the result:

*/

#pragma once

namespace RetroArchMiscShadersDeinterlaceShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,14,27,
228,145,193,23,192,162,
127,76,11,142,197,132,
45,39,1,0,0,0,
48,7,0,0,5,0,
0,0,52,0,0,0,
188,3,0,0,8,4,
0,0,120,4,0,0,
148,6,0,0,82,68,
69,70,128,3,0,0,
2,0,0,0,136,0,
0,0,2,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
87,3,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
124,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,128,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,85,66,
79,0,80,117,115,104,
0,171,171,171,124,0,
0,0,1,0,0,0,
184,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,128,0,
0,0,7,0,0,0,
24,1,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,224,0,
0,0,0,0,0,0,
64,0,0,0,2,0,
0,0,244,0,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,103,108,111,98,
97,108,95,77,86,80,
0,102,108,111,97,116,
52,120,52,0,2,0,
3,0,4,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
235,0,0,0,48,2,
0,0,0,0,0,0,
16,0,0,0,0,0,
0,0,76,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,112,2,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
76,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
135,2,0,0,32,0,
0,0,16,0,0,0,
2,0,0,0,76,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,156,2,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,184,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,220,2,0,0,
52,0,0,0,4,0,
0,0,0,0,0,0,
252,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
32,3,0,0,56,0,
0,0,4,0,0,0,
2,0,0,0,252,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,62,3,
0,0,60,0,0,0,
4,0,0,0,2,0,
0,0,252,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,114,101,103,105,
115,116,101,114,115,95,
79,117,116,112,117,116,
83,105,122,101,0,102,
108,111,97,116,52,0,
1,0,3,0,1,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,69,2,0,0,
114,101,103,105,115,116,
101,114,115,95,79,114,
105,103,105,110,97,108,
83,105,122,101,0,114,
101,103,105,115,116,101,
114,115,95,83,111,117,
114,99,101,83,105,122,
101,0,114,101,103,105,
115,116,101,114,115,95,
70,114,97,109,101,67,
111,117,110,116,0,100,
119,111,114,100,0,171,
0,0,19,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,177,2,0,0,
114,101,103,105,115,116,
101,114,115,95,105,110,
116,101,114,108,97,99,
101,95,98,102,102,0,
102,108,111,97,116,0,
171,171,0,0,3,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,244,2,
0,0,114,101,103,105,
115,116,101,114,115,95,
102,111,114,99,101,95,
110,111,110,105,110,116,
101,114,108,97,99,101,
100,0,114,101,103,105,
115,116,101,114,115,95,
105,110,116,101,114,108,
97,99,101,95,49,48,
56,48,0,77,105,99,
114,111,115,111,102,116,
32,40,82,41,32,72,
76,83,76,32,83,104,
97,100,101,114,32,67,
111,109,112,105,108,101,
114,32,49,48,46,49,
0,171,73,83,71,78,
68,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,15,0,0,
56,0,0,0,1,0,
0,0,0,0,0,0,
3,0,0,0,1,0,
0,0,3,3,0,0,
84,69,88,67,79,79,
82,68,0,171,171,171,
79,83,71,78,104,0,
0,0,3,0,0,0,
8,0,0,0,80,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
3,12,0,0,80,0,
0,0,1,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
4,11,0,0,89,0,
0,0,0,0,0,0,
1,0,0,0,3,0,
0,0,1,0,0,0,
15,0,0,0,84,69,
88,67,79,79,82,68,
0,83,86,95,80,111,
115,105,116,105,111,110,
0,171,171,171,83,72,
69,88,20,2,0,0,
80,0,1,0,133,0,
0,0,106,8,0,1,
89,0,0,4,70,142,
32,0,0,0,0,0,
4,0,0,0,89,0,
0,4,70,142,32,0,
1,0,0,0,4,0,
0,0,95,0,0,3,
242,16,16,0,0,0,
0,0,95,0,0,3,
50,16,16,0,1,0,
0,0,101,0,0,3,
50,32,16,0,0,0,
0,0,101,0,0,3,
66,32,16,0,0,0,
0,0,103,0,0,4,
242,32,16,0,1,0,
0,0,1,0,0,0,
104,0,0,2,1,0,
0,0,49,0,0,8,
18,0,16,0,0,0,
0,0,1,64,0,0,
0,64,144,67,26,128,
32,0,1,0,0,0,
2,0,0,0,49,0,
0,8,34,0,16,0,
0,0,0,0,26,128,
32,0,1,0,0,0,
2,0,0,0,1,64,
0,0,0,32,16,68,
1,0,0,7,18,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,49,0,
0,8,34,0,16,0,
0,0,0,0,42,128,
32,0,1,0,0,0,
3,0,0,0,1,64,
0,0,0,0,0,63,
1,0,0,7,18,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,49,0,
0,8,34,0,16,0,
0,0,0,0,1,64,
0,0,0,0,0,63,
58,128,32,0,1,0,
0,0,3,0,0,0,
60,0,0,7,18,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,1,0,
0,7,66,32,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
128,63,54,0,0,5,
50,32,16,0,0,0,
0,0,70,16,16,0,
1,0,0,0,56,0,
0,8,242,0,16,0,
0,0,0,0,86,21,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,1,0,0,0,
50,0,0,10,242,0,
16,0,0,0,0,0,
6,16,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,0,0,
0,0,70,14,16,0,
0,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,166,26,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,2,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,32,16,0,1,0,
0,0,246,31,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
3,0,0,0,70,14,
16,0,0,0,0,0,
62,0,0,1,83,84,
65,84,148,0,0,0,
14,0,0,0,1,0,
0,0,0,0,0,0,
5,0,0,0,8,0,
0,0,0,0,0,0,
4,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,4,42,
190,183,241,89,29,63,
122,15,185,30,56,35,
3,176,1,0,0,0,
252,8,0,0,5,0,
0,0,52,0,0,0,
116,3,0,0,192,3,
0,0,244,3,0,0,
96,8,0,0,82,68,
69,70,56,3,0,0,
1,0,0,0,184,0,
0,0,3,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
15,3,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,172,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,179,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,80,
117,115,104,0,179,0,
0,0,7,0,0,0,
208,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,232,1,
0,0,0,0,0,0,
16,0,0,0,0,0,
0,0,4,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,40,2,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
4,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
63,2,0,0,32,0,
0,0,16,0,0,0,
2,0,0,0,4,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,84,2,
0,0,48,0,0,0,
4,0,0,0,2,0,
0,0,112,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,148,2,0,0,
52,0,0,0,4,0,
0,0,2,0,0,0,
180,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
216,2,0,0,56,0,
0,0,4,0,0,0,
0,0,0,0,180,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,246,2,
0,0,60,0,0,0,
4,0,0,0,0,0,
0,0,180,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,114,101,103,105,
115,116,101,114,115,95,
79,117,116,112,117,116,
83,105,122,101,0,102,
108,111,97,116,52,0,
1,0,3,0,1,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,253,1,0,0,
114,101,103,105,115,116,
101,114,115,95,79,114,
105,103,105,110,97,108,
83,105,122,101,0,114,
101,103,105,115,116,101,
114,115,95,83,111,117,
114,99,101,83,105,122,
101,0,114,101,103,105,
115,116,101,114,115,95,
70,114,97,109,101,67,
111,117,110,116,0,100,
119,111,114,100,0,171,
0,0,19,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,105,2,0,0,
114,101,103,105,115,116,
101,114,115,95,105,110,
116,101,114,108,97,99,
101,95,98,102,102,0,
102,108,111,97,116,0,
171,171,0,0,3,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,172,2,
0,0,114,101,103,105,
115,116,101,114,115,95,
102,111,114,99,101,95,
110,111,110,105,110,116,
101,114,108,97,99,101,
100,0,114,101,103,105,
115,116,101,114,115,95,
105,110,116,101,114,108,
97,99,101,95,49,48,
56,48,0,77,105,99,
114,111,115,111,102,116,
32,40,82,41,32,72,
76,83,76,32,83,104,
97,100,101,114,32,67,
111,109,112,105,108,101,
114,32,49,48,46,49,
0,171,73,83,71,78,
68,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,3,0,0,
56,0,0,0,1,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,4,4,0,0,
84,69,88,67,79,79,
82,68,0,171,171,171,
79,83,71,78,44,0,
0,0,1,0,0,0,
8,0,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
15,0,0,0,83,86,
95,84,97,114,103,101,
116,0,171,171,83,72,
69,88,100,4,0,0,
80,0,0,0,25,1,
0,0,106,8,0,1,
89,0,0,4,70,142,
32,0,1,0,0,0,
4,0,0,0,90,0,
0,3,0,96,16,0,
2,0,0,0,88,24,
0,4,0,112,16,0,
2,0,0,0,85,85,
0,0,98,16,0,3,
50,16,16,0,0,0,
0,0,98,16,0,3,
66,16,16,0,0,0,
0,0,101,0,0,3,
242,32,16,0,0,0,
0,0,104,0,0,2,
2,0,0,0,50,0,
0,10,18,0,16,0,
0,0,0,0,26,16,
16,0,0,0,0,0,
26,128,32,0,1,0,
0,0,2,0,0,0,
1,64,0,0,119,190,
255,190,86,0,0,6,
34,0,16,0,0,0,
0,0,10,128,32,0,
1,0,0,0,3,0,
0,0,0,0,0,8,
34,0,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,26,128,
32,0,1,0,0,0,
3,0,0,0,0,0,
0,7,66,0,16,0,
0,0,0,0,42,16,
16,0,0,0,0,0,
1,64,0,0,0,0,
128,63,14,0,0,7,
130,0,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
65,0,0,5,146,0,
16,0,0,0,0,0,
6,12,16,0,0,0,
0,0,50,0,0,10,
34,0,16,0,0,0,
0,0,42,0,16,128,
65,0,0,0,0,0,
0,0,58,0,16,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
0,0,0,7,18,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,14,0,
0,7,34,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,65,0,0,5,
34,0,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,50,0,
0,10,18,0,16,0,
0,0,0,0,42,0,
16,128,65,0,0,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,54,0,0,5,
18,0,16,0,1,0,
0,0,1,64,0,0,
0,0,0,0,54,0,
0,6,34,0,16,0,
1,0,0,0,58,128,
32,0,1,0,0,0,
2,0,0,0,0,0,
0,8,98,0,16,0,
0,0,0,0,6,1,
16,128,65,0,0,0,
1,0,0,0,6,17,
16,0,0,0,0,0,
0,0,0,7,50,0,
16,0,1,0,0,0,
70,0,16,0,1,0,
0,0,70,16,16,0,
0,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,1,0,0,0,
70,0,16,0,1,0,
0,0,70,126,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
47,0,0,5,114,0,
16,0,1,0,0,0,
70,2,16,0,1,0,
0,0,56,0,0,10,
114,0,16,0,1,0,
0,0,70,2,16,0,
1,0,0,0,2,64,
0,0,205,204,12,64,
205,204,12,64,205,204,
12,64,0,0,0,0,
25,0,0,5,114,0,
16,0,1,0,0,0,
70,2,16,0,1,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,226,0,16,0,
0,0,0,0,150,5,
16,0,0,0,0,0,
54,121,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,47,0,
0,5,226,0,16,0,
0,0,0,0,86,14,
16,0,0,0,0,0,
56,0,0,10,226,0,
16,0,0,0,0,0,
86,14,16,0,0,0,
0,0,2,64,0,0,
0,0,0,0,205,204,
12,64,205,204,12,64,
205,204,12,64,25,0,
0,5,226,0,16,0,
0,0,0,0,86,14,
16,0,0,0,0,0,
0,0,0,7,226,0,
16,0,0,0,0,0,
6,9,16,0,1,0,
0,0,86,14,16,0,
0,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,1,0,0,0,
70,16,16,0,0,0,
0,0,70,126,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
47,0,0,5,114,0,
16,0,1,0,0,0,
70,2,16,0,1,0,
0,0,56,0,0,10,
114,0,16,0,1,0,
0,0,70,2,16,0,
1,0,0,0,2,64,
0,0,205,204,12,64,
205,204,12,64,205,204,
12,64,0,0,0,0,
25,0,0,5,114,0,
16,0,1,0,0,0,
70,2,16,0,1,0,
0,0,50,0,0,13,
226,0,16,0,0,0,
0,0,86,14,16,0,
0,0,0,0,2,64,
0,0,0,0,0,0,
0,0,0,63,0,0,
0,63,0,0,0,63,
6,9,16,128,65,0,
0,0,1,0,0,0,
50,0,0,9,114,0,
16,0,0,0,0,0,
6,0,16,0,0,0,
0,0,150,7,16,0,
0,0,0,0,70,2,
16,0,1,0,0,0,
47,0,0,5,114,0,
16,0,0,0,0,0,
70,2,16,0,0,0,
0,0,56,0,0,10,
114,0,16,0,0,0,
0,0,70,2,16,0,
0,0,0,0,2,64,
0,0,47,186,232,62,
47,186,232,62,47,186,
232,62,0,0,0,0,
25,0,0,5,114,32,
16,0,0,0,0,0,
70,2,16,0,0,0,
0,0,54,0,0,5,
130,32,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,62,0,
0,1,83,84,65,84,
148,0,0,0,35,0,
0,0,2,0,0,0,
0,0,0,0,3,0,
0,0,27,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const uint32_t sVertexHash[] = 
{
0xdb381688,0xccb84ca5,0x9cfd9497,0xdc7feda4,0x80842fa1,0x264ec364,
0xe88fc668,0x5127fdd0
};


static const uint32_t sFragmentHash[] =
{
0x9d6de61,0x6d22c136,0x102a5a56,0xd569b27e,0xb8314ce0,0xfd50f7ab,
0x7060e1c2,0x52c2c599
};

}

namespace RetroArch
{
class MiscShadersDeinterlaceShaderDef : public ShaderDef
{
public:
	MiscShadersDeinterlaceShaderDef() : ShaderDef{}
	{
		Name = "deinterlace";
		VertexByteCode = RetroArchMiscShadersDeinterlaceShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchMiscShadersDeinterlaceShaderDefs::sVertexByteCode);
		VertexHash = RetroArchMiscShadersDeinterlaceShaderDefs::sVertexHash;
		FragmentByteCode = RetroArchMiscShadersDeinterlaceShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchMiscShadersDeinterlaceShaderDefs::sFragmentByteCode);
		FragmentHash = RetroArchMiscShadersDeinterlaceShaderDefs::sFragmentHash;
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FrameCount", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("interlace_bff", -1, 52, 4, 0.000000f, 1.000000f, 0.000000f, 1.000000f, "Interlacing BFF"));
		Params.push_back(ShaderParam("force_noninterlaced", -1, 56, 4, 0.000000f, 1.000000f, 0.000000f, 1.000000f, "Force Non-interlaced"));
		Params.push_back(ShaderParam("interlace_1080", -1, 60, 4, 0.000000f, 1.000000f, 0.000000f, 1.000000f, "1080 is Interlaced"));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
