/*
ShaderGlass shader misc/shaders\color-mangler imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/misc/shaders/color-mangler.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

//				params.r   params.g    params.b   params.black

*/

#pragma once

namespace RetroArchMiscShadersColorManglerShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,70,157,
101,249,174,100,43,221,
126,125,12,154,217,12,
102,75,1,0,0,0,
108,4,0,0,5,0,
0,0,52,0,0,0,
28,2,0,0,104,2,
0,0,192,2,0,0,
208,3,0,0,82,68,
69,70,224,1,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
182,1,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,4,0,
0,0,120,0,0,0,
112,0,0,0,0,0,
0,0,0,0,0,0,
24,1,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,44,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,80,1,
0,0,64,0,0,0,
16,0,0,0,0,0,
0,0,108,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,144,1,0,0,
80,0,0,0,16,0,
0,0,0,0,0,0,
108,1,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
164,1,0,0,96,0,
0,0,16,0,0,0,
0,0,0,0,108,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,35,1,0,0,
103,108,111,98,97,108,
95,79,117,116,112,117,
116,83,105,122,101,0,
102,108,111,97,116,52,
0,171,171,171,1,0,
3,0,1,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
98,1,0,0,103,108,
111,98,97,108,95,79,
114,105,103,105,110,97,
108,83,105,122,101,0,
103,108,111,98,97,108,
95,83,111,117,114,99,
101,83,105,122,101,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,171,171,
73,83,71,78,68,0,
0,0,2,0,0,0,
8,0,0,0,56,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
15,15,0,0,56,0,
0,0,1,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
3,3,0,0,84,69,
88,67,79,79,82,68,
0,171,171,171,79,83,
71,78,80,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,12,
0,0,65,0,0,0,
0,0,0,0,1,0,
0,0,3,0,0,0,
1,0,0,0,15,0,
0,0,84,69,88,67,
79,79,82,68,0,83,
86,95,80,111,115,105,
116,105,111,110,0,171,
171,171,83,72,69,88,
8,1,0,0,80,0,
1,0,66,0,0,0,
106,8,0,1,89,0,
0,4,70,142,32,0,
0,0,0,0,4,0,
0,0,95,0,0,3,
242,16,16,0,0,0,
0,0,95,0,0,3,
50,16,16,0,1,0,
0,0,101,0,0,3,
50,32,16,0,0,0,
0,0,103,0,0,4,
242,32,16,0,1,0,
0,0,1,0,0,0,
104,0,0,2,1,0,
0,0,54,0,0,5,
50,32,16,0,0,0,
0,0,70,16,16,0,
1,0,0,0,56,0,
0,8,242,0,16,0,
0,0,0,0,86,21,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,1,0,0,0,
50,0,0,10,242,0,
16,0,0,0,0,0,
6,16,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,0,0,
0,0,70,14,16,0,
0,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,166,26,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,2,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,32,16,0,1,0,
0,0,246,31,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
3,0,0,0,70,14,
16,0,0,0,0,0,
62,0,0,1,83,84,
65,84,148,0,0,0,
6,0,0,0,1,0,
0,0,0,0,0,0,
4,0,0,0,4,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,108,35,
224,254,39,57,75,154,
225,250,35,72,37,75,
201,134,1,0,0,0,
244,11,0,0,5,0,
0,0,52,0,0,0,
12,5,0,0,64,5,
0,0,116,5,0,0,
88,11,0,0,82,68,
69,70,208,4,0,0,
1,0,0,0,184,0,
0,0,3,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
166,4,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,172,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,179,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,80,
117,115,104,0,179,0,
0,0,18,0,0,0,
208,0,0,0,80,0,
0,0,0,0,0,0,
0,0,0,0,160,3,
0,0,0,0,0,0,
4,0,0,0,2,0,
0,0,188,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,224,3,0,0,
4,0,0,0,4,0,
0,0,2,0,0,0,
188,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
245,3,0,0,8,0,
0,0,4,0,0,0,
2,0,0,0,188,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,10,4,
0,0,12,0,0,0,
4,0,0,0,2,0,
0,0,188,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,21,4,0,0,
16,0,0,0,4,0,
0,0,2,0,0,0,
188,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
32,4,0,0,20,0,
0,0,4,0,0,0,
2,0,0,0,188,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,46,4,
0,0,24,0,0,0,
4,0,0,0,2,0,
0,0,188,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,55,4,0,0,
28,0,0,0,4,0,
0,0,2,0,0,0,
188,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
64,4,0,0,32,0,
0,0,4,0,0,0,
2,0,0,0,188,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,73,4,
0,0,36,0,0,0,
4,0,0,0,2,0,
0,0,188,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,83,4,0,0,
40,0,0,0,4,0,
0,0,2,0,0,0,
188,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
93,4,0,0,44,0,
0,0,4,0,0,0,
2,0,0,0,188,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,4,
0,0,48,0,0,0,
4,0,0,0,2,0,
0,0,188,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,113,4,0,0,
52,0,0,0,4,0,
0,0,2,0,0,0,
188,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
123,4,0,0,56,0,
0,0,4,0,0,0,
2,0,0,0,188,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,133,4,
0,0,60,0,0,0,
4,0,0,0,2,0,
0,0,188,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,144,4,0,0,
64,0,0,0,4,0,
0,0,2,0,0,0,
188,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
155,4,0,0,68,0,
0,0,4,0,0,0,
2,0,0,0,188,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,112,97,
114,97,109,115,95,103,
97,109,109,97,95,98,
111,111,115,116,95,114,
0,102,108,111,97,116,
0,171,0,0,3,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,181,3,
0,0,112,97,114,97,
109,115,95,103,97,109,
109,97,95,98,111,111,
115,116,95,103,0,112,
97,114,97,109,115,95,
103,97,109,109,97,95,
98,111,111,115,116,95,
98,0,112,97,114,97,
109,115,95,115,97,116,
0,112,97,114,97,109,
115,95,108,117,109,0,
112,97,114,97,109,115,
95,99,110,116,114,115,
116,0,112,97,114,97,
109,115,95,114,0,112,
97,114,97,109,115,95,
103,0,112,97,114,97,
109,115,95,98,0,112,
97,114,97,109,115,95,
114,103,0,112,97,114,
97,109,115,95,114,98,
0,112,97,114,97,109,
115,95,103,114,0,112,
97,114,97,109,115,95,
103,98,0,112,97,114,
97,109,115,95,98,114,
0,112,97,114,97,109,
115,95,98,103,0,112,
97,114,97,109,115,95,
98,108,114,0,112,97,
114,97,109,115,95,98,
108,103,0,112,97,114,
97,109,115,95,98,108,
98,0,77,105,99,114,
111,115,111,102,116,32,
40,82,41,32,72,76,
83,76,32,83,104,97,
100,101,114,32,67,111,
109,112,105,108,101,114,
32,49,48,46,49,0,
171,171,73,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,3,0,0,
84,69,88,67,79,79,
82,68,0,171,171,171,
79,83,71,78,44,0,
0,0,1,0,0,0,
8,0,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
15,0,0,0,83,86,
95,84,97,114,103,101,
116,0,171,171,83,72,
69,88,220,5,0,0,
80,0,0,0,119,1,
0,0,106,8,0,1,
89,0,0,4,70,142,
32,0,1,0,0,0,
5,0,0,0,90,0,
0,3,0,96,16,0,
2,0,0,0,88,24,
0,4,0,112,16,0,
2,0,0,0,85,85,
0,0,98,16,0,3,
50,16,16,0,0,0,
0,0,101,0,0,3,
242,32,16,0,0,0,
0,0,104,0,0,2,
8,0,0,0,0,0,
0,12,242,0,16,0,
0,0,0,0,2,64,
0,0,0,0,128,63,
205,204,12,64,205,204,
12,64,205,204,12,64,
54,137,32,128,65,0,
0,0,1,0,0,0,
0,0,0,0,14,0,
0,10,226,0,16,0,
0,0,0,0,2,64,
0,0,0,0,128,63,
0,0,128,63,0,0,
128,63,0,0,128,63,
86,14,16,0,0,0,
0,0,50,0,0,13,
114,0,16,0,1,0,
0,0,6,0,16,0,
0,0,0,0,2,64,
0,0,208,179,89,62,
89,23,55,63,152,221,
147,61,0,0,0,0,
246,143,32,0,1,0,
0,0,0,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
242,0,16,0,2,0,
0,0,70,16,16,0,
0,0,0,0,70,126,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,47,0,0,5,
242,0,16,0,2,0,
0,0,70,14,16,0,
2,0,0,0,56,0,
0,10,242,0,16,0,
2,0,0,0,70,14,
16,0,2,0,0,0,
2,64,0,0,205,204,
12,64,205,204,12,64,
205,204,12,64,205,204,
12,64,25,0,0,5,
242,0,16,0,2,0,
0,0,70,14,16,0,
2,0,0,0,0,0,
0,11,242,0,16,0,
3,0,0,0,70,14,
16,128,65,0,0,0,
2,0,0,0,2,64,
0,0,0,0,0,63,
0,0,0,63,0,0,
0,63,0,0,0,63,
0,0,0,9,18,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
128,63,26,128,32,128,
65,0,0,0,1,0,
0,0,1,0,0,0,
50,0,0,9,242,0,
16,0,2,0,0,0,
6,0,16,0,0,0,
0,0,70,14,16,0,
3,0,0,0,70,14,
16,0,2,0,0,0,
56,32,0,8,242,0,
16,0,2,0,0,0,
70,14,16,0,2,0,
0,0,6,128,32,0,
1,0,0,0,1,0,
0,0,54,0,0,6,
130,0,16,0,3,0,
0,0,10,128,32,0,
1,0,0,0,4,0,
0,0,54,0,0,5,
18,0,16,0,4,0,
0,0,10,0,16,0,
1,0,0,0,50,0,
0,10,34,0,16,0,
4,0,0,0,58,128,
32,0,1,0,0,0,
0,0,0,0,1,64,
0,0,208,179,89,190,
1,64,0,0,208,179,
89,62,54,0,0,5,
130,0,16,0,4,0,
0,0,1,64,0,0,
0,0,128,63,54,0,
0,6,18,0,16,0,
5,0,0,0,26,128,
32,0,1,0,0,0,
2,0,0,0,54,0,
0,6,34,0,16,0,
5,0,0,0,58,128,
32,0,1,0,0,0,
1,0,0,0,54,0,
0,6,66,0,16,0,
5,0,0,0,42,128,
32,0,1,0,0,0,
3,0,0,0,54,0,
0,6,130,0,16,0,
5,0,0,0,10,128,
32,0,1,0,0,0,
4,0,0,0,17,0,
0,7,18,0,16,0,
3,0,0,0,70,13,
16,0,4,0,0,0,
70,14,16,0,5,0,
0,0,54,0,0,5,
34,0,16,0,6,0,
0,0,26,0,16,0,
1,0,0,0,50,0,
0,10,18,0,16,0,
6,0,0,0,58,128,
32,0,1,0,0,0,
0,0,0,0,1,64,
0,0,89,23,55,191,
1,64,0,0,89,23,
55,63,54,0,0,5,
130,0,16,0,6,0,
0,0,1,64,0,0,
0,0,128,63,17,0,
0,7,34,0,16,0,
3,0,0,0,70,12,
16,0,6,0,0,0,
70,14,16,0,5,0,
0,0,50,0,0,10,
18,0,16,0,1,0,
0,0,58,128,32,0,
1,0,0,0,0,0,
0,0,1,64,0,0,
152,221,147,189,1,64,
0,0,152,221,147,61,
54,0,0,5,130,0,
16,0,1,0,0,0,
1,64,0,0,0,0,
128,63,17,0,0,7,
66,0,16,0,3,0,
0,0,6,14,16,0,
1,0,0,0,70,14,
16,0,5,0,0,0,
17,0,0,7,18,0,
16,0,0,0,0,0,
70,14,16,0,2,0,
0,0,70,14,16,0,
3,0,0,0,47,0,
0,5,34,0,16,0,
3,0,0,0,10,0,
16,0,0,0,0,0,
54,0,0,6,130,0,
16,0,5,0,0,0,
58,128,32,0,1,0,
0,0,3,0,0,0,
54,0,0,6,18,0,
16,0,7,0,0,0,
42,128,32,0,1,0,
0,0,1,0,0,0,
54,0,0,6,34,0,
16,0,7,0,0,0,
58,128,32,0,1,0,
0,0,2,0,0,0,
54,0,0,6,194,0,
16,0,7,0,0,0,
86,141,32,0,1,0,
0,0,3,0,0,0,
17,0,0,7,18,0,
16,0,5,0,0,0,
70,13,16,0,4,0,
0,0,70,14,16,0,
7,0,0,0,17,0,
0,7,34,0,16,0,
5,0,0,0,70,12,
16,0,6,0,0,0,
70,14,16,0,7,0,
0,0,17,0,0,7,
66,0,16,0,5,0,
0,0,6,14,16,0,
1,0,0,0,70,14,
16,0,7,0,0,0,
17,0,0,7,18,0,
16,0,0,0,0,0,
70,14,16,0,2,0,
0,0,70,14,16,0,
5,0,0,0,47,0,
0,5,18,0,16,0,
3,0,0,0,10,0,
16,0,0,0,0,0,
54,0,0,6,82,0,
16,0,5,0,0,0,
166,136,32,0,1,0,
0,0,2,0,0,0,
54,0,0,6,34,0,
16,0,5,0,0,0,
10,128,32,0,1,0,
0,0,3,0,0,0,
54,0,0,6,130,0,
16,0,5,0,0,0,
26,128,32,0,1,0,
0,0,4,0,0,0,
17,0,0,7,18,0,
16,0,4,0,0,0,
70,13,16,0,4,0,
0,0,70,14,16,0,
5,0,0,0,17,0,
0,7,34,0,16,0,
4,0,0,0,70,12,
16,0,6,0,0,0,
70,14,16,0,5,0,
0,0,17,0,0,7,
66,0,16,0,4,0,
0,0,6,14,16,0,
1,0,0,0,70,14,
16,0,5,0,0,0,
54,0,0,6,130,0,
16,0,4,0,0,0,
26,128,32,0,1,0,
0,0,4,0,0,0,
17,0,0,7,18,0,
16,0,0,0,0,0,
70,14,16,0,2,0,
0,0,70,14,16,0,
4,0,0,0,47,0,
0,5,66,0,16,0,
3,0,0,0,10,0,
16,0,0,0,0,0,
56,0,0,7,114,0,
16,0,0,0,0,0,
150,7,16,0,0,0,
0,0,70,2,16,0,
3,0,0,0,54,0,
0,5,130,0,16,0,
0,0,0,0,1,64,
0,0,0,0,128,255,
25,0,0,5,242,32,
16,0,0,0,0,0,
70,14,16,0,0,0,
0,0,62,0,0,1,
83,84,65,84,148,0,
0,0,51,0,0,0,
8,0,0,0,0,0,
0,0,2,0,0,0,
30,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
19,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0
};

}

namespace RetroArch
{
class MiscShadersColorManglerShaderDef : public ShaderDef
{
public:
	MiscShadersColorManglerShaderDef() : ShaderDef{}
	{
		Name = "color-mangler";
		VertexByteCode = RetroArchMiscShadersColorManglerShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchMiscShadersColorManglerShaderDefs::sVertexByteCode);
		FragmentByteCode = RetroArchMiscShadersColorManglerShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchMiscShadersColorManglerShaderDefs::sFragmentByteCode);
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", 0, 64, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", 0, 80, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", 0, 96, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("gamma_boost_r", -1, 0, 4, -5.000000f, 5.000000f, 0.000000f, 0.100000f, "Gamma Mod Red Channel"));
		Params.push_back(ShaderParam("gamma_boost_g", -1, 4, 4, -5.000000f, 5.000000f, 0.000000f, 0.100000f, "Gamma Mod Green Channel"));
		Params.push_back(ShaderParam("gamma_boost_b", -1, 8, 4, -5.000000f, 5.000000f, 0.000000f, 0.100000f, "Gamma Mod Blue Channel"));
		Params.push_back(ShaderParam("sat", -1, 12, 4, 0.000000f, 3.000000f, 1.000000f, 0.010000f, "Saturation"));
		Params.push_back(ShaderParam("lum", -1, 16, 4, 0.000000f, 5.000000f, 1.000000f, 0.010000f, "Luminance"));
		Params.push_back(ShaderParam("cntrst", -1, 20, 4, 0.000000f, 2.000000f, 1.000000f, 0.010000f, "Contrast"));
		Params.push_back(ShaderParam("r", -1, 24, 4, 0.000000f, 2.000000f, 1.000000f, 0.010000f, "Red"));
		Params.push_back(ShaderParam("g", -1, 28, 4, 0.000000f, 2.000000f, 1.000000f, 0.010000f, "Green"));
		Params.push_back(ShaderParam("b", -1, 32, 4, 0.000000f, 2.000000f, 1.000000f, 0.010000f, "Blue"));
		Params.push_back(ShaderParam("rg", -1, 36, 4, 0.000000f, 1.000000f, 0.000000f, 0.005000f, "Red-Green Tint"));
		Params.push_back(ShaderParam("rb", -1, 40, 4, 0.000000f, 1.000000f, 0.000000f, 0.005000f, "Red-Blue Tint"));
		Params.push_back(ShaderParam("gr", -1, 44, 4, 0.000000f, 1.000000f, 0.000000f, 0.005000f, "Green-Red Tint"));
		Params.push_back(ShaderParam("gb", -1, 48, 4, 0.000000f, 1.000000f, 0.000000f, 0.005000f, "Green-Blue Tint"));
		Params.push_back(ShaderParam("br", -1, 52, 4, 0.000000f, 1.000000f, 0.000000f, 0.005000f, "Blue-Red Tint"));
		Params.push_back(ShaderParam("bg", -1, 56, 4, 0.000000f, 1.000000f, 0.000000f, 0.005000f, "Blue-Green Tint"));
		Params.push_back(ShaderParam("blr", -1, 60, 4, 0.000000f, 1.000000f, 0.000000f, 0.005000f, "Black-Red Tint"));
		Params.push_back(ShaderParam("blg", -1, 64, 4, 0.000000f, 1.000000f, 0.000000f, 0.005000f, "Black-Green Tint"));
		Params.push_back(ShaderParam("blb", -1, 68, 4, 0.000000f, 1.000000f, 0.000000f, 0.005000f, "Black-Blue Tint"));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
