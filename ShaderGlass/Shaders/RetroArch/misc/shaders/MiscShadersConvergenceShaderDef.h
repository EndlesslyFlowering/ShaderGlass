/*
ShaderGlass shader misc/shaders\convergence imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/misc/shaders/convergence.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

*/

#pragma once

namespace RetroArchMiscShadersConvergenceShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,38,139,
137,54,239,52,16,68,
241,103,191,122,113,73,
190,34,1,0,0,0,
248,3,0,0,5,0,
0,0,52,0,0,0,
168,1,0,0,244,1,
0,0,76,2,0,0,
92,3,0,0,82,68,
69,70,108,1,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
68,1,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,2,0,
0,0,120,0,0,0,
80,0,0,0,0,0,
0,0,0,0,0,0,
200,0,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,220,0,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,0,1,
0,0,64,0,0,0,
16,0,0,0,0,0,
0,0,32,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,103,108,111,98,
97,108,95,77,86,80,
0,102,108,111,97,116,
52,120,52,0,2,0,
3,0,4,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
211,0,0,0,103,108,
111,98,97,108,95,70,
105,110,97,108,86,105,
101,119,112,111,114,116,
83,105,122,101,0,102,
108,111,97,116,52,0,
1,0,3,0,1,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,25,1,0,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
80,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
65,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,8,1,
0,0,80,0,1,0,
66,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
95,0,0,3,242,16,
16,0,0,0,0,0,
95,0,0,3,50,16,
16,0,1,0,0,0,
101,0,0,3,50,32,
16,0,0,0,0,0,
103,0,0,4,242,32,
16,0,1,0,0,0,
1,0,0,0,104,0,
0,2,1,0,0,0,
54,0,0,5,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,56,0,0,8,
242,0,16,0,0,0,
0,0,86,21,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,6,16,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,0,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,166,26,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
2,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,32,
16,0,1,0,0,0,
246,31,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,3,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,6,0,
0,0,1,0,0,0,
0,0,0,0,4,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,36,104,
101,9,239,155,187,199,
116,60,38,115,11,72,
240,230,1,0,0,0,
172,7,0,0,5,0,
0,0,52,0,0,0,
160,3,0,0,212,3,
0,0,8,4,0,0,
16,7,0,0,82,68,
69,70,100,3,0,0,
1,0,0,0,184,0,
0,0,3,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
60,3,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
1,0,0,0,1,0,
0,0,172,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,1,0,
0,0,1,0,0,0,
13,0,0,0,179,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,80,
117,115,104,0,179,0,
0,0,10,0,0,0,
208,0,0,0,80,0,
0,0,0,0,0,0,
0,0,0,0,96,2,
0,0,0,0,0,0,
16,0,0,0,2,0,
0,0,124,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,160,2,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
124,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
180,2,0,0,32,0,
0,0,16,0,0,0,
0,0,0,0,124,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,198,2,
0,0,48,0,0,0,
4,0,0,0,2,0,
0,0,220,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,0,3,0,0,
52,0,0,0,4,0,
0,0,2,0,0,0,
220,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
10,3,0,0,56,0,
0,0,4,0,0,0,
2,0,0,0,220,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,20,3,
0,0,60,0,0,0,
4,0,0,0,2,0,
0,0,220,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,30,3,0,0,
64,0,0,0,4,0,
0,0,2,0,0,0,
220,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
40,3,0,0,68,0,
0,0,4,0,0,0,
2,0,0,0,220,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,50,3,
0,0,72,0,0,0,
4,0,0,0,2,0,
0,0,220,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,112,97,114,97,
109,115,95,83,111,117,
114,99,101,83,105,122,
101,0,102,108,111,97,
116,52,0,171,171,171,
1,0,3,0,1,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,114,2,0,0,
112,97,114,97,109,115,
95,79,114,105,103,105,
110,97,108,83,105,122,
101,0,112,97,114,97,
109,115,95,79,117,116,
112,117,116,83,105,122,
101,0,112,97,114,97,
109,115,95,67,95,83,
84,82,0,102,108,111,
97,116,0,171,171,171,
0,0,3,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,211,2,0,0,
112,97,114,97,109,115,
95,82,120,0,112,97,
114,97,109,115,95,82,
121,0,112,97,114,97,
109,115,95,71,120,0,
112,97,114,97,109,115,
95,71,121,0,112,97,
114,97,109,115,95,66,
120,0,112,97,114,97,
109,115,95,66,121,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,44,0,0,0,
1,0,0,0,8,0,
0,0,32,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,0,0,0,
83,86,95,84,97,114,
103,101,116,0,171,171,
83,72,69,88,0,3,
0,0,80,0,0,0,
192,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,1,0,
0,0,5,0,0,0,
90,0,0,3,0,96,
16,0,1,0,0,0,
88,24,0,4,0,112,
16,0,1,0,0,0,
85,85,0,0,98,16,
0,3,50,16,16,0,
0,0,0,0,101,0,
0,3,242,32,16,0,
0,0,0,0,104,0,
0,2,3,0,0,0,
54,0,0,5,130,32,
16,0,0,0,0,0,
1,64,0,0,0,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,114,0,16,0,
0,0,0,0,70,16,
16,0,0,0,0,0,
70,126,16,0,1,0,
0,0,0,96,16,0,
1,0,0,0,0,0,
0,9,130,0,16,0,
0,0,0,0,1,64,
0,0,0,0,128,63,
10,128,32,128,65,0,
0,0,1,0,0,0,
3,0,0,0,56,0,
0,7,114,0,16,0,
0,0,0,0,246,15,
16,0,0,0,0,0,
70,2,16,0,0,0,
0,0,54,0,0,6,
146,0,16,0,1,0,
0,0,166,142,32,0,
1,0,0,0,0,0,
0,0,54,0,0,8,
98,0,16,0,1,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,50,0,
0,10,50,0,16,0,
2,0,0,0,70,0,
16,0,1,0,0,0,
86,133,32,0,1,0,
0,0,3,0,0,0,
70,16,16,0,0,0,
0,0,50,0,0,10,
50,0,16,0,2,0,
0,0,230,10,16,0,
1,0,0,0,166,138,
32,0,1,0,0,0,
3,0,0,0,70,0,
16,0,2,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
130,0,16,0,0,0,
0,0,70,0,16,0,
2,0,0,0,150,115,
16,0,1,0,0,0,
0,96,16,0,1,0,
0,0,50,0,0,10,
18,32,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,10,128,
32,0,1,0,0,0,
3,0,0,0,10,0,
16,0,0,0,0,0,
50,0,0,10,146,0,
16,0,0,0,0,0,
6,4,16,0,1,0,
0,0,246,143,32,0,
1,0,0,0,3,0,
0,0,6,20,16,0,
0,0,0,0,50,0,
0,10,146,0,16,0,
0,0,0,0,166,14,
16,0,1,0,0,0,
6,128,32,0,1,0,
0,0,4,0,0,0,
6,12,16,0,0,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,18,0,16,0,
0,0,0,0,198,0,
16,0,0,0,0,0,
22,126,16,0,1,0,
0,0,0,96,16,0,
1,0,0,0,50,0,
0,10,34,32,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
10,128,32,0,1,0,
0,0,3,0,0,0,
26,0,16,0,0,0,
0,0,50,0,0,10,
50,0,16,0,0,0,
0,0,70,0,16,0,
1,0,0,0,86,133,
32,0,1,0,0,0,
4,0,0,0,70,16,
16,0,0,0,0,0,
50,0,0,10,50,0,
16,0,0,0,0,0,
230,10,16,0,1,0,
0,0,166,138,32,0,
1,0,0,0,4,0,
0,0,70,0,16,0,
0,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,18,0,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,38,125,16,0,
1,0,0,0,0,96,
16,0,1,0,0,0,
50,0,0,10,66,32,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,10,128,32,0,
1,0,0,0,3,0,
0,0,42,0,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,19,0,
0,0,3,0,0,0,
0,0,0,0,2,0,
0,0,11,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const uint32_t sVertexHash[] = 
{
0x15631af8,0xf516ea71,0x983c3338,0x9299523,0xab9282f2,0xc9dc8908,
0xd2261afb,0x4f184c53
};


static const uint32_t sFragmentHash[] =
{
0x84586400,0x52ac0f60,0x677eba65,0xe31f65eb,0x85f57a83,0x941871b1,
0x99ebc96,0x99ccff8b
};

}

namespace RetroArch
{
class MiscShadersConvergenceShaderDef : public ShaderDef
{
public:
	MiscShadersConvergenceShaderDef() : ShaderDef{}
	{
		Name = "convergence";
		VertexByteCode = RetroArchMiscShadersConvergenceShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchMiscShadersConvergenceShaderDefs::sVertexByteCode);
		VertexHash = RetroArchMiscShadersConvergenceShaderDefs::sVertexHash;
		FragmentByteCode = RetroArchMiscShadersConvergenceShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchMiscShadersConvergenceShaderDefs::sFragmentByteCode);
		FragmentHash = RetroArchMiscShadersConvergenceShaderDefs::sFragmentHash;
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FinalViewportSize", 0, 64, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("C_STR", -1, 48, 4, 0.000000f, 0.500000f, 0.500000f, 0.050000f, "Convergence Overall Strength"));
		Params.push_back(ShaderParam("Rx", -1, 52, 4, -5.000000f, 5.000000f, 0.900000f, 0.050000f, "Convergence Red Horiz."));
		Params.push_back(ShaderParam("Ry", -1, 56, 4, -5.000000f, 5.000000f, 0.050000f, 0.050000f, "Convergence Red Vert."));
		Params.push_back(ShaderParam("Gx", -1, 60, 4, -5.000000f, 5.000000f, -0.950000f, 0.050000f, "Convergence Green Horiz."));
		Params.push_back(ShaderParam("Gy", -1, 64, 4, -5.000000f, 5.000000f, -0.050000f, 0.050000f, "Convergence Green Vert."));
		Params.push_back(ShaderParam("Bx", -1, 68, 4, -5.000000f, 5.000000f, 0.900000f, 0.050000f, "Convergence Blue Horiz."));
		Params.push_back(ShaderParam("By", -1, 72, 4, -5.000000f, 5.000000f, 0.050000f, 0.050000f, "Convergence Blue Vert."));
		Samplers.push_back(ShaderSampler("Source", 1));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
