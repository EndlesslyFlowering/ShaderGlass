/*
ShaderGlass shader misc/shaders\bob-deinterlacing imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/misc/shaders/bob-deinterlacing.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

// I wish there were some way to make this automatic...
// snap to the center of the underlying texel
// go ahead and sample the texture and early return if not interlaced
// work our way down the vertical axis and skip up 1 pixel every other frame
// deinterlace the current frame
// early return if we don't want to do any frame-blending
// previous frame needs an opposite tick from the current frame
// deinterlace previous frame

*/

#pragma once

namespace RetroArchMiscShadersBobDeinterlacingShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,255,191,
170,136,183,202,220,95,
192,200,221,126,0,99,
173,232,1,0,0,0,
56,6,0,0,5,0,
0,0,52,0,0,0,
88,3,0,0,164,3,
0,0,20,4,0,0,
156,5,0,0,82,68,
69,70,28,3,0,0,
2,0,0,0,136,0,
0,0,2,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
241,2,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
124,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,128,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,85,66,
79,0,80,117,115,104,
0,171,171,171,124,0,
0,0,1,0,0,0,
184,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,128,0,
0,0,6,0,0,0,
24,1,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,224,0,
0,0,0,0,0,0,
64,0,0,0,2,0,
0,0,244,0,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,103,108,111,98,
97,108,95,77,86,80,
0,102,108,111,97,116,
52,120,52,0,2,0,
3,0,4,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
235,0,0,0,8,2,
0,0,0,0,0,0,
16,0,0,0,0,0,
0,0,36,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,72,2,0,0,
16,0,0,0,16,0,
0,0,2,0,0,0,
36,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
92,2,0,0,32,0,
0,0,16,0,0,0,
0,0,0,0,36,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,110,2,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,136,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,172,2,0,0,
52,0,0,0,4,0,
0,0,2,0,0,0,
192,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
228,2,0,0,56,0,
0,0,4,0,0,0,
0,0,0,0,192,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,112,97,
114,97,109,115,95,83,
111,117,114,99,101,83,
105,122,101,0,102,108,
111,97,116,52,0,171,
171,171,1,0,3,0,
1,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,26,2,
0,0,112,97,114,97,
109,115,95,79,114,105,
103,105,110,97,108,83,
105,122,101,0,112,97,
114,97,109,115,95,79,
117,116,112,117,116,83,
105,122,101,0,112,97,
114,97,109,115,95,70,
114,97,109,101,67,111,
117,110,116,0,100,119,
111,114,100,0,171,171,
0,0,19,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,128,2,0,0,
112,97,114,97,109,115,
95,115,99,97,108,101,
0,102,108,111,97,116,
0,171,0,0,3,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,185,2,
0,0,112,97,114,97,
109,115,95,103,104,111,
115,116,0,77,105,99,
114,111,115,111,102,116,
32,40,82,41,32,72,
76,83,76,32,83,104,
97,100,101,114,32,67,
111,109,112,105,108,101,
114,32,49,48,46,49,
0,171,171,171,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
104,0,0,0,3,0,
0,0,8,0,0,0,
80,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
80,0,0,0,1,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,4,11,0,0,
89,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,128,1,
0,0,80,0,1,0,
96,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
89,0,0,4,70,142,
32,0,1,0,0,0,
4,0,0,0,95,0,
0,3,242,16,16,0,
0,0,0,0,95,0,
0,3,50,16,16,0,
1,0,0,0,101,0,
0,3,50,32,16,0,
0,0,0,0,101,0,
0,3,66,32,16,0,
0,0,0,0,103,0,
0,4,242,32,16,0,
1,0,0,0,1,0,
0,0,104,0,0,2,
1,0,0,0,56,0,
0,8,18,0,16,0,
0,0,0,0,1,64,
0,0,0,0,200,67,
26,128,32,0,1,0,
0,0,3,0,0,0,
49,0,0,8,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,26,128,32,0,
1,0,0,0,1,0,
0,0,1,0,0,7,
66,32,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,1,64,
0,0,0,0,128,63,
54,0,0,5,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,56,0,0,8,
242,0,16,0,0,0,
0,0,86,21,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,6,16,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,0,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,166,26,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
2,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,32,
16,0,1,0,0,0,
246,31,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,3,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,9,0,
0,0,1,0,0,0,
0,0,0,0,5,0,
0,0,6,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,11,200,
126,78,205,109,201,218,
208,250,168,216,43,254,
14,77,1,0,0,0,
204,9,0,0,5,0,
0,0,52,0,0,0,
124,3,0,0,200,3,
0,0,252,3,0,0,
48,9,0,0,82,68,
69,70,64,3,0,0,
1,0,0,0,36,1,
0,0,5,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
21,3,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
220,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,236,0,0,0,
3,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
1,0,0,0,6,1,
0,0,2,0,0,0,
5,0,0,0,4,0,
0,0,255,255,255,255,
2,0,0,0,1,0,
0,0,13,0,0,0,
13,1,0,0,2,0,
0,0,5,0,0,0,
4,0,0,0,255,255,
255,255,3,0,0,0,
1,0,0,0,13,0,
0,0,30,1,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,95,83,
111,117,114,99,101,95,
115,97,109,112,108,101,
114,0,95,79,114,105,
103,105,110,97,108,72,
105,115,116,111,114,121,
49,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,79,
114,105,103,105,110,97,
108,72,105,115,116,111,
114,121,49,0,80,117,
115,104,0,171,30,1,
0,0,6,0,0,0,
60,1,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,44,2,
0,0,0,0,0,0,
16,0,0,0,2,0,
0,0,72,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,108,2,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
72,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
128,2,0,0,32,0,
0,0,16,0,0,0,
0,0,0,0,72,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,146,2,
0,0,48,0,0,0,
4,0,0,0,2,0,
0,0,172,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,208,2,0,0,
52,0,0,0,4,0,
0,0,2,0,0,0,
228,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
8,3,0,0,56,0,
0,0,4,0,0,0,
2,0,0,0,228,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,112,97,
114,97,109,115,95,83,
111,117,114,99,101,83,
105,122,101,0,102,108,
111,97,116,52,0,171,
171,171,1,0,3,0,
1,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,62,2,
0,0,112,97,114,97,
109,115,95,79,114,105,
103,105,110,97,108,83,
105,122,101,0,112,97,
114,97,109,115,95,79,
117,116,112,117,116,83,
105,122,101,0,112,97,
114,97,109,115,95,70,
114,97,109,101,67,111,
117,110,116,0,100,119,
111,114,100,0,171,171,
0,0,19,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,164,2,0,0,
112,97,114,97,109,115,
95,115,99,97,108,101,
0,102,108,111,97,116,
0,171,0,0,3,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,221,2,
0,0,112,97,114,97,
109,115,95,103,104,111,
115,116,0,77,105,99,
114,111,115,111,102,116,
32,40,82,41,32,72,
76,83,76,32,83,104,
97,100,101,114,32,67,
111,109,112,105,108,101,
114,32,49,48,46,49,
0,171,171,171,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,3,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,4,4,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,0,0,0,
83,86,95,84,97,114,
103,101,116,0,171,171,
83,72,69,88,44,5,
0,0,80,0,0,0,
75,1,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,1,0,
0,0,4,0,0,0,
90,0,0,3,0,96,
16,0,2,0,0,0,
90,0,0,3,0,96,
16,0,3,0,0,0,
88,24,0,4,0,112,
16,0,2,0,0,0,
85,85,0,0,88,24,
0,4,0,112,16,0,
3,0,0,0,85,85,
0,0,98,16,0,3,
50,16,16,0,0,0,
0,0,98,16,0,3,
66,16,16,0,0,0,
0,0,101,0,0,3,
242,32,16,0,0,0,
0,0,104,0,0,2,
5,0,0,0,50,0,
0,13,50,0,16,0,
0,0,0,0,70,16,
16,0,0,0,0,0,
70,128,32,0,1,0,
0,0,0,0,0,0,
2,64,0,0,0,0,
0,191,0,0,0,191,
0,0,0,0,0,0,
0,0,65,0,0,5,
50,0,16,0,0,0,
0,0,70,0,16,0,
0,0,0,0,0,0,
0,10,50,0,16,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
2,64,0,0,142,6,
0,63,142,6,0,63,
0,0,0,0,0,0,
0,0,56,0,0,8,
194,0,16,0,0,0,
0,0,6,4,16,0,
0,0,0,0,166,142,
32,0,1,0,0,0,
0,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,242,0,
16,0,1,0,0,0,
230,10,16,0,0,0,
0,0,70,126,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
57,0,0,7,18,0,
16,0,2,0,0,0,
42,16,16,0,0,0,
0,0,1,64,0,0,
0,0,0,0,31,0,
4,3,10,0,16,0,
2,0,0,0,14,0,
0,9,18,0,16,0,
2,0,0,0,26,128,
32,0,1,0,0,0,
0,0,0,0,26,128,
32,0,1,0,0,0,
3,0,0,0,86,0,
0,6,34,0,16,0,
2,0,0,0,10,128,
32,0,1,0,0,0,
3,0,0,0,56,0,
0,7,66,0,16,0,
2,0,0,0,26,0,
16,0,2,0,0,0,
1,64,0,0,0,0,
0,63,65,0,0,5,
66,0,16,0,2,0,
0,0,42,0,16,0,
2,0,0,0,50,0,
0,10,34,0,16,0,
2,0,0,0,42,0,
16,128,65,0,0,0,
2,0,0,0,1,64,
0,0,0,0,0,64,
26,0,16,0,2,0,
0,0,50,0,0,9,
66,0,16,0,2,0,
0,0,10,0,16,0,
2,0,0,0,58,0,
16,0,0,0,0,0,
26,0,16,0,2,0,
0,0,56,0,0,9,
34,0,16,0,3,0,
0,0,58,128,32,0,
1,0,0,0,0,0,
0,0,26,128,32,0,
1,0,0,0,3,0,
0,0,54,0,0,5,
18,0,16,0,3,0,
0,0,1,64,0,0,
0,0,0,0,50,0,
0,10,50,0,16,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
230,138,32,0,1,0,
0,0,0,0,0,0,
70,0,16,0,3,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,242,0,16,0,
3,0,0,0,70,0,
16,0,0,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,56,0,
0,7,130,0,16,0,
2,0,0,0,42,0,
16,0,2,0,0,0,
1,64,0,0,0,0,
0,63,65,0,0,5,
130,0,16,0,2,0,
0,0,58,0,16,0,
2,0,0,0,50,0,
0,10,66,0,16,0,
2,0,0,0,58,0,
16,128,65,0,0,0,
2,0,0,0,1,64,
0,0,0,0,0,64,
42,0,16,0,2,0,
0,0,49,0,0,7,
66,0,16,0,2,0,
0,0,1,64,0,0,
88,255,127,63,42,0,
16,0,2,0,0,0,
55,0,0,9,242,0,
16,0,3,0,0,0,
166,10,16,0,2,0,
0,0,70,14,16,0,
3,0,0,0,70,14,
16,0,1,0,0,0,
57,0,0,8,66,0,
16,0,2,0,0,0,
1,64,0,0,0,0,
0,0,42,128,32,0,
1,0,0,0,3,0,
0,0,31,0,4,3,
42,0,16,0,2,0,
0,0,0,32,0,8,
34,0,16,0,2,0,
0,0,26,0,16,128,
65,0,0,0,2,0,
0,0,1,64,0,0,
0,0,128,63,50,0,
0,9,18,0,16,0,
2,0,0,0,10,0,
16,0,2,0,0,0,
58,0,16,0,0,0,
0,0,26,0,16,0,
2,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,242,0,
16,0,4,0,0,0,
230,10,16,0,0,0,
0,0,70,126,16,0,
3,0,0,0,0,96,
16,0,3,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
242,0,16,0,0,0,
0,0,70,0,16,0,
0,0,0,0,70,126,
16,0,3,0,0,0,
0,96,16,0,3,0,
0,0,56,0,0,7,
34,0,16,0,2,0,
0,0,10,0,16,0,
2,0,0,0,1,64,
0,0,0,0,0,63,
65,0,0,5,34,0,
16,0,2,0,0,0,
26,0,16,0,2,0,
0,0,50,0,0,10,
18,0,16,0,2,0,
0,0,26,0,16,128,
65,0,0,0,2,0,
0,0,1,64,0,0,
0,0,0,64,10,0,
16,0,2,0,0,0,
49,0,0,7,18,0,
16,0,2,0,0,0,
1,64,0,0,88,255,
127,63,10,0,16,0,
2,0,0,0,55,0,
0,9,242,0,16,0,
0,0,0,0,6,0,
16,0,2,0,0,0,
70,14,16,0,0,0,
0,0,70,14,16,0,
4,0,0,0,0,0,
0,8,242,0,16,0,
0,0,0,0,70,14,
16,128,65,0,0,0,
3,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,12,242,32,
16,0,0,0,0,0,
70,14,16,0,0,0,
0,0,2,64,0,0,
0,0,0,63,0,0,
0,63,0,0,0,63,
0,0,0,63,70,14,
16,0,3,0,0,0,
18,0,0,1,54,0,
0,5,242,32,16,0,
0,0,0,0,70,14,
16,0,3,0,0,0,
21,0,0,1,18,0,
0,1,54,0,0,5,
242,32,16,0,0,0,
0,0,70,14,16,0,
1,0,0,0,21,0,
0,1,62,0,0,1,
83,84,65,84,148,0,
0,0,42,0,0,0,
5,0,0,0,0,0,
0,0,3,0,0,0,
25,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,2,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,2,0,
0,0,5,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0
};


static const uint32_t sVertexHash[] = 
{
0xc434f067,0xc27a2ca6,0x41f98df5,0x24f7c8f6,0x793706c2,0xa199d361,
0xec8498de,0x4edcc684
};


static const uint32_t sFragmentHash[] =
{
0x6c0e15a,0x80ff2759,0xc6b762a7,0x8b1e36e3,0x31ba1fec,0x2de5bc52,
0x7d1ea968,0xcc2e03f3
};

}

namespace RetroArch
{
class MiscShadersBobDeinterlacingShaderDef : public ShaderDef
{
public:
	MiscShadersBobDeinterlacingShaderDef() : ShaderDef{}
	{
		Name = "bob-deinterlacing";
		VertexByteCode = RetroArchMiscShadersBobDeinterlacingShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchMiscShadersBobDeinterlacingShaderDefs::sVertexByteCode);
		VertexHash = RetroArchMiscShadersBobDeinterlacingShaderDefs::sVertexHash;
		FragmentByteCode = RetroArchMiscShadersBobDeinterlacingShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchMiscShadersBobDeinterlacingShaderDefs::sFragmentByteCode);
		FragmentHash = RetroArchMiscShadersBobDeinterlacingShaderDefs::sFragmentHash;
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FrameCount", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("scale", -1, 52, 4, 1.000000f, 16.000000f, 1.000000f, 1.000000f, "Deinterlacing Scale"));
		Params.push_back(ShaderParam("ghost", -1, 56, 4, 0.000000f, 1.000000f, 0.000000f, 1.000000f, "Blend Frames to Hide Bobbing"));
		Samplers.push_back(ShaderSampler("Source", 2));
		Samplers.push_back(ShaderSampler("OriginalHistory1", 3));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
