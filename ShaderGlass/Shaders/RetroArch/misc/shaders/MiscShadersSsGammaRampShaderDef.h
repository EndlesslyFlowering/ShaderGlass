/*
ShaderGlass shader misc/shaders\ss-gamma-ramp imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/misc/shaders/ss-gamma-ramp.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

// Super Sleuth Gamma Ramp
// based on Overload's ramp as implemented in bsnes v073
// ported by hunterk
// license: GPLv2
// Overload's gamma ramp from Super Sleuth
// Apparently not really based on anything but it looks nice
// convert standard vec4 to uint color values
// apply the ramp
// mix between corrected and uncorrected output

*/

#pragma once

namespace RetroArchMiscShadersSsGammaRampShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,110,239,
1,38,44,138,120,137,
121,214,212,137,93,170,
129,5,1,0,0,0,
140,3,0,0,5,0,
0,0,52,0,0,0,
60,1,0,0,136,1,
0,0,224,1,0,0,
240,2,0,0,82,68,
69,70,0,1,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
216,0,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,1,0,
0,0,120,0,0,0,
64,0,0,0,0,0,
0,0,0,0,0,0,
160,0,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,180,0,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,171,0,0,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
80,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
65,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,8,1,
0,0,80,0,1,0,
66,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
95,0,0,3,242,16,
16,0,0,0,0,0,
95,0,0,3,50,16,
16,0,1,0,0,0,
101,0,0,3,50,32,
16,0,0,0,0,0,
103,0,0,4,242,32,
16,0,1,0,0,0,
1,0,0,0,104,0,
0,2,1,0,0,0,
54,0,0,5,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,56,0,0,8,
242,0,16,0,0,0,
0,0,86,21,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,6,16,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,0,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,166,26,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
2,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,32,
16,0,1,0,0,0,
246,31,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,3,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,6,0,
0,0,1,0,0,0,
0,0,0,0,4,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,91,217,
10,0,166,190,117,249,
20,167,156,200,146,110,
235,116,1,0,0,0,
140,8,0,0,5,0,
0,0,52,0,0,0,
216,2,0,0,12,3,
0,0,64,3,0,0,
240,7,0,0,82,68,
69,70,156,2,0,0,
1,0,0,0,184,0,
0,0,3,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
116,2,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,172,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,179,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,80,
117,115,104,0,179,0,
0,0,5,0,0,0,
208,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,152,1,
0,0,0,0,0,0,
16,0,0,0,0,0,
0,0,180,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,216,1,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
180,1,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
236,1,0,0,32,0,
0,0,16,0,0,0,
0,0,0,0,180,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,254,1,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,24,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,60,2,0,0,
52,0,0,0,4,0,
0,0,2,0,0,0,
80,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
112,97,114,97,109,115,
95,83,111,117,114,99,
101,83,105,122,101,0,
102,108,111,97,116,52,
0,171,171,171,1,0,
3,0,1,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
170,1,0,0,112,97,
114,97,109,115,95,79,
114,105,103,105,110,97,
108,83,105,122,101,0,
112,97,114,97,109,115,
95,79,117,116,112,117,
116,83,105,122,101,0,
112,97,114,97,109,115,
95,70,114,97,109,101,
67,111,117,110,116,0,
100,119,111,114,100,0,
171,171,0,0,19,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,16,2,
0,0,112,97,114,97,
109,115,95,109,105,120,
101,114,0,102,108,111,
97,116,0,171,0,0,
3,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
73,2,0,0,77,105,
99,114,111,115,111,102,
116,32,40,82,41,32,
72,76,83,76,32,83,
104,97,100,101,114,32,
67,111,109,112,105,108,
101,114,32,49,48,46,
49,0,73,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,3,0,0,
84,69,88,67,79,79,
82,68,0,171,171,171,
79,83,71,78,44,0,
0,0,1,0,0,0,
8,0,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
15,0,0,0,83,86,
95,84,97,114,103,101,
116,0,171,171,83,72,
69,88,168,4,0,0,
80,0,0,0,42,1,
0,0,106,8,0,1,
53,24,0,0,130,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,6,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
10,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,15,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,21,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
28,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,36,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,45,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
55,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,66,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,78,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
91,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,105,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,120,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
136,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,144,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,152,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
160,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,168,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,176,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
184,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,192,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,200,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
208,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,216,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,224,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
232,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,240,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,248,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
255,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,89,0,
0,4,70,142,32,0,
1,0,0,0,4,0,
0,0,90,0,0,3,
0,96,16,0,2,0,
0,0,88,24,0,4,
0,112,16,0,2,0,
0,0,85,85,0,0,
98,16,0,3,50,16,
16,0,0,0,0,0,
101,0,0,3,242,32,
16,0,0,0,0,0,
104,0,0,2,3,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,114,0,16,0,
0,0,0,0,70,16,
16,0,0,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,56,0,
0,10,114,0,16,0,
1,0,0,0,70,2,
16,0,0,0,0,0,
2,64,0,0,0,0,
128,67,0,0,128,67,
0,0,128,67,0,0,
0,0,65,0,0,5,
114,0,16,0,1,0,
0,0,70,2,16,0,
1,0,0,0,27,0,
0,5,114,0,16,0,
1,0,0,0,70,2,
16,0,1,0,0,0,
138,0,0,15,114,0,
16,0,1,0,0,0,
2,64,0,0,5,0,
0,0,5,0,0,0,
5,0,0,0,0,0,
0,0,2,64,0,0,
3,0,0,0,3,0,
0,0,3,0,0,0,
0,0,0,0,70,2,
16,0,1,0,0,0,
29,0,0,10,114,0,
16,0,2,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,70,2,16,0,
0,0,0,0,55,0,
0,12,114,0,16,0,
1,0,0,0,70,2,
16,0,2,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,70,2,16,0,
1,0,0,0,29,0,
0,10,114,0,16,0,
2,0,0,0,70,2,
16,0,0,0,0,0,
2,64,0,0,0,0,
128,63,0,0,128,63,
0,0,128,63,0,0,
0,0,55,0,0,12,
114,0,16,0,1,0,
0,0,70,2,16,0,
2,0,0,0,2,64,
0,0,31,0,0,0,
31,0,0,0,31,0,
0,0,0,0,0,0,
70,2,16,0,1,0,
0,0,86,0,0,6,
18,0,16,0,2,0,
0,0,10,144,144,0,
10,0,16,0,1,0,
0,0,86,0,0,6,
34,0,16,0,2,0,
0,0,10,144,144,0,
26,0,16,0,1,0,
0,0,86,0,0,6,
66,0,16,0,2,0,
0,0,10,144,144,0,
42,0,16,0,1,0,
0,0,50,0,0,13,
114,0,16,0,1,0,
0,0,70,2,16,0,
2,0,0,0,2,64,
0,0,129,128,128,59,
129,128,128,59,129,128,
128,59,0,0,0,0,
70,2,16,128,65,0,
0,0,0,0,0,0,
50,0,0,10,130,0,
16,0,0,0,0,0,
26,128,32,0,1,0,
0,0,3,0,0,0,
1,64,0,0,10,215,
35,60,1,64,0,0,
0,0,128,191,50,0,
0,9,114,32,16,0,
0,0,0,0,246,15,
16,0,0,0,0,0,
70,2,16,0,1,0,
0,0,70,2,16,0,
0,0,0,0,54,0,
0,5,130,32,16,0,
0,0,0,0,1,64,
0,0,0,0,0,0,
62,0,0,1,83,84,
65,84,148,0,0,0,
17,0,0,0,3,0,
0,0,32,0,0,0,
2,0,0,0,7,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,2,0,0,0,
5,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};


static const uint32_t sVertexHash[] = 
{
0x433c7690,0x53b58779,0x33b6d8cf,0x944f975d,0xf4b8f687,0xc312b941,
0x6f0fbb62,0xa5eb7a00
};


static const uint32_t sFragmentHash[] =
{
0x8edb6bbe,0x97b01de6,0x59b9c311,0xc1e023fd,0x5a542bd7,0x61137f86,
0xf622d37,0xbd082cf2
};

}

namespace RetroArch
{
class MiscShadersSsGammaRampShaderDef : public ShaderDef
{
public:
	MiscShadersSsGammaRampShaderDef() : ShaderDef{}
	{
		Name = "ss-gamma-ramp";
		VertexByteCode = RetroArchMiscShadersSsGammaRampShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchMiscShadersSsGammaRampShaderDefs::sVertexByteCode);
		VertexHash = RetroArchMiscShadersSsGammaRampShaderDefs::sVertexHash;
		FragmentByteCode = RetroArchMiscShadersSsGammaRampShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchMiscShadersSsGammaRampShaderDefs::sFragmentByteCode);
		FragmentHash = RetroArchMiscShadersSsGammaRampShaderDefs::sFragmentHash;
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FrameCount", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("mixer", -1, 52, 4, 100.000000f, 200.000000f, 150.000000f, 1.000000f, "Gamma Boost (%)"));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
