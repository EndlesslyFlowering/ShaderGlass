/*
ShaderGlass shader scanlines/shaders\scanlines-rere imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/scanlines/shaders/scanlines-rere.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

*/

#pragma once

namespace RetroArchScanlinesShadersScanlinesRereShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,104,52,
1,235,29,222,245,250,
224,213,11,92,102,234,
187,26,1,0,0,0,
144,7,0,0,5,0,
0,0,52,0,0,0,
52,4,0,0,128,4,
0,0,56,5,0,0,
244,6,0,0,82,68,
69,70,248,3,0,0,
2,0,0,0,136,0,
0,0,2,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
207,3,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
124,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,128,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,85,66,
79,0,80,117,115,104,
0,171,171,171,124,0,
0,0,1,0,0,0,
184,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,128,0,
0,0,10,0,0,0,
24,1,0,0,80,0,
0,0,0,0,0,0,
0,0,0,0,224,0,
0,0,0,0,0,0,
64,0,0,0,2,0,
0,0,244,0,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,103,108,111,98,
97,108,95,77,86,80,
0,102,108,111,97,116,
52,120,52,0,2,0,
3,0,4,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
235,0,0,0,168,2,
0,0,0,0,0,0,
16,0,0,0,0,0,
0,0,196,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,232,2,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
196,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
252,2,0,0,32,0,
0,0,16,0,0,0,
0,0,0,0,196,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,14,3,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,40,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,76,3,0,0,
52,0,0,0,4,0,
0,0,2,0,0,0,
100,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
136,3,0,0,56,0,
0,0,4,0,0,0,
2,0,0,0,100,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,148,3,
0,0,60,0,0,0,
4,0,0,0,0,0,
0,0,100,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,162,3,0,0,
64,0,0,0,4,0,
0,0,0,0,0,0,
100,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
176,3,0,0,68,0,
0,0,4,0,0,0,
2,0,0,0,100,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,194,3,
0,0,72,0,0,0,
4,0,0,0,2,0,
0,0,100,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,112,97,114,97,
109,115,95,83,111,117,
114,99,101,83,105,122,
101,0,102,108,111,97,
116,52,0,171,171,171,
1,0,3,0,1,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,186,2,0,0,
112,97,114,97,109,115,
95,79,114,105,103,105,
110,97,108,83,105,122,
101,0,112,97,114,97,
109,115,95,79,117,116,
112,117,116,83,105,122,
101,0,112,97,114,97,
109,115,95,70,114,97,
109,101,67,111,117,110,
116,0,100,119,111,114,
100,0,171,171,0,0,
19,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
32,3,0,0,112,97,
114,97,109,115,95,116,
104,105,99,107,110,101,
115,115,0,102,108,111,
97,116,0,171,0,0,
3,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
93,3,0,0,112,97,
114,97,109,115,95,103,
108,111,119,0,112,97,
114,97,109,115,95,115,
71,97,109,109,97,0,
112,97,114,97,109,115,
95,116,71,97,109,109,
97,0,112,97,114,97,
109,115,95,104,105,103,
104,108,105,103,104,116,
115,0,112,97,114,97,
109,115,95,98,111,111,
115,116,0,77,105,99,
114,111,115,111,102,116,
32,40,82,41,32,72,
76,83,76,32,83,104,
97,100,101,114,32,67,
111,109,112,105,108,101,
114,32,49,48,46,49,
0,171,73,83,71,78,
68,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,15,0,0,
56,0,0,0,1,0,
0,0,0,0,0,0,
3,0,0,0,1,0,
0,0,3,3,0,0,
84,69,88,67,79,79,
82,68,0,171,171,171,
79,83,71,78,176,0,
0,0,6,0,0,0,
8,0,0,0,152,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
3,12,0,0,152,0,
0,0,1,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
4,11,0,0,152,0,
0,0,2,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
8,7,0,0,152,0,
0,0,3,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
1,14,0,0,152,0,
0,0,4,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
2,13,0,0,161,0,
0,0,0,0,0,0,
1,0,0,0,3,0,
0,0,2,0,0,0,
15,0,0,0,84,69,
88,67,79,79,82,68,
0,83,86,95,80,111,
115,105,116,105,111,110,
0,171,171,171,83,72,
69,88,180,1,0,0,
80,0,1,0,109,0,
0,0,106,8,0,1,
89,0,0,4,70,142,
32,0,0,0,0,0,
4,0,0,0,89,0,
0,4,70,142,32,0,
1,0,0,0,5,0,
0,0,95,0,0,3,
242,16,16,0,0,0,
0,0,95,0,0,3,
50,16,16,0,1,0,
0,0,101,0,0,3,
50,32,16,0,0,0,
0,0,101,0,0,3,
66,32,16,0,0,0,
0,0,101,0,0,3,
130,32,16,0,0,0,
0,0,101,0,0,3,
18,32,16,0,1,0,
0,0,101,0,0,3,
34,32,16,0,1,0,
0,0,103,0,0,4,
242,32,16,0,2,0,
0,0,1,0,0,0,
104,0,0,2,1,0,
0,0,54,0,0,5,
50,32,16,0,0,0,
0,0,70,16,16,0,
1,0,0,0,50,0,
0,16,194,32,16,0,
0,0,0,0,86,137,
32,0,1,0,0,0,
3,0,0,0,2,64,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,64,0,0,128,63,
2,64,0,0,0,0,
0,0,0,0,0,0,
0,0,0,63,0,0,
0,191,56,0,0,11,
50,32,16,0,1,0,
0,0,2,64,0,0,
0,0,128,63,0,0,
160,64,0,0,0,0,
0,0,0,0,150,133,
32,0,1,0,0,0,
4,0,0,0,56,0,
0,8,242,0,16,0,
0,0,0,0,86,21,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,1,0,0,0,
50,0,0,10,242,0,
16,0,0,0,0,0,
6,16,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,0,0,
0,0,70,14,16,0,
0,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,166,26,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,2,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,32,16,0,2,0,
0,0,246,31,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
3,0,0,0,70,14,
16,0,0,0,0,0,
62,0,0,1,83,84,
65,84,148,0,0,0,
8,0,0,0,1,0,
0,0,0,0,0,0,
8,0,0,0,6,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,99,16,
156,40,1,174,15,72,
118,169,64,139,148,22,
190,230,1,0,0,0,
52,9,0,0,5,0,
0,0,52,0,0,0,
236,3,0,0,128,4,
0,0,180,4,0,0,
152,8,0,0,82,68,
69,70,176,3,0,0,
1,0,0,0,184,0,
0,0,3,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
135,3,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,172,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,179,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,80,
117,115,104,0,179,0,
0,0,10,0,0,0,
208,0,0,0,80,0,
0,0,0,0,0,0,
0,0,0,0,96,2,
0,0,0,0,0,0,
16,0,0,0,2,0,
0,0,124,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,160,2,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
124,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
180,2,0,0,32,0,
0,0,16,0,0,0,
0,0,0,0,124,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,198,2,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,224,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,4,3,0,0,
52,0,0,0,4,0,
0,0,0,0,0,0,
28,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
64,3,0,0,56,0,
0,0,4,0,0,0,
0,0,0,0,28,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,76,3,
0,0,60,0,0,0,
4,0,0,0,2,0,
0,0,28,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,90,3,0,0,
64,0,0,0,4,0,
0,0,2,0,0,0,
28,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
104,3,0,0,68,0,
0,0,4,0,0,0,
0,0,0,0,28,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,122,3,
0,0,72,0,0,0,
4,0,0,0,0,0,
0,0,28,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,112,97,114,97,
109,115,95,83,111,117,
114,99,101,83,105,122,
101,0,102,108,111,97,
116,52,0,171,171,171,
1,0,3,0,1,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,114,2,0,0,
112,97,114,97,109,115,
95,79,114,105,103,105,
110,97,108,83,105,122,
101,0,112,97,114,97,
109,115,95,79,117,116,
112,117,116,83,105,122,
101,0,112,97,114,97,
109,115,95,70,114,97,
109,101,67,111,117,110,
116,0,100,119,111,114,
100,0,171,171,0,0,
19,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
216,2,0,0,112,97,
114,97,109,115,95,116,
104,105,99,107,110,101,
115,115,0,102,108,111,
97,116,0,171,0,0,
3,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
21,3,0,0,112,97,
114,97,109,115,95,103,
108,111,119,0,112,97,
114,97,109,115,95,115,
71,97,109,109,97,0,
112,97,114,97,109,115,
95,116,71,97,109,109,
97,0,112,97,114,97,
109,115,95,104,105,103,
104,108,105,103,104,116,
115,0,112,97,114,97,
109,115,95,98,111,111,
115,116,0,77,105,99,
114,111,115,111,102,116,
32,40,82,41,32,72,
76,83,76,32,83,104,
97,100,101,114,32,67,
111,109,112,105,108,101,
114,32,49,48,46,49,
0,171,73,83,71,78,
140,0,0,0,5,0,
0,0,8,0,0,0,
128,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,3,0,0,
128,0,0,0,1,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,4,4,0,0,
128,0,0,0,2,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,8,8,0,0,
128,0,0,0,3,0,
0,0,0,0,0,0,
3,0,0,0,1,0,
0,0,1,1,0,0,
128,0,0,0,4,0,
0,0,0,0,0,0,
3,0,0,0,1,0,
0,0,2,2,0,0,
84,69,88,67,79,79,
82,68,0,171,171,171,
79,83,71,78,44,0,
0,0,1,0,0,0,
8,0,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
15,0,0,0,83,86,
95,84,97,114,103,101,
116,0,171,171,83,72,
69,88,220,3,0,0,
80,0,0,0,247,0,
0,0,106,8,0,1,
89,0,0,4,70,142,
32,0,1,0,0,0,
5,0,0,0,90,0,
0,3,0,96,16,0,
2,0,0,0,88,24,
0,4,0,112,16,0,
2,0,0,0,85,85,
0,0,98,16,0,3,
50,16,16,0,0,0,
0,0,98,16,0,3,
66,16,16,0,0,0,
0,0,98,16,0,3,
130,16,16,0,0,0,
0,0,98,16,0,3,
18,16,16,0,1,0,
0,0,98,16,0,3,
34,16,16,0,1,0,
0,0,101,0,0,3,
242,32,16,0,0,0,
0,0,104,0,0,2,
2,0,0,0,56,0,
0,8,18,0,16,0,
0,0,0,0,26,16,
16,0,0,0,0,0,
26,128,32,0,1,0,
0,0,0,0,0,0,
26,0,0,5,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,56,0,0,7,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,1,64,
0,0,219,15,73,64,
77,0,0,6,18,0,
16,0,0,0,0,0,
0,208,0,0,10,0,
16,0,0,0,0,0,
47,0,0,5,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,56,0,0,7,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,42,16,
16,0,0,0,0,0,
25,0,0,5,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,0,0,0,7,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,58,16,
16,0,0,0,0,0,
0,0,0,7,34,0,
16,0,0,0,0,0,
58,16,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,14,0,
0,7,18,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,226,0,16,0,
0,0,0,0,70,16,
16,0,0,0,0,0,
54,121,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,47,0,
0,5,226,0,16,0,
0,0,0,0,86,14,
16,0,0,0,0,0,
56,0,0,8,226,0,
16,0,0,0,0,0,
86,14,16,0,0,0,
0,0,246,143,32,0,
1,0,0,0,3,0,
0,0,25,0,0,5,
226,0,16,0,0,0,
0,0,86,14,16,0,
0,0,0,0,56,0,
0,10,50,0,16,0,
1,0,0,0,150,5,
16,0,0,0,0,0,
2,64,0,0,208,179,
89,62,89,23,55,63,
0,0,0,0,0,0,
0,0,0,0,0,7,
18,0,16,0,1,0,
0,0,26,0,16,0,
1,0,0,0,10,0,
16,0,1,0,0,0,
50,0,0,9,18,0,
16,0,1,0,0,0,
58,0,16,0,0,0,
0,0,1,64,0,0,
152,221,147,61,10,0,
16,0,1,0,0,0,
0,0,0,8,34,0,
16,0,1,0,0,0,
10,0,16,128,65,0,
0,0,1,0,0,0,
1,64,0,0,0,0,
128,63,56,0,0,7,
34,0,16,0,1,0,
0,0,26,0,16,0,
1,0,0,0,10,0,
16,0,1,0,0,0,
50,0,0,10,18,0,
16,0,1,0,0,0,
10,0,16,128,65,0,
0,0,1,0,0,0,
10,16,16,0,1,0,
0,0,1,64,0,0,
0,0,128,63,50,0,
0,9,34,0,16,0,
1,0,0,0,26,0,
16,0,1,0,0,0,
26,16,16,0,1,0,
0,0,1,64,0,0,
0,0,128,63,56,0,
0,7,226,0,16,0,
1,0,0,0,86,14,
16,0,0,0,0,0,
86,5,16,0,1,0,
0,0,50,0,0,10,
226,0,16,0,1,0,
0,0,86,14,16,0,
1,0,0,0,6,0,
16,0,0,0,0,0,
86,14,16,128,65,0,
0,0,0,0,0,0,
50,0,0,9,114,0,
16,0,0,0,0,0,
6,0,16,0,1,0,
0,0,150,7,16,0,
1,0,0,0,150,7,
16,0,0,0,0,0,
47,0,0,5,114,0,
16,0,0,0,0,0,
70,2,16,0,0,0,
0,0,14,0,0,11,
130,0,16,0,0,0,
0,0,2,64,0,0,
0,0,128,63,0,0,
128,63,0,0,128,63,
0,0,128,63,10,128,
32,0,1,0,0,0,
4,0,0,0,56,0,
0,7,114,0,16,0,
0,0,0,0,70,2,
16,0,0,0,0,0,
246,15,16,0,0,0,
0,0,25,0,0,5,
114,32,16,0,0,0,
0,0,70,2,16,0,
0,0,0,0,54,0,
0,5,130,32,16,0,
0,0,0,0,1,64,
0,0,0,0,128,63,
62,0,0,1,83,84,
65,84,148,0,0,0,
30,0,0,0,2,0,
0,0,0,0,0,0,
6,0,0,0,27,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};

}

namespace RetroArch
{
class ScanlinesShadersScanlinesRereShaderDef : public ShaderDef
{
public:
	ScanlinesShadersScanlinesRereShaderDef() : ShaderDef{}
	{
		Name = "scanlines-rere";
		VertexByteCode = RetroArchScanlinesShadersScanlinesRereShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchScanlinesShadersScanlinesRereShaderDefs::sVertexByteCode);
		FragmentByteCode = RetroArchScanlinesShadersScanlinesRereShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchScanlinesShadersScanlinesRereShaderDefs::sFragmentByteCode);
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FrameCount", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("thickness", -1, 52, 4, 0.000000f, 1.000000f, 0.500000f, 0.010000f, "Scanline thickness"));
		Params.push_back(ShaderParam("glow", -1, 56, 4, 0.000000f, 1.000000f, 0.750000f, 0.010000f, "Scanline glow"));
		Params.push_back(ShaderParam("sGamma", -1, 60, 4, 1.000000f, 3.000000f, 2.400000f, 0.010000f, "Source gamma"));
		Params.push_back(ShaderParam("tGamma", -1, 64, 4, 1.000000f, 3.000000f, 2.200000f, 0.010000f, "Target gamma"));
		Params.push_back(ShaderParam("highlights", -1, 68, 4, 0.000000f, 1.000000f, 0.750000f, 0.010000f, "Scanline highlights"));
		Params.push_back(ShaderParam("boost", -1, 72, 4, 0.000000f, 1.000000f, 0.250000f, 0.010000f, "Luminance boost"));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
