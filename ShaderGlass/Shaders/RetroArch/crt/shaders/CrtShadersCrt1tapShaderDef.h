/*
ShaderGlass shader crt/shaders\crt-1tap imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/crt/shaders/crt-1tap.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

// clang-format off
// clang-format on
// Function similar to smoothstep and sigmoid.
// Vectorize operations for speed.

*/

#pragma once

namespace RetroArchCrtShadersCrt1tapShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,110,239,
1,38,44,138,120,137,
121,214,212,137,93,170,
129,5,1,0,0,0,
140,3,0,0,5,0,
0,0,52,0,0,0,
60,1,0,0,136,1,
0,0,224,1,0,0,
240,2,0,0,82,68,
69,70,0,1,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
216,0,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,1,0,
0,0,120,0,0,0,
64,0,0,0,0,0,
0,0,0,0,0,0,
160,0,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,180,0,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,171,0,0,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
80,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
65,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,8,1,
0,0,80,0,1,0,
66,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
95,0,0,3,242,16,
16,0,0,0,0,0,
95,0,0,3,50,16,
16,0,1,0,0,0,
101,0,0,3,50,32,
16,0,0,0,0,0,
103,0,0,4,242,32,
16,0,1,0,0,0,
1,0,0,0,104,0,
0,2,1,0,0,0,
54,0,0,5,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,56,0,0,8,
242,0,16,0,0,0,
0,0,86,21,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,6,16,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,0,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,166,26,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
2,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,32,
16,0,1,0,0,0,
246,31,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,3,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,6,0,
0,0,1,0,0,0,
0,0,0,0,4,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,225,153,
247,55,137,204,220,155,
75,152,228,136,104,173,
82,157,1,0,0,0,
156,9,0,0,5,0,
0,0,52,0,0,0,
76,3,0,0,128,3,
0,0,180,3,0,0,
0,9,0,0,82,68,
69,70,16,3,0,0,
1,0,0,0,184,0,
0,0,3,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
232,2,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
1,0,0,0,1,0,
0,0,172,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,1,0,
0,0,1,0,0,0,
13,0,0,0,179,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,80,
117,115,104,0,179,0,
0,0,8,0,0,0,
208,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,16,2,
0,0,0,0,0,0,
16,0,0,0,0,0,
0,0,40,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,76,2,0,0,
16,0,0,0,16,0,
0,0,2,0,0,0,
40,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
93,2,0,0,32,0,
0,0,4,0,0,0,
2,0,0,0,116,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,152,2,
0,0,36,0,0,0,
4,0,0,0,2,0,
0,0,116,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,168,2,0,0,
40,0,0,0,4,0,
0,0,2,0,0,0,
116,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
182,2,0,0,44,0,
0,0,4,0,0,0,
2,0,0,0,116,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,196,2,
0,0,48,0,0,0,
4,0,0,0,2,0,
0,0,116,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,212,2,0,0,
52,0,0,0,4,0,
0,0,2,0,0,0,
116,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
112,97,114,97,109,95,
79,117,116,112,117,116,
83,105,122,101,0,102,
108,111,97,116,52,0,
1,0,3,0,1,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,33,2,0,0,
112,97,114,97,109,95,
83,111,117,114,99,101,
83,105,122,101,0,112,
97,114,97,109,95,77,
73,78,95,84,72,73,
67,75,0,102,108,111,
97,116,0,171,0,0,
3,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
109,2,0,0,112,97,
114,97,109,95,77,65,
88,95,84,72,73,67,
75,0,112,97,114,97,
109,95,86,95,83,72,
65,82,80,0,112,97,
114,97,109,95,72,95,
83,72,65,82,80,0,
112,97,114,97,109,95,
83,85,66,80,88,95,
80,79,83,0,112,97,
114,97,109,95,84,72,
73,67,75,95,70,65,
76,76,79,70,70,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,44,0,0,0,
1,0,0,0,8,0,
0,0,32,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,0,0,0,
83,86,95,84,97,114,
103,101,116,0,171,171,
83,72,69,88,68,5,
0,0,80,0,0,0,
81,1,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,1,0,
0,0,4,0,0,0,
90,0,0,3,0,96,
16,0,1,0,0,0,
88,24,0,4,0,112,
16,0,1,0,0,0,
85,85,0,0,98,16,
0,3,50,16,16,0,
0,0,0,0,101,0,
0,3,242,32,16,0,
0,0,0,0,104,0,
0,2,2,0,0,0,
50,0,0,10,18,0,
16,0,0,0,0,0,
10,16,16,0,0,0,
0,0,10,128,32,0,
1,0,0,0,1,0,
0,0,1,64,0,0,
0,0,0,191,67,0,
0,5,34,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
0,0,0,8,18,0,
16,0,0,0,0,0,
26,0,16,128,65,0,
0,0,0,0,0,0,
10,0,16,0,0,0,
0,0,0,0,0,7,
66,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,1,64,
0,0,0,0,0,191,
49,0,0,7,130,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
0,0,42,0,16,0,
0,0,0,0,49,0,
0,7,66,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
0,0,30,0,0,8,
66,0,16,0,0,0,
0,0,58,0,16,128,
65,0,0,0,0,0,
0,0,42,0,16,0,
0,0,0,0,43,0,
0,5,66,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
0,0,0,7,130,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,56,0,
0,7,18,0,16,0,
1,0,0,0,58,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
0,63,50,0,0,9,
34,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,1,64,
0,0,0,0,0,63,
26,0,16,0,0,0,
0,0,50,0,0,10,
18,0,16,0,0,0,
0,0,42,0,16,128,
65,0,0,0,0,0,
0,0,10,0,16,0,
0,0,0,0,10,0,
16,0,1,0,0,0,
56,0,0,7,66,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,63,0,0,
0,7,18,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,47,0,0,5,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,50,0,
0,10,130,0,16,0,
0,0,0,0,58,128,
32,0,1,0,0,0,
2,0,0,0,1,64,
0,0,0,0,160,64,
1,64,0,0,0,0,
128,63,56,0,0,7,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
25,0,0,5,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,50,0,0,10,
18,0,16,0,0,0,
0,0,42,0,16,128,
65,0,0,0,0,0,
0,0,10,0,16,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
0,0,0,7,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,63,50,0,
0,12,66,0,16,0,
0,0,0,0,26,16,
16,0,0,0,0,0,
26,128,32,0,1,0,
0,0,1,0,0,0,
10,128,32,128,65,0,
0,0,1,0,0,0,
3,0,0,0,67,0,
0,5,130,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
0,0,0,8,66,0,
16,0,0,0,0,0,
58,0,16,128,65,0,
0,0,0,0,0,0,
42,0,16,0,0,0,
0,0,0,0,0,7,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,1,64,
0,0,0,0,0,63,
56,0,0,8,50,0,
16,0,0,0,0,0,
198,0,16,0,0,0,
0,0,230,138,32,0,
1,0,0,0,1,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,178,0,16,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
70,123,16,0,1,0,
0,0,0,96,16,0,
1,0,0,0,0,0,
0,7,66,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
0,191,0,0,0,10,
18,0,16,0,1,0,
0,0,10,128,32,128,
65,0,0,0,1,0,
0,0,2,0,0,0,
26,128,32,0,1,0,
0,0,2,0,0,0,
50,0,0,10,114,0,
16,0,1,0,0,0,
70,3,16,0,0,0,
0,0,6,0,16,0,
1,0,0,0,6,128,
32,0,1,0,0,0,
2,0,0,0,47,0,
0,5,114,0,16,0,
1,0,0,0,70,2,
16,0,1,0,0,0,
56,0,0,8,114,0,
16,0,1,0,0,0,
70,2,16,0,1,0,
0,0,86,133,32,0,
1,0,0,0,3,0,
0,0,25,0,0,5,
114,0,16,0,1,0,
0,0,70,2,16,0,
1,0,0,0,56,0,
0,10,114,0,16,0,
1,0,0,0,70,2,
16,0,1,0,0,0,
2,64,0,0,0,0,
0,63,0,0,0,63,
0,0,0,63,0,0,
0,0,56,0,0,7,
114,0,16,0,1,0,
0,0,70,2,16,0,
1,0,0,0,70,2,
16,0,1,0,0,0,
50,0,0,10,114,0,
16,0,1,0,0,0,
166,10,16,0,0,0,
0,0,166,10,16,0,
0,0,0,0,70,2,
16,128,65,0,0,0,
1,0,0,0,56,0,
0,9,66,0,16,0,
0,0,0,0,42,128,
32,0,1,0,0,0,
2,0,0,0,42,128,
32,0,1,0,0,0,
2,0,0,0,50,0,
0,9,66,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
72,66,1,64,0,0,
0,0,64,64,50,32,
0,13,114,0,16,0,
1,0,0,0,70,2,
16,128,65,0,0,0,
1,0,0,0,166,10,
16,0,0,0,0,0,
2,64,0,0,0,0,
128,62,0,0,128,62,
0,0,128,62,0,0,
0,0,56,0,0,7,
114,32,16,0,0,0,
0,0,70,3,16,0,
0,0,0,0,70,2,
16,0,1,0,0,0,
54,0,0,5,130,32,
16,0,0,0,0,0,
1,64,0,0,0,0,
0,0,62,0,0,1,
83,84,65,84,148,0,
0,0,41,0,0,0,
2,0,0,0,0,0,
0,0,2,0,0,0,
36,0,0,0,1,0,
0,0,0,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0
};


static const uint32_t sVertexHash[] = 
{
0x7cc5c107,0xc07f25a9,0xe973a18b,0x94ded36a,0xe84d422f,0xdc12d1ab,
0x6f087720,0x85e2f12e
};


static const uint32_t sFragmentHash[] =
{
0xb41cf77f,0x9414f1da,0xa01550e,0xf8a9fc68,0xc0d66ae0,0x206bce96,
0x93c7e740,0x6a084900
};

}

namespace RetroArch
{
class CrtShadersCrt1tapShaderDef : public ShaderDef
{
public:
	CrtShadersCrt1tapShaderDef() : ShaderDef{}
	{
		Name = "crt-1tap";
		VertexByteCode = RetroArchCrtShadersCrt1tapShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchCrtShadersCrt1tapShaderDefs::sVertexByteCode);
		VertexHash = RetroArchCrtShadersCrt1tapShaderDefs::sVertexHash;
		FragmentByteCode = RetroArchCrtShadersCrt1tapShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchCrtShadersCrt1tapShaderDefs::sFragmentByteCode);
		FragmentHash = RetroArchCrtShadersCrt1tapShaderDefs::sFragmentHash;
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("MIN_THICK", -1, 32, 4, 0.000000f, 1.400000f, 0.300000f, 0.050000f, "Scanline thickness of dark pixels"));
		Params.push_back(ShaderParam("MAX_THICK", -1, 36, 4, 0.000000f, 1.400000f, 0.900000f, 0.050000f, "Scanline thickness of bright pixels"));
		Params.push_back(ShaderParam("V_SHARP", -1, 40, 4, 0.000000f, 1.000000f, 0.500000f, 0.050000f, "Vertical sharpness of the scanline"));
		Params.push_back(ShaderParam("H_SHARP", -1, 44, 4, 0.000000f, 1.000000f, 0.150000f, 0.050000f, "Horizontal sharpness of pixel transitions"));
		Params.push_back(ShaderParam("SUBPX_POS", -1, 48, 4, -0.500000f, 0.500000f, 0.300000f, 0.010000f, "Scanline subpixel position"));
		Params.push_back(ShaderParam("THICK_FALLOFF", -1, 52, 4, 0.200000f, 2.000000f, 0.650000f, 0.050000f, "Reduction / increase of thinner scanlines"));
		Samplers.push_back(ShaderSampler("Source", 1));
		Samplers.push_back(ShaderSampler("Original", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
