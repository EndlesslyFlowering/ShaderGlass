/*
ShaderGlass shader crt/shaders/cathode-retro\cathode-retro-crt-generate-screen-texture imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/crt/shaders/cathode-retro/cathode-retro-crt-generate-screen-texture.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This shader generates the Screen Texture, which is effectively overlayed on top of the actual screen image in the
//  RGBToCRT shader. This includes the emulation of the shadow mask (or slot mask, aperture grill) of a CRT screen, as
//  well as masking around the edges to handle blacking out values that are outside of the visible screen.
// Do a barrel distortion to a given texture coordinate to emulate a curved CRT screen.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This file contains all the stuff used to make these shaders compile both as GLSL and HLSL.
//
// Note that one of GLSL or HLSL must be defined.
// Decfine this to make my syntax highlighting less angry
// GLSL doesn't have separate samplers and textures, so we're using texName for everything
// A simple approximation of atan2 will suffice here, just a few terms of the taylor series are good enough for the
//  angle ranges we're dealing with.
// The original texture coordinate, intended to come straight from the full-render-target quad, in [-1..1] range (not
//  standard [0..1])
// a [horizontal, vertical] distortion pair which describes the effective curvature of the virtual screen.
// We don't want to let the distortion drop below this minimum value because at 0, the whole technique falls apart.
// $TODO: It's definitely possible to handle distortion.x or y == 0 as a special case, but I didn't do it for now.
// We're going to cast a ray from a virtual camera position p0 (0, 0, -k_distance) and collide it with a unit sphere.
//  The horizontal and vertical spread of the rays is determined by the distortion values.
// Get the squared length of the ray.
// we have an originating point p0 and a ray direction, so we can treat that as a parametric equation:
//  p = p0 + r*t
// Since we have a non-translated unit sphere (1 = x^2 + y^2 + z^2) we can sub in our parametric values and solve for
//  t as a quadratic. To simplify the math, we're going to use a slightly different form of quadratic equation:
//  t^2 - 2b*t + c == 0
// Given our "t^2 - 2b*t + c == 0" quadratic form, the quadratic formula simplifies to -b +/- sqrt(b^2 - c).
// Get the nearer of the two coordinates (and do a max inside the sqrt so we still get continuous values outside of
//  the sphere, even if they're nonsensical, they'll get masked out by our mask value anyway).
// Get our uv coordinates (Basically, latitude and longitude).
// maxUV could be calculated on the CPU and passed in for perf.
// Do the same calculation as above, but for two additional rays: the x, 0, z ray pointing all the way to the right,
//  and the 0, y, z ray pointing at the bottom (Both rays are packed into the same "diagonal" ray value, but the
//  lengths are calculated separately). This gets us the uv extents for the rays that we cast, which we can use to
//  scale our output UVs.
// Scale our UVs by the max value.
// The mask texture for the CRT. That is, if you think of an old CRT and how you could see the
//  R, G, and B dots, this is that texture. Needs to be set up to wrap, as well as to have mip mapping (and, ideally,
//  anisotropic filtering too, if rendering as a curved screen, to help with sharpness and aliasing).
//DECLARE_TEXTURE2D(g_maskTexture, g_sampler);
// This is a 64-tap poisson disc filter, found here:
//  https://www.geeks3d.com/20100628/3d-programming-ready-to-use-64-sample-poisson-disc/
// $NOTE: The first four values here are the same as the first four in RGBToCRT.hlsl, and are expected to match.
// This shader is intended to render a screen of the correct shape regardless of the output render target shape,
//  effectively letterboxing or pillarboxing as needed(i.e. rendering a 4:3 screen to a 16:9 render target).
//  g_viewScale is the scale value necessary to get the resulting screen scale correct. In the event the output
//  render target is wider than the intended screen, the screen needs to be scaled down horizontally to pillarbox,
//  usually like (where screenAspectRatio is crtScreenWidth / crtScreenHeight):
//    (x: (renderTargetWidth / renderTargetHeight) * (1.0 / screenAspectRatio), y: 1.0)
//  if the output render target is taller than the intended screen, it will end up letterboxed using something like:
//    (x: 1.0, y: (renderTargetHeight / renderTargetWidth) * screenAspectRatio)
// Note that if overscan (where the edges of the screen cover up some of the picture) is being emulated, it
//  potentially needs to be taken into account in this value too. See RGBToCRT.h for details if that's the case.
// If overscan emulation is intended (where the edges of the screen cover up some of the picture), then this is the
//  amount of signal texture scaling needed to account for that. Given an overscan value "overscanAmount" that's
//    (overscanLeft + overscanRight, overscanTop + overscanBottom)
//  this value should end up being:
//    (inputImageSize.xy - overscanAmount.xy) / inputImageSize.xy
// This is the texture coordinate offset to adjust for overscan. Because the input coordinates are [-1..1] instead
//  of [0..1], this is the offset needed to recenter the value. Given an "overscanDifference" value:
//    (overscanLeft - overscanRight, overscanTop - overscanBottom)
//  this value should be:
//    overscanDifference.xy/ inputImageSize.xy * 0.5
// The amount along each axis to apply the virtual-curved screen distortion. Usually a value in [0..1]. "0" indicates
//  no curvature (a flat screen) and "1" indicates "quite curved
// The distortion amount used for where the edges of the screen mask should be. Should be at least g_distortion, but
//  if emulating an older TV which had some additional bevel curvature that cut off part of the picture, this can be
//  applied by adding additional value to this.
// dunno what this does yet. revisit it when the mask tiling is working -HK
// The scale of the mask texture. Higher value means the coordinates are scaled more and, thus, the shadow mask is
//  smaller.
// The dimensions of the source texture (used for aspect correction
// How much to round the corners of the screen to emulate a TV with rounded corners that cut off a little picture.
//  0 indicates no rounding (squared-off corners), while a value of 1.0 means "the whole screen is an oval.
//  Values <= 0.2 are recommended.
// First thing we want to do is scale our input texture coordinate to be in [-1..1] instead of [0..1] and adjust for
// Distort these coordinates to get the -1..1 screen area:
// Calculate a separate set of distorted coordinates, this for the outer mask (which determines the masking off of extra-rounded screen
//  edges).
// Adjust for overscan
// Calculate the signed distance to the edge of the "screen" taking the rounded corners into account. This will be used to generate the
//  mask around the edges of the "screen" where we draw a dark color.
// Get our coordinate as just an "upper quadrant" coordinate, scaled to have the correct display aspect ratio.
// Get the signed distance to a rounded rectangle to get our corners.
// Use our signed distance to edge of screen along with the ddx/ddy of our mask coordinate to generate a nicely-antialiased mask where
//  0 means "fully outside of the screen" and 1 means "fully on-screen".
// Now supersample the mask texture with a mip-map bias to make it sharper. The supersampling will help counteract the bias and
//  give us a sharp mask with minimal-to-no aliasing.
// Our final texture contains the rgb value from the mask, as well as the mask value in the alpha channel.
//  Note that the color channel has not been premultiplied with the mask.

*/

#pragma once

namespace RetroArchCrtShadersCathodeRetroCathodeRetroCrtGenerateScreenTextureShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,98,121,
196,154,194,61,252,4,
201,138,51,20,103,122,
157,45,1,0,0,0,
176,11,0,0,5,0,
0,0,52,0,0,0,
76,9,0,0,152,9,
0,0,240,9,0,0,
20,11,0,0,82,68,
69,70,16,9,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
229,8,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,35,0,
0,0,120,0,0,0,
224,0,0,0,0,0,
0,0,0,0,0,0,
240,5,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,4,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,40,6,
0,0,64,0,0,0,
16,0,0,0,0,0,
0,0,68,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,104,6,0,0,
80,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
168,6,0,0,84,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,189,6,
0,0,88,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,209,6,0,0,
92,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
227,6,0,0,96,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,251,6,
0,0,100,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,9,7,0,0,
104,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
27,7,0,0,108,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,44,7,
0,0,112,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,59,7,0,0,
116,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
76,7,0,0,120,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,94,7,
0,0,124,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,114,7,0,0,
128,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
136,7,0,0,132,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,148,7,
0,0,136,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,163,7,0,0,
140,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
181,7,0,0,144,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,202,7,
0,0,148,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,223,7,0,0,
152,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
250,7,0,0,156,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,14,8,
0,0,160,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,30,8,0,0,
164,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
49,8,0,0,168,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,68,8,
0,0,172,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,85,8,0,0,
176,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
104,8,0,0,180,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,122,8,
0,0,184,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,145,8,0,0,
188,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
163,8,0,0,192,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,181,8,
0,0,196,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,193,8,0,0,
200,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
205,8,0,0,204,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,217,8,
0,0,208,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,103,108,111,98,
97,108,95,77,86,80,
0,102,108,111,97,116,
52,120,52,0,2,0,
3,0,4,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
251,5,0,0,103,108,
111,98,97,108,95,79,
114,105,103,105,110,97,
108,83,105,122,101,0,
102,108,111,97,116,52,
0,171,1,0,3,0,
1,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,60,6,
0,0,103,108,111,98,
97,108,95,99,98,95,
102,105,114,115,116,95,
115,116,97,114,116,0,
102,108,111,97,116,0,
0,0,3,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,126,6,0,0,
103,108,111,98,97,108,
95,99,98,95,108,97,
115,116,95,115,116,97,
114,116,0,103,108,111,
98,97,108,95,99,98,
95,112,104,97,115,101,
95,105,110,99,0,103,
108,111,98,97,108,95,
99,98,95,115,97,109,
112,108,101,115,0,103,
108,111,98,97,108,95,
104,111,114,122,95,116,
114,97,99,107,95,115,
99,97,108,101,0,103,
108,111,98,97,108,95,
109,105,110,108,117,109,
0,103,108,111,98,97,
108,95,99,111,108,111,
114,112,111,119,101,114,
0,103,108,111,98,97,
108,95,99,111,109,112,
111,115,105,116,101,0,
103,108,111,98,97,108,
95,115,105,103,95,112,
97,100,0,103,108,111,
98,97,108,95,103,104,
111,115,116,95,118,105,
115,0,103,108,111,98,
97,108,95,103,104,111,
115,116,95,100,105,115,
116,0,103,108,111,98,
97,108,95,103,104,111,
115,116,95,115,112,114,
101,97,100,0,103,108,
111,98,97,108,95,110,
111,105,115,101,95,115,
116,114,101,110,103,116,
104,0,103,108,111,98,
97,108,95,116,105,110,
116,0,103,108,111,98,
97,108,95,99,97,116,
95,115,97,116,0,103,
108,111,98,97,108,95,
99,97,116,95,98,114,
105,103,104,116,0,103,
108,111,98,97,108,95,
99,97,116,95,119,104,
105,116,101,95,108,118,
108,0,103,108,111,98,
97,108,95,99,97,116,
95,98,108,97,99,107,
95,108,118,108,0,103,
108,111,98,97,108,95,
116,101,109,112,95,97,
114,116,105,102,97,99,
116,95,98,108,101,110,
100,0,103,108,111,98,
97,108,95,98,108,117,
114,83,116,114,101,110,
103,116,104,0,103,108,
111,98,97,108,95,115,
116,101,112,83,105,122,
101,0,103,108,111,98,
97,108,95,112,101,114,
115,105,115,116,101,110,
99,101,0,103,108,111,
98,97,108,95,115,99,
97,110,95,105,110,116,
101,110,115,0,103,108,
111,98,97,108,95,100,
105,102,102,117,115,105,
111,110,0,103,108,111,
98,97,108,95,109,97,
115,107,95,105,110,116,
101,110,115,0,103,108,
111,98,97,108,95,109,
97,115,107,95,100,101,
112,116,104,0,103,108,
111,98,97,108,95,99,
97,116,95,109,97,115,
107,95,112,105,99,107,
101,114,0,103,108,111,
98,97,108,95,109,97,
115,107,95,115,99,97,
108,101,0,103,108,111,
98,97,108,95,97,110,
105,109,95,110,111,105,
115,101,0,103,108,111,
98,97,108,95,100,105,
118,48,0,103,108,111,
98,97,108,95,100,105,
118,49,0,103,108,111,
98,97,108,95,100,105,
118,50,0,103,108,111,
98,97,108,95,100,105,
118,51,0,77,105,99,
114,111,115,111,102,116,
32,40,82,41,32,72,
76,83,76,32,83,104,
97,100,101,114,32,67,
111,109,112,105,108,101,
114,32,49,48,46,49,
0,171,171,171,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
80,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
65,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,28,1,
0,0,80,0,1,0,
71,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
95,0,0,3,242,16,
16,0,0,0,0,0,
95,0,0,3,50,16,
16,0,1,0,0,0,
101,0,0,3,50,32,
16,0,0,0,0,0,
103,0,0,4,242,32,
16,0,1,0,0,0,
1,0,0,0,104,0,
0,2,1,0,0,0,
56,0,0,10,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,2,64,0,0,
71,3,128,63,71,3,
128,63,0,0,0,0,
0,0,0,0,56,0,
0,8,242,0,16,0,
0,0,0,0,86,21,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,1,0,0,0,
50,0,0,10,242,0,
16,0,0,0,0,0,
6,16,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,0,0,
0,0,70,14,16,0,
0,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,166,26,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,2,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,32,16,0,1,0,
0,0,246,31,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
3,0,0,0,70,14,
16,0,0,0,0,0,
62,0,0,1,83,84,
65,84,148,0,0,0,
6,0,0,0,1,0,
0,0,0,0,0,0,
4,0,0,0,5,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,62,170,
42,76,121,224,97,165,
193,56,32,37,252,144,
201,178,1,0,0,0,
240,29,0,0,5,0,
0,0,52,0,0,0,
32,12,0,0,84,12,
0,0,136,12,0,0,
84,29,0,0,82,68,
69,70,228,11,0,0,
2,0,0,0,236,0,
0,0,4,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
187,11,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
188,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,211,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,225,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
229,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
1,0,0,0,0,0,
0,0,95,103,95,109,
97,115,107,84,101,120,
116,117,114,101,95,115,
97,109,112,108,101,114,
0,103,95,109,97,115,
107,84,101,120,116,117,
114,101,0,85,66,79,
0,80,117,115,104,0,
171,171,225,0,0,0,
35,0,0,0,28,1,
0,0,224,0,0,0,
0,0,0,0,0,0,
0,0,229,0,0,0,
9,0,0,0,140,9,
0,0,96,0,0,0,
0,0,0,0,0,0,
0,0,148,6,0,0,
0,0,0,0,64,0,
0,0,0,0,0,0,
168,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
204,6,0,0,64,0,
0,0,16,0,0,0,
0,0,0,0,232,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,12,7,
0,0,80,0,0,0,
4,0,0,0,0,0,
0,0,40,7,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,76,7,0,0,
84,0,0,0,4,0,
0,0,0,0,0,0,
40,7,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
97,7,0,0,88,0,
0,0,4,0,0,0,
0,0,0,0,40,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,117,7,
0,0,92,0,0,0,
4,0,0,0,0,0,
0,0,40,7,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,135,7,0,0,
96,0,0,0,4,0,
0,0,0,0,0,0,
40,7,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
159,7,0,0,100,0,
0,0,4,0,0,0,
0,0,0,0,40,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,173,7,
0,0,104,0,0,0,
4,0,0,0,0,0,
0,0,40,7,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,191,7,0,0,
108,0,0,0,4,0,
0,0,0,0,0,0,
40,7,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
208,7,0,0,112,0,
0,0,4,0,0,0,
0,0,0,0,40,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,223,7,
0,0,116,0,0,0,
4,0,0,0,0,0,
0,0,40,7,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,240,7,0,0,
120,0,0,0,4,0,
0,0,0,0,0,0,
40,7,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
2,8,0,0,124,0,
0,0,4,0,0,0,
0,0,0,0,40,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,22,8,
0,0,128,0,0,0,
4,0,0,0,0,0,
0,0,40,7,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,44,8,0,0,
132,0,0,0,4,0,
0,0,0,0,0,0,
40,7,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
56,8,0,0,136,0,
0,0,4,0,0,0,
0,0,0,0,40,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,71,8,
0,0,140,0,0,0,
4,0,0,0,0,0,
0,0,40,7,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,89,8,0,0,
144,0,0,0,4,0,
0,0,0,0,0,0,
40,7,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
110,8,0,0,148,0,
0,0,4,0,0,0,
0,0,0,0,40,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,131,8,
0,0,152,0,0,0,
4,0,0,0,0,0,
0,0,40,7,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,158,8,0,0,
156,0,0,0,4,0,
0,0,0,0,0,0,
40,7,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
178,8,0,0,160,0,
0,0,4,0,0,0,
0,0,0,0,40,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,194,8,
0,0,164,0,0,0,
4,0,0,0,0,0,
0,0,40,7,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,213,8,0,0,
168,0,0,0,4,0,
0,0,0,0,0,0,
40,7,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
232,8,0,0,172,0,
0,0,4,0,0,0,
0,0,0,0,40,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,249,8,
0,0,176,0,0,0,
4,0,0,0,0,0,
0,0,40,7,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,12,9,0,0,
180,0,0,0,4,0,
0,0,0,0,0,0,
40,7,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
30,9,0,0,184,0,
0,0,4,0,0,0,
0,0,0,0,40,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,53,9,
0,0,188,0,0,0,
4,0,0,0,0,0,
0,0,40,7,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,71,9,0,0,
192,0,0,0,4,0,
0,0,2,0,0,0,
40,7,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
89,9,0,0,196,0,
0,0,4,0,0,0,
0,0,0,0,40,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,101,9,
0,0,200,0,0,0,
4,0,0,0,0,0,
0,0,40,7,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,113,9,0,0,
204,0,0,0,4,0,
0,0,0,0,0,0,
40,7,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
125,9,0,0,208,0,
0,0,4,0,0,0,
0,0,0,0,40,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,159,6,0,0,
103,108,111,98,97,108,
95,79,114,105,103,105,
110,97,108,83,105,122,
101,0,102,108,111,97,
116,52,0,171,1,0,
3,0,1,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
224,6,0,0,103,108,
111,98,97,108,95,99,
98,95,102,105,114,115,
116,95,115,116,97,114,
116,0,102,108,111,97,
116,0,0,0,3,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,34,7,
0,0,103,108,111,98,
97,108,95,99,98,95,
108,97,115,116,95,115,
116,97,114,116,0,103,
108,111,98,97,108,95,
99,98,95,112,104,97,
115,101,95,105,110,99,
0,103,108,111,98,97,
108,95,99,98,95,115,
97,109,112,108,101,115,
0,103,108,111,98,97,
108,95,104,111,114,122,
95,116,114,97,99,107,
95,115,99,97,108,101,
0,103,108,111,98,97,
108,95,109,105,110,108,
117,109,0,103,108,111,
98,97,108,95,99,111,
108,111,114,112,111,119,
101,114,0,103,108,111,
98,97,108,95,99,111,
109,112,111,115,105,116,
101,0,103,108,111,98,
97,108,95,115,105,103,
95,112,97,100,0,103,
108,111,98,97,108,95,
103,104,111,115,116,95,
118,105,115,0,103,108,
111,98,97,108,95,103,
104,111,115,116,95,100,
105,115,116,0,103,108,
111,98,97,108,95,103,
104,111,115,116,95,115,
112,114,101,97,100,0,
103,108,111,98,97,108,
95,110,111,105,115,101,
95,115,116,114,101,110,
103,116,104,0,103,108,
111,98,97,108,95,116,
105,110,116,0,103,108,
111,98,97,108,95,99,
97,116,95,115,97,116,
0,103,108,111,98,97,
108,95,99,97,116,95,
98,114,105,103,104,116,
0,103,108,111,98,97,
108,95,99,97,116,95,
119,104,105,116,101,95,
108,118,108,0,103,108,
111,98,97,108,95,99,
97,116,95,98,108,97,
99,107,95,108,118,108,
0,103,108,111,98,97,
108,95,116,101,109,112,
95,97,114,116,105,102,
97,99,116,95,98,108,
101,110,100,0,103,108,
111,98,97,108,95,98,
108,117,114,83,116,114,
101,110,103,116,104,0,
103,108,111,98,97,108,
95,115,116,101,112,83,
105,122,101,0,103,108,
111,98,97,108,95,112,
101,114,115,105,115,116,
101,110,99,101,0,103,
108,111,98,97,108,95,
115,99,97,110,95,105,
110,116,101,110,115,0,
103,108,111,98,97,108,
95,100,105,102,102,117,
115,105,111,110,0,103,
108,111,98,97,108,95,
109,97,115,107,95,105,
110,116,101,110,115,0,
103,108,111,98,97,108,
95,109,97,115,107,95,
100,101,112,116,104,0,
103,108,111,98,97,108,
95,99,97,116,95,109,
97,115,107,95,112,105,
99,107,101,114,0,103,
108,111,98,97,108,95,
109,97,115,107,95,115,
99,97,108,101,0,103,
108,111,98,97,108,95,
97,110,105,109,95,110,
111,105,115,101,0,103,
108,111,98,97,108,95,
100,105,118,48,0,103,
108,111,98,97,108,95,
100,105,118,49,0,103,
108,111,98,97,108,95,
100,105,118,50,0,103,
108,111,98,97,108,95,
100,105,118,51,0,171,
171,171,244,10,0,0,
0,0,0,0,16,0,
0,0,0,0,0,0,
232,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
6,11,0,0,16,0,
0,0,16,0,0,0,
0,0,0,0,232,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,26,11,
0,0,32,0,0,0,
16,0,0,0,0,0,
0,0,232,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,44,11,0,0,
48,0,0,0,4,0,
0,0,2,0,0,0,
68,11,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
104,11,0,0,64,0,
0,0,16,0,0,0,
0,0,0,0,232,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,129,11,
0,0,80,0,0,0,
4,0,0,0,2,0,
0,0,40,7,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,142,11,0,0,
84,0,0,0,4,0,
0,0,2,0,0,0,
40,7,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
155,11,0,0,88,0,
0,0,4,0,0,0,
2,0,0,0,40,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,169,11,
0,0,92,0,0,0,
4,0,0,0,0,0,
0,0,40,7,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,112,97,114,97,
109,115,95,83,111,117,
114,99,101,83,105,122,
101,0,112,97,114,97,
109,115,95,79,114,105,
103,105,110,97,108,83,
105,122,101,0,112,97,
114,97,109,115,95,79,
117,116,112,117,116,83,
105,122,101,0,112,97,
114,97,109,115,95,70,
114,97,109,101,67,111,
117,110,116,0,100,119,
111,114,100,0,0,0,
19,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
62,11,0,0,112,97,
114,97,109,115,95,70,
105,110,97,108,86,105,
101,119,112,111,114,116,
83,105,122,101,0,112,
97,114,97,109,115,95,
119,97,114,112,88,0,
112,97,114,97,109,115,
95,119,97,114,112,89,
0,112,97,114,97,109,
115,95,99,111,114,110,
101,114,0,112,97,114,
97,109,115,95,110,111,
105,115,101,95,115,101,
101,100,0,77,105,99,
114,111,115,111,102,116,
32,40,82,41,32,72,
76,83,76,32,83,104,
97,100,101,114,32,67,
111,109,112,105,108,101,
114,32,49,48,46,49,
0,171,73,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,3,0,0,
84,69,88,67,79,79,
82,68,0,171,171,171,
79,83,71,78,44,0,
0,0,1,0,0,0,
8,0,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
15,0,0,0,83,86,
95,84,97,114,103,101,
116,0,171,171,83,72,
69,88,196,16,0,0,
80,0,0,0,49,4,
0,0,106,8,0,1,
53,24,0,0,2,1,
0,0,66,7,29,191,
60,19,30,63,0,0,
0,0,0,0,0,0,
118,25,46,62,97,225,
36,189,0,0,0,0,
0,0,0,0,47,77,
153,190,153,187,74,63,
0,0,0,0,0,0,
0,0,73,75,37,63,
5,134,252,62,0,0,
0,0,0,0,0,0,
81,219,38,191,113,199,
55,63,0,0,0,0,
0,0,0,0,181,141,
215,62,232,193,221,60,
0,0,0,0,0,0,
0,0,160,51,81,191,
24,205,138,190,0,0,
0,0,0,0,0,0,
100,147,52,191,90,15,
43,191,0,0,0,0,
0,0,0,0,243,31,
122,63,139,113,222,189,
0,0,0,0,0,0,
0,0,16,177,129,61,
46,201,17,62,0,0,
0,0,0,0,0,0,
165,105,80,62,150,121,
91,62,0,0,0,0,
0,0,0,0,80,227,
42,191,69,245,166,62,
0,0,0,0,0,0,
0,0,121,145,201,189,
51,109,151,190,0,0,
0,0,0,0,0,0,
201,203,98,191,177,137,
92,62,0,0,0,0,
0,0,0,0,31,15,
17,63,61,239,26,63,
0,0,0,0,0,0,
0,0,172,225,34,61,
159,205,202,190,0,0,
0,0,0,0,0,0,
136,127,64,63,193,29,
232,62,0,0,0,0,
0,0,0,0,35,49,
161,61,104,31,55,191,
0,0,0,0,0,0,
0,0,244,80,155,189,
23,131,7,191,0,0,
0,0,0,0,0,0,
117,119,57,63,45,175,
20,191,0,0,0,0,
0,0,0,0,218,89,
100,62,186,73,92,190,
0,0,0,0,0,0,
0,0,220,101,239,190,
146,149,207,190,0,0,
0,0,0,0,0,0,
247,57,126,190,167,147,
80,191,0,0,0,0,
0,0,0,0,92,117,
181,62,202,55,99,191,
0,0,0,0,0,0,
0,0,95,9,52,62,
122,197,195,62,0,0,
0,0,0,0,0,0,
238,149,249,62,35,49,
129,189,0,0,0,0,
0,0,0,0,22,49,
172,189,198,247,101,63,
0,0,0,0,0,0,
0,0,244,77,250,62,
151,143,72,191,0,0,
0,0,0,0,0,0,
240,165,240,62,212,41,
95,62,0,0,0,0,
0,0,0,0,98,103,
50,191,26,191,12,191,
0,0,0,0,0,0,
0,0,31,73,25,190,
56,19,27,63,0,0,
0,0,0,0,0,0,
213,32,12,61,248,223,
122,63,0,0,0,0,
0,0,0,0,8,203,
0,63,66,37,158,190,
0,0,0,0,0,0,
0,0,89,192,132,188,
192,119,95,191,0,0,
0,0,0,0,0,0,
123,133,197,62,134,173,
201,190,0,0,0,0,
0,0,0,0,73,105,
22,190,190,247,91,191,
0,0,0,0,0,0,
0,0,78,179,36,63,
78,9,40,62,0,0,
0,0,0,0,0,0,
65,103,34,63,26,162,
74,189,0,0,0,0,
0,0,0,0,91,91,
48,191,237,127,0,60,
0,0,0,0,0,0,
0,0,221,149,237,62,
129,89,65,190,0,0,
0,0,0,0,0,0,
200,181,225,190,33,201,
12,62,0,0,0,0,
0,0,0,0,132,157,
186,62,9,255,2,63,
0,0,0,0,0,0,
0,0,242,96,11,61,
71,229,166,62,0,0,
0,0,0,0,0,0,
204,241,202,61,49,181,
157,190,0,0,0,0,
0,0,0,0,93,167,
49,63,131,133,187,190,
0,0,0,0,0,0,
0,0,88,203,45,63,
187,153,81,190,0,0,
0,0,0,0,0,0,
136,15,236,58,147,195,
71,63,0,0,0,0,
0,0,0,0,72,169,
20,62,209,35,102,191,
0,0,0,0,0,0,
0,0,68,81,128,61,
64,163,28,191,0,0,
0,0,0,0,0,0,
77,101,161,62,53,179,
26,191,0,0,0,0,
0,0,0,0,149,183,
71,191,228,245,248,62,
0,0,0,0,0,0,
0,0,124,101,190,190,
204,211,97,63,0,0,
0,0,0,0,0,0,
149,73,77,62,238,37,
253,62,0,0,0,0,
0,0,0,0,235,53,
253,190,112,7,54,191,
0,0,0,0,0,0,
0,0,58,203,28,63,
101,139,52,63,0,0,
0,0,0,0,0,0,
48,47,20,191,141,207,
68,191,0,0,0,0,
0,0,0,0,140,191,
69,191,160,81,186,189,
0,0,0,0,0,0,
0,0,251,34,1,63,
115,157,190,62,0,0,
0,0,0,0,0,0,
66,121,31,62,9,113,
133,61,0,0,0,0,
0,0,0,0,146,117,
200,62,183,127,89,63,
0,0,0,0,0,0,
0,0,68,191,30,191,
63,253,167,190,0,0,
0,0,0,0,0,0,
145,11,74,63,167,5,
215,190,0,0,0,0,
0,0,0,0,18,159,
11,191,22,195,9,63,
0,0,0,0,0,0,
0,0,123,217,54,190,
49,151,24,191,0,0,
0,0,0,0,0,0,
89,0,0,4,70,142,
32,0,0,0,0,0,
13,0,0,0,89,0,
0,4,70,142,32,0,
1,0,0,0,6,0,
0,0,90,0,0,3,
0,96,16,0,2,0,
0,0,88,24,0,4,
0,112,16,0,2,0,
0,0,85,85,0,0,
98,16,0,3,50,16,
16,0,0,0,0,0,
101,0,0,3,242,32,
16,0,0,0,0,0,
104,0,0,2,5,0,
0,0,86,0,0,6,
18,0,16,0,0,0,
0,0,10,128,32,0,
1,0,0,0,3,0,
0,0,56,0,0,7,
34,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,1,64,
0,0,237,226,180,55,
65,0,0,5,34,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,50,0,0,10,
18,0,16,0,0,0,
0,0,26,0,16,128,
65,0,0,0,0,0,
0,0,1,64,0,0,
0,39,53,71,10,0,
16,0,0,0,0,0,
50,0,0,10,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,10,128,32,0,
0,0,0,0,12,0,
0,0,1,64,0,0,
0,0,128,63,50,0,
0,15,98,0,16,0,
0,0,0,0,6,17,
16,0,0,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,64,
0,0,0,64,0,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
128,191,0,0,128,191,
0,0,0,0,24,0,
0,11,50,0,16,0,
1,0,0,0,2,64,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
70,128,32,0,1,0,
0,0,5,0,0,0,
1,0,0,7,130,0,
16,0,0,0,0,0,
26,0,16,0,1,0,
0,0,10,0,16,0,
1,0,0,0,52,0,
0,11,50,0,16,0,
1,0,0,0,2,64,
0,0,23,183,209,56,
23,183,209,56,0,0,
0,0,0,0,0,0,
70,128,32,0,1,0,
0,0,5,0,0,0,
56,0,0,7,50,0,
16,0,2,0,0,0,
150,5,16,0,0,0,
0,0,70,0,16,0,
1,0,0,0,54,0,
0,5,66,0,16,0,
2,0,0,0,1,64,
0,0,0,0,0,192,
16,0,0,7,130,0,
16,0,1,0,0,0,
70,2,16,0,2,0,
0,0,70,2,16,0,
2,0,0,0,14,0,
0,10,194,0,16,0,
2,0,0,0,2,64,
0,0,0,0,0,0,
0,0,0,0,0,0,
128,64,0,0,64,64,
246,15,16,0,1,0,
0,0,50,0,0,10,
130,0,16,0,1,0,
0,0,42,0,16,0,
2,0,0,0,42,0,
16,0,2,0,0,0,
58,0,16,128,65,0,
0,0,2,0,0,0,
52,0,0,7,130,0,
16,0,1,0,0,0,
58,0,16,0,1,0,
0,0,1,64,0,0,
0,0,0,0,75,0,
0,5,130,0,16,0,
1,0,0,0,58,0,
16,0,1,0,0,0,
0,0,0,8,130,0,
16,0,1,0,0,0,
58,0,16,128,65,0,
0,0,1,0,0,0,
42,0,16,0,2,0,
0,0,56,0,0,7,
50,0,16,0,2,0,
0,0,246,15,16,0,
1,0,0,0,70,0,
16,0,2,0,0,0,
50,0,0,9,130,0,
16,0,1,0,0,0,
58,0,16,0,1,0,
0,0,1,64,0,0,
0,0,0,192,1,64,
0,0,0,0,0,64,
14,0,0,7,50,0,
16,0,2,0,0,0,
70,0,16,0,2,0,
0,0,246,15,16,0,
1,0,0,0,56,0,
0,7,194,0,16,0,
2,0,0,0,6,4,
16,0,2,0,0,0,
6,4,16,0,2,0,
0,0,50,0,0,15,
50,0,16,0,3,0,
0,0,230,10,16,0,
2,0,0,0,2,64,
0,0,205,204,76,62,
205,204,76,62,0,0,
0,0,0,0,0,0,
2,64,0,0,171,170,
170,190,171,170,170,190,
0,0,0,0,0,0,
0,0,50,0,0,12,
194,0,16,0,2,0,
0,0,166,14,16,0,
2,0,0,0,6,4,
16,0,3,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,0,
0,0,128,63,0,0,
128,63,56,0,0,7,
50,0,16,0,2,0,
0,0,230,10,16,0,
2,0,0,0,70,0,
16,0,2,0,0,0,
54,0,0,5,66,0,
16,0,1,0,0,0,
1,64,0,0,0,0,
0,192,15,0,0,7,
18,0,16,0,3,0,
0,0,134,0,16,0,
1,0,0,0,134,0,
16,0,1,0,0,0,
15,0,0,7,34,0,
16,0,3,0,0,0,
150,5,16,0,1,0,
0,0,150,5,16,0,
1,0,0,0,14,0,
0,10,242,0,16,0,
3,0,0,0,2,64,
0,0,0,0,128,64,
0,0,128,64,0,0,
64,64,0,0,64,64,
70,4,16,0,3,0,
0,0,50,0,0,10,
194,0,16,0,1,0,
0,0,6,4,16,0,
3,0,0,0,6,4,
16,0,3,0,0,0,
166,14,16,128,65,0,
0,0,3,0,0,0,
52,0,0,10,194,0,
16,0,1,0,0,0,
166,14,16,0,1,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,75,0,
0,5,194,0,16,0,
1,0,0,0,166,14,
16,0,1,0,0,0,
0,0,0,8,194,0,
16,0,1,0,0,0,
166,14,16,128,65,0,
0,0,1,0,0,0,
6,4,16,0,3,0,
0,0,56,0,0,7,
50,0,16,0,1,0,
0,0,230,10,16,0,
1,0,0,0,70,0,
16,0,1,0,0,0,
50,0,0,15,194,0,
16,0,1,0,0,0,
166,14,16,0,1,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
0,0,0,0,0,192,
0,0,0,192,2,64,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,64,0,0,0,64,
14,0,0,7,50,0,
16,0,1,0,0,0,
70,0,16,0,1,0,
0,0,230,10,16,0,
1,0,0,0,56,0,
0,7,194,0,16,0,
1,0,0,0,6,4,
16,0,1,0,0,0,
6,4,16,0,1,0,
0,0,50,0,0,15,
194,0,16,0,2,0,
0,0,166,14,16,0,
1,0,0,0,2,64,
0,0,0,0,0,0,
0,0,0,0,205,204,
76,62,205,204,76,62,
2,64,0,0,0,0,
0,0,0,0,0,0,
171,170,170,190,171,170,
170,190,50,0,0,12,
194,0,16,0,1,0,
0,0,166,14,16,0,
1,0,0,0,166,14,
16,0,2,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,0,
0,0,128,63,0,0,
128,63,56,0,0,7,
50,0,16,0,1,0,
0,0,230,10,16,0,
1,0,0,0,70,0,
16,0,1,0,0,0,
14,0,0,7,50,0,
16,0,1,0,0,0,
70,0,16,0,2,0,
0,0,70,0,16,0,
1,0,0,0,55,0,
0,9,50,0,16,0,
1,0,0,0,246,15,
16,0,0,0,0,0,
150,5,16,0,0,0,
0,0,70,0,16,0,
1,0,0,0,0,0,
0,9,194,0,16,0,
1,0,0,0,6,4,
16,128,129,0,0,0,
1,0,0,0,166,138,
32,0,1,0,0,0,
5,0,0,0,0,0,
0,10,194,0,16,0,
1,0,0,0,166,14,
16,0,1,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,0,
0,0,128,191,0,0,
128,191,52,0,0,7,
130,0,16,0,0,0,
0,0,58,0,16,0,
1,0,0,0,42,0,
16,0,1,0,0,0,
51,0,0,7,130,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,0,52,0,
0,10,194,0,16,0,
1,0,0,0,166,14,
16,0,1,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,15,0,0,7,
66,0,16,0,1,0,
0,0,230,10,16,0,
1,0,0,0,230,10,
16,0,1,0,0,0,
75,0,0,5,66,0,
16,0,1,0,0,0,
42,0,16,0,1,0,
0,0,0,0,0,7,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,42,0,
16,0,1,0,0,0,
0,0,0,9,130,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,42,128,32,128,
65,0,0,0,1,0,
0,0,5,0,0,0,
122,0,0,5,194,0,
16,0,1,0,0,0,
6,4,16,0,1,0,
0,0,124,0,0,5,
50,0,16,0,2,0,
0,0,70,0,16,0,
1,0,0,0,0,0,
0,7,194,0,16,0,
2,0,0,0,166,14,
16,0,1,0,0,0,
6,4,16,0,2,0,
0,0,15,0,0,7,
66,0,16,0,2,0,
0,0,230,10,16,0,
2,0,0,0,230,10,
16,0,2,0,0,0,
75,0,0,5,66,0,
16,0,2,0,0,0,
42,0,16,0,2,0,
0,0,0,0,0,7,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,42,0,
16,0,2,0,0,0,
14,0,0,10,66,0,
16,0,2,0,0,0,
2,64,0,0,0,0,
128,63,0,0,128,63,
0,0,128,63,0,0,
128,63,42,0,16,0,
2,0,0,0,56,32,
0,7,130,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
42,0,16,0,2,0,
0,0,50,0,0,9,
66,0,16,0,2,0,
0,0,58,0,16,0,
0,0,0,0,1,64,
0,0,0,0,0,192,
1,64,0,0,0,0,
64,64,56,0,0,7,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
50,0,0,10,130,0,
16,0,0,0,0,0,
42,0,16,128,65,0,
0,0,2,0,0,0,
58,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,52,0,
0,9,34,0,16,0,
0,0,0,0,42,0,
16,128,129,0,0,0,
0,0,0,0,26,0,
16,128,129,0,0,0,
0,0,0,0,49,0,
0,7,34,0,16,0,
0,0,0,0,1,64,
0,0,205,204,140,63,
26,0,16,0,0,0,
0,0,55,0,0,9,
130,32,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,1,64,
0,0,0,0,0,0,
58,0,16,0,0,0,
0,0,56,0,0,7,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,1,64,
0,0,110,18,131,58,
26,0,0,5,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,0,0,0,10,
210,0,16,0,0,0,
0,0,6,0,16,0,
0,0,0,0,2,64,
0,0,102,102,166,63,
0,0,0,0,51,51,
243,191,102,102,230,191,
54,0,0,5,34,0,
16,0,0,0,0,0,
1,64,0,0,205,204,
140,63,56,0,0,10,
242,0,16,0,0,0,
0,0,70,14,16,0,
0,0,0,0,2,64,
0,0,0,0,122,68,
0,0,122,68,0,0,
122,68,0,0,122,68,
50,0,0,13,242,0,
16,0,0,0,0,0,
70,4,16,0,1,0,
0,0,2,64,0,0,
0,0,122,68,0,0,
122,68,0,0,122,68,
0,0,122,68,70,14,
16,128,65,0,0,0,
0,0,0,0,15,0,
0,7,18,0,16,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,75,0,0,5,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,26,0,
0,5,18,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
77,0,0,7,18,0,
16,0,0,0,0,0,
18,0,16,0,3,0,
0,0,10,0,16,0,
0,0,0,0,14,0,
0,7,18,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
10,0,16,0,3,0,
0,0,15,0,0,7,
34,0,16,0,0,0,
0,0,230,10,16,0,
0,0,0,0,230,10,
16,0,0,0,0,0,
75,0,0,5,34,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,56,0,0,7,
18,0,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
26,0,0,5,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,56,0,0,7,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,1,64,
0,0,219,15,201,64,
77,0,0,7,18,0,
16,0,0,0,0,0,
18,0,16,0,3,0,
0,0,10,0,16,0,
0,0,0,0,54,0,
0,5,34,0,16,0,
0,0,0,0,10,0,
16,0,3,0,0,0,
56,0,0,10,50,0,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,2,64,0,0,
244,253,180,63,244,253,
180,63,0,0,0,0,
0,0,0,0,15,0,
0,7,18,0,16,0,
3,0,0,0,70,0,
16,0,0,0,0,0,
230,10,16,0,1,0,
0,0,54,0,0,6,
194,0,16,0,0,0,
0,0,86,5,16,128,
65,0,0,0,0,0,
0,0,15,0,0,7,
34,0,16,0,3,0,
0,0,38,10,16,0,
0,0,0,0,230,10,
16,0,1,0,0,0,
15,0,0,7,18,0,
16,0,4,0,0,0,
70,0,16,0,0,0,
0,0,70,0,16,0,
2,0,0,0,15,0,
0,7,34,0,16,0,
4,0,0,0,54,15,
16,0,0,0,0,0,
70,0,16,0,2,0,
0,0,54,0,0,8,
242,0,16,0,0,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,48,0,
0,1,33,0,0,7,
66,0,16,0,1,0,
0,0,58,0,16,0,
0,0,0,0,1,64,
0,0,64,0,0,0,
3,0,4,3,42,0,
16,0,1,0,0,0,
50,0,0,10,194,0,
16,0,1,0,0,0,
6,4,16,0,3,0,
0,0,6,144,144,0,
58,0,16,0,0,0,
0,0,6,4,16,0,
1,0,0,0,50,0,
0,10,194,0,16,0,
1,0,0,0,6,4,
16,0,4,0,0,0,
86,149,144,0,58,0,
16,0,0,0,0,0,
166,14,16,0,1,0,
0,0,50,0,0,15,
194,0,16,0,1,0,
0,0,166,14,16,0,
1,0,0,0,2,64,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,63,0,0,0,63,
2,64,0,0,0,0,
0,0,0,0,0,0,
0,0,0,63,0,0,
0,63,74,0,0,141,
194,0,0,128,67,85,
21,0,114,0,16,0,
2,0,0,0,230,10,
16,0,1,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,1,64,
0,0,0,0,0,192,
0,0,0,7,114,0,
16,0,0,0,0,0,
70,2,16,0,0,0,
0,0,70,2,16,0,
2,0,0,0,30,0,
0,7,130,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
1,64,0,0,1,0,
0,0,22,0,0,1,
56,0,0,10,114,32,
16,0,0,0,0,0,
70,2,16,0,0,0,
0,0,2,64,0,0,
0,0,128,60,0,0,
128,60,0,0,128,60,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,101,0,
0,0,5,0,0,0,
64,0,0,0,2,0,
0,0,83,0,0,0,
2,0,0,0,1,0,
0,0,1,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,0,0,
0,0,5,0,0,0,
2,0,0,0,5,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};

}

namespace RetroArch
{
class CrtShadersCathodeRetroCathodeRetroCrtGenerateScreenTextureShaderDef : public ShaderDef
{
public:
	CrtShadersCathodeRetroCathodeRetroCrtGenerateScreenTextureShaderDef() : ShaderDef{}
	{
		Name = "cathode-retro-crt-generate-screen-texture";
		VertexByteCode = RetroArchCrtShadersCathodeRetroCathodeRetroCrtGenerateScreenTextureShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchCrtShadersCathodeRetroCathodeRetroCrtGenerateScreenTextureShaderDefs::sVertexByteCode);
		FragmentByteCode = RetroArchCrtShadersCathodeRetroCathodeRetroCrtGenerateScreenTextureShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchCrtShadersCathodeRetroCathodeRetroCrtGenerateScreenTextureShaderDefs::sFragmentByteCode);
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", 0, 64, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("cb_first_start", 0, 80, 4, 0.000000f, 100.000000f, 0.000000f, 1.000000f, "Color Burst Phase First Scanline"));
		Params.push_back(ShaderParam("cb_last_start", 0, 84, 4, 0.000000f, 100.000000f, 1.000000f, 1.000000f, "CB Phase Prev Frame First Scanline"));
		Params.push_back(ShaderParam("cb_phase_inc", 0, 88, 4, 0.000000f, 3.000000f, 1.666660f, 0.010000f, "Color Burst Phase Increment"));
		Params.push_back(ShaderParam("cb_samples", 0, 92, 4, 1.000000f, 100.000000f, 2.000000f, 1.000000f, "Samples Per Color Burst Cyle"));
		Params.push_back(ShaderParam("horz_track_scale", 0, 96, 4, 0.000000f, 3.000000f, 1.000000f, 0.050000f, "Horizontal Tracking Instability Scale"));
		Params.push_back(ShaderParam("minlum", 0, 100, 4, 0.000000f, 1.000000f, 1.000000f, 0.010000f, "Minimum Luminance"));
		Params.push_back(ShaderParam("colorpower", 0, 104, 4, 0.000000f, 2.000000f, 1.000000f, 0.010000f, "Color Power"));
		Params.push_back(ShaderParam("composite", 0, 108, 4, 0.000000f, 1.000000f, 1.000000f, 1.000000f, "Blend Chrome/Luma (aka Composite)"));
		Params.push_back(ShaderParam("sig_pad", 0, 112, 4, 0.000000f, 10.000000f, 0.000000f, 1.000000f, "Signal Padding at Edges"));
		Params.push_back(ShaderParam("ghost_vis", 0, 116, 4, 0.000000f, 1.000000f, 0.150000f, 0.010000f, "Ghost Visibility"));
		Params.push_back(ShaderParam("ghost_dist", 0, 120, 4, 0.000000f, 100.000000f, 1.000000f, 1.000000f, "Ghost Delay Cycles"));
		Params.push_back(ShaderParam("ghost_spread", 0, 124, 4, 0.000000f, 100.000000f, 1.000000f, 1.000000f, "Ghost Spread Cycles"));
		Params.push_back(ShaderParam("noise_strength", 0, 128, 4, 0.000000f, 1.000000f, 0.150000f, 0.010000f, "Artifact Noise Strength"));
		Params.push_back(ShaderParam("tint", 0, 132, 4, -1.000000f, 1.000000f, 0.000000f, 0.010000f, "Tint Knob Adjustment"));
		Params.push_back(ShaderParam("cat_sat", 0, 136, 4, 0.000000f, 2.000000f, 1.000000f, 0.010000f, "Saturation"));
		Params.push_back(ShaderParam("cat_bright", 0, 140, 4, 0.000000f, 2.000000f, 1.000000f, 0.010000f, "Brightness"));
		Params.push_back(ShaderParam("cat_white_lvl", 0, 144, 4, 0.000000f, 2.000000f, 1.000000f, 0.010000f, "White Level"));
		Params.push_back(ShaderParam("cat_black_lvl", 0, 148, 4, 0.000000f, 2.000000f, 0.000000f, 0.010000f, "Black Level"));
		Params.push_back(ShaderParam("temp_artifact_blend", 0, 152, 4, 0.000000f, 1.000000f, 0.000000f, 1.000000f, "Temporal Artifact Blending (Toggle)"));
		Params.push_back(ShaderParam("blurStrength", 0, 156, 4, -1.000000f, 1.000000f, -0.150000f, 0.010000f, "Sharpness"));
		Params.push_back(ShaderParam("stepSize", 0, 160, 4, 1.000000f, 100.000000f, 1.000000f, 1.000000f, "Texels Between Each Sample"));
		Params.push_back(ShaderParam("persistence", 0, 164, 4, 0.000000f, 1.000000f, 0.250000f, 0.010000f, "Phosphor Persistence"));
		Params.push_back(ShaderParam("scan_intens", 0, 168, 4, 0.000000f, 1.000000f, 0.400000f, 0.010000f, "Scanline Intensity"));
		Params.push_back(ShaderParam("diffusion", 0, 172, 4, 0.000000f, 1.000000f, 0.500000f, 0.010000f, "Diffusion Strength"));
		Params.push_back(ShaderParam("mask_intens", 0, 176, 4, 0.000000f, 1.000000f, 0.400000f, 0.010000f, "Mask Strength"));
		Params.push_back(ShaderParam("mask_depth", 0, 180, 4, 0.000000f, 1.000000f, 0.300000f, 0.010000f, "Mask Background Darkness"));
		Params.push_back(ShaderParam("cat_mask_picker", 0, 184, 4, 0.000000f, 3.000000f, 1.000000f, 1.000000f, "Mask (0=none, 1=aperture, 2=slot, 3=shadow)"));
		Params.push_back(ShaderParam("mask_scale", 0, 188, 4, 1.000000f, 200.000000f, 1.000000f, 1.000000f, "Mask Scale (2 or 3 for 4K)"));
		Params.push_back(ShaderParam("anim_noise", 0, 192, 4, 0.000000f, 1.000000f, 0.000000f, 1.000000f, "Animate Anti-Moire Noise"));
		Params.push_back(ShaderParam("div0", 0, 196, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, "--------Screen Settings--------"));
		Params.push_back(ShaderParam("div1", 0, 200, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, "---------TV Knob Settings---------"));
		Params.push_back(ShaderParam("div2", 0, 204, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, "---------Signal Parameters---------"));
		Params.push_back(ShaderParam("div3", 0, 208, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, "-------Artifact Settings-------"));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FrameCount", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FinalViewportSize", -1, 64, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("warpX", -1, 80, 4, 0.000000f, 1.000000f, 0.200000f, 0.010000f, "Barrel Distortion X"));
		Params.push_back(ShaderParam("warpY", -1, 84, 4, 0.000000f, 1.000000f, 0.100000f, 0.010000f, "Barrel Distortion Y"));
		Params.push_back(ShaderParam("corner", -1, 88, 4, 0.000000f, 1.000000f, 0.030000f, 0.010000f, "Rounded Corner Size"));
		Params.push_back(ShaderParam("noise_seed", -1, 92, 4, 179.000000f, 313.000000f, 247.000000f, 1.000000f, "Noise Seed"));
		Samplers.push_back(ShaderSampler("g_maskTexture", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
