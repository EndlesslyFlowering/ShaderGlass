/*
ShaderGlass shader crt/shaders/cathode-retro\cathode-retro-crt-rgb-to-crt_no-signal imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/crt/shaders/cathode-retro/cathode-retro-crt-rgb-to-crt_no-signal.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This shader combines the current frame, the previous frame, screen mask, and diffusion into the final render.
//  It's a relatively complex shader, and certainly if there are features that aren't needed for the current render it
//  could be simplified.
// $TODO: May want to do something like an ubershader version that does exactly the minimum amount of work based on how
//  many features are actually in use (pulling out the distortion or, more importantly, the sampling of the previous/
//  diffusion textures when they're unneeded).
// Do a barrel distortion to a given texture coordinate to emulate a curved CRT screen.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This file contains all the stuff used to make these shaders compile both as GLSL and HLSL.
//
// Note that one of GLSL or HLSL must be defined.
// Decfine this to make my syntax highlighting less angry
// GLSL doesn't have separate samplers and textures, so we're using texName for everything
// A simple approximation of atan2 will suffice here, just a few terms of the taylor series are good enough for the
//  angle ranges we're dealing with.
// The original texture coordinate, intended to come straight from the full-render-target quad, in [-1..1] range (not
//  standard [0..1])
// a [horizontal, vertical] distortion pair which describes the effective curvature of the virtual screen.
// We don't want to let the distortion drop below this minimum value because at 0, the whole technique falls apart.
// $TODO: It's definitely possible to handle distortion.x or y == 0 as a special case, but I didn't do it for now.
// We're going to cast a ray from a virtual camera position p0 (0, 0, -k_distance) and collide it with a unit sphere.
//  The horizontal and vertical spread of the rays is determined by the distortion values.
// Get the squared length of the ray.
// we have an originating point p0 and a ray direction, so we can treat that as a parametric equation:
//  p = p0 + r*t
// Since we have a non-translated unit sphere (1 = x^2 + y^2 + z^2) we can sub in our parametric values and solve for
//  t as a quadratic. To simplify the math, we're going to use a slightly different form of quadratic equation:
//  t^2 - 2b*t + c == 0
// Given our "t^2 - 2b*t + c == 0" quadratic form, the quadratic formula simplifies to -b +/- sqrt(b^2 - c).
// Get the nearer of the two coordinates (and do a max inside the sqrt so we still get continuous values outside of
//  the sphere, even if they're nonsensical, they'll get masked out by our mask value anyway).
// Get our uv coordinates (Basically, latitude and longitude).
// maxUV could be calculated on the CPU and passed in for perf.
// Do the same calculation as above, but for two additional rays: the x, 0, z ray pointing all the way to the right,
//  and the 0, y, z ray pointing at the bottom (Both rays are packed into the same "diagonal" ray value, but the
//  lengths are calculated separately). This gets us the uv extents for the rays that we cast, which we can use to
//  scale our output UVs.
// Scale our UVs by the max value.
// This is the RGB current frame texture - the output of the NTSC decode shaders if decoding was needed.
// This sampler should be set up with linear texture sampling and should be set to clamp (no wrapping).
//DECLARE_TEXTURE2D(g_currentFrameTexture, g_currentFrameSampler);
// bypassing the signal generation temporarily just to get the CRT stuff working first
// This is the previous frame's texture (i.e. last frame's g_currentFrameTexture).
// This sampler should be set up with linear texture sampling and should be set to clamp (no wrapping).
//DECLARE_TEXTURE2D(g_previousFrameTexture, g_previousFrameSampler);
// This texture is the output of the GenerateScreenTexture shader, containing the (scaled, tiled, and antialiased) mask
//  texture in the rgb channels and the edge-of-screen mask value in the alpha channel. It is expected to have been
//  generated at our output resolution (i.e. it's 1:1 pixels with our output render target)
// This sampler should be set up with linear texture sampling and should be set to clamp (no wrapping).
//DECLARE_TEXTURE2D(g_screenMaskTexture, g_screenMaskSampler);
// This texture contains a tonemapped/blurred version of the input texture, to emulate the diffusion of the light from
//  the phosphors through the glass on the front of a CRT screen.
// This sampler should be set up with linear texture sampling and should be set to clamp (no wrapping).
//DECLARE_TEXTURE2D(g_diffusionTexture, g_diffusionSampler);
// This shader is intended to render a screen of the correct shape regardless of the output render target shape,
//  effectively letterboxing or pillarboxing as needed(i.e. rendering a 4:3 screen to a 16:9 render target).
//  g_viewScale is the scale value necessary to get the resulting screen scale correct. In the event the output
//  render target is wider than the intended screen, the screen needs to be scaled down horizontally to pillarbox,
//  usually like (where screenAspectRatio is crtScreenWidth / crtScreenHeight):
//    (x: (renderTargetWidth / renderTargetHeight) * (1.0 / screenAspectRatio), y: 1.0)
//  if the output render target is taller than the intended screen, it will end up letterboxed using something like:
//    (x: 1.0, y: (renderTargetHeight / renderTargetWidth) * screenAspectRatio)
// Note that if overscan (where the edges of the screen cover up some of the picture) is being emulated, it
//  potentially needs to be taken into account in this value too. See RGBToCRT.h for details if that's the case.
// If overscan emulation is intended (where the edges of the screen cover up some of the picture), then this is the
//  amount of signal texture scaling needed to account for that. Given an overscan value "overscanAmount" that's
//    (overscanLeft + overscanRight, overscanTop + overscanBottom)
//  this value should end up being:
//    (inputImageSize.xy - overscanAmount.xy) / inputImageSize.xy
// This is the texture coordinate offset to adjust for overscan. Because the input coordinates are [-1..1] instead
//  of [0..1], this is the offset needed to recenter the value. Given an "overscanDifference" value:
//    (overscanLeft - overscanRight, overscanTop - overscanBottom)
//  this value should be:
//    overscanDifference.xy/ inputImageSize.xy * 0.5
// The amount along each axis to apply the virtual-curved screen distortion. Usually a value in [0..1]. "0" indicates
//  no curvature (a flat screen) and "1" indicates "quite curved
// The RGBA color of the area around the screen.
// How much of the previous frame's brightness to keep. 0 means "we don't use the previous frame at all" and 1 means
//  "the previous  frame is at full brightness". In many CRTs, the phosphor persistence is short enough that it would
//  be effectively 0 at 50-60fps (As a CRT's phospors could potentially be completely faded out by then). However,
//  for some cases (for instance, interlaced video or for actual NES/SNES/probably other console output) it is
//  generally preferable to turn on a little bit of persistance to lessen temporal flickering on an LCD screen as it
//  can tend to look bad depending on the panel (seriously, check out https://www.youtube.com/watch?v=kA8CIY0DeS8
//  which is what my LCD panel was doing *after* the flickering interlace test truck I had had been gone for 10
//  minutes)
// How many scanlines there are in this field of the input (where a field is either the even or odd scanlines of an
//  interlaced frame, or the entirety of a progressive-scan frame)
// The strength of the separation between scanlines. 0 means "no scanline separation at all" and 1 means "separate
//  the scanlines as much as possible" - on high-enough resolution output render target (at 4k for sure) "1" means
//  "fully black between scanlines", but to reduce aliasing that amount of separation will diminish at lower output
//  resolution.
// This is the scanline-space coordinate offset to use to adjust our texture coordinate's y value based on whether
//  this is a (1-based) odd frame or an even frame. It will be 0.5 (shifting the texture up half a scanline) if it's
//  an odd frame and -0.5 (shifting the texture down half a scanline) if it's an even frame.
// Same as above, but it's the even/odd texel offset that was relevant for the previous frame (so we can blend it in
//  at the proper spot). This should match g_curEvenOddTexelOffset for a progressive-scan signal and should be
//  "-g_curEvenOddTexelOffset" if interlaced.
// This is how much diffusion to apply, blending in the diffusion texture which is an emulation of the light from the
//  screen scattering in the glass on the front of the CRT - 0 means "no diffusion" and 1 means "a whole lot of
//  diffusion".
// How much we want to blend in the mask. 0 means "mask is not visible" and 1 means "mask is fully visible
// The darkness of the darkest part of the mask. 0 means the area between the "dots" is black, 0.9 means the spaces
//  between are nearly white.
// The screen texture is 1:1 with the output render target so sample it directly off of the input texture coordinates
// Now distort the texture coordinates to get our texture into the correct space for display.
// Use "t" (before we do the even/odd update or the scanline-sharpening) to load our diffusion texture, which is an
//  approximation of the glass in front of the phosphors scattering light a little bit due to imperfections.
// Offset based on whether we're an even or odd frame
// Before we adjust the y coordinate to sharpen the scanline interpolation, grab our scanline-space y coordinate.
// Because t.y is currently in [-1, 1], this derivative multiplied by the scanline count ends up being the number of
//  total scanlines involved (including the empty ones). So this is "how much along y does one output pixel move us
//  relative to g_scanlineCount*2
// Do a little magic to sharpen up the interpolation between scanlines - a CRT (didn't really have any vertical
//  smoothing, so we want to make the centers of our texels a little more solid and do less bilinear blending
//  vertically (just a little to simulate the softness of the screen in general)
// Sample the actual display texture and add in the previous frame (For phosphor persistence)
// Reduce the influence of the scanlines as we get small enough that aliasing is unavoidable (fully fading out at
//  0.7x nyquist - early to ensure that we don't introduce any aliasing as we get too close).
// $TODO: We may want to find a way to precalculate this scanline value as a texture (like the screen texture).
//  Unfortunately the screen texture is already using all 4 of its components so we'd need a new one, which is why
//  I didn't).
// For the actual scanline value, we use the following equation:
//   cos(scanlineSpaceY * pi) * 0.5 + 0.5
//  That is, at scanline centers it's either 0 or 1. However, to avoid moir� patterns we actually want to
//  supersample it. The good news is, we can supersample over a range using numeric integration since it's a
//  sinusoid. The integration of that wave between y coordinates ya and yb ends up being:
//   (yb - ya)/2 + 1/(2pi) * (sin(pi*ya) - sin(pi*yb)))
//  but in order to turn it into an average we need to divide that result by the width of the range, which is
//  (yb - ya).
// As pixelLengthInScanlineSpace gets larger (i.e. effective output resolution gets smaller) we want to ramp up
//  the blurring dramatically to avoid moir� effects. There's no real mathematical basis for this algorithm, I
//  just eyeballed a curve until I got something that looked good at 1080p and up and introduced minimal moir�
//  (minimal meaning "it's not visible when the mask is also enabled").
// Now multiply in the scanline-spacing darkening according to the scanline strength.
// We have a different scanline parity in the previous frame so we need to offset our texture coordinate (to put
//  the prev frame's scanline center at the correct spot) and then invert our scanline multiplier (to darken the
//  alternate scanlines)
// Sample the previous texture and darken the area between scanlines accordingly.
// Blend our previous frame into the current one based on how much phosphor persistence we have between frames.
// We want to adjust the brightness to somewhat compensate for the darkening due to scanlines
// Time to put it all together: first, by applying the screen mask (i.e. the shadow mask/aperture grill, etc)...
//  $TODO: Figure out a proper scaling factor here - the 3.0 is meant to adjust for the fact that the mask cuts out
//  approximately 2/3rds of the brightness, but it's not exact, we could calculate this, I just haven't.
// ... then bringing in some diffusion on top (This isn't physically accurate (it should really be a lerp between res
//  and diffusionColor) but doing it this way preserves the brightness and still looks reasonable, especially when
//  displaying bright things on a dark background)
// Finally, mask out everything outside of the edges to get our final output value.

*/

#pragma once

namespace RetroArchCrtShadersCathodeRetroCathodeRetroCrtRgbToCrt_noSignalShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,98,121,
196,154,194,61,252,4,
201,138,51,20,103,122,
157,45,1,0,0,0,
176,11,0,0,5,0,
0,0,52,0,0,0,
76,9,0,0,152,9,
0,0,240,9,0,0,
20,11,0,0,82,68,
69,70,16,9,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
229,8,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,35,0,
0,0,120,0,0,0,
224,0,0,0,0,0,
0,0,0,0,0,0,
240,5,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,4,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,40,6,
0,0,64,0,0,0,
16,0,0,0,0,0,
0,0,68,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,104,6,0,0,
80,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
168,6,0,0,84,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,189,6,
0,0,88,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,209,6,0,0,
92,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
227,6,0,0,96,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,251,6,
0,0,100,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,9,7,0,0,
104,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
27,7,0,0,108,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,44,7,
0,0,112,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,59,7,0,0,
116,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
76,7,0,0,120,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,94,7,
0,0,124,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,114,7,0,0,
128,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
136,7,0,0,132,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,148,7,
0,0,136,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,163,7,0,0,
140,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
181,7,0,0,144,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,202,7,
0,0,148,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,223,7,0,0,
152,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
250,7,0,0,156,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,14,8,
0,0,160,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,30,8,0,0,
164,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
49,8,0,0,168,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,68,8,
0,0,172,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,85,8,0,0,
176,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
104,8,0,0,180,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,122,8,
0,0,184,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,145,8,0,0,
188,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
163,8,0,0,192,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,181,8,
0,0,196,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,193,8,0,0,
200,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
205,8,0,0,204,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,217,8,
0,0,208,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,103,108,111,98,
97,108,95,77,86,80,
0,102,108,111,97,116,
52,120,52,0,2,0,
3,0,4,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
251,5,0,0,103,108,
111,98,97,108,95,79,
114,105,103,105,110,97,
108,83,105,122,101,0,
102,108,111,97,116,52,
0,171,1,0,3,0,
1,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,60,6,
0,0,103,108,111,98,
97,108,95,99,98,95,
102,105,114,115,116,95,
115,116,97,114,116,0,
102,108,111,97,116,0,
0,0,3,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,126,6,0,0,
103,108,111,98,97,108,
95,99,98,95,108,97,
115,116,95,115,116,97,
114,116,0,103,108,111,
98,97,108,95,99,98,
95,112,104,97,115,101,
95,105,110,99,0,103,
108,111,98,97,108,95,
99,98,95,115,97,109,
112,108,101,115,0,103,
108,111,98,97,108,95,
104,111,114,122,95,116,
114,97,99,107,95,115,
99,97,108,101,0,103,
108,111,98,97,108,95,
109,105,110,108,117,109,
0,103,108,111,98,97,
108,95,99,111,108,111,
114,112,111,119,101,114,
0,103,108,111,98,97,
108,95,99,111,109,112,
111,115,105,116,101,0,
103,108,111,98,97,108,
95,115,105,103,95,112,
97,100,0,103,108,111,
98,97,108,95,103,104,
111,115,116,95,118,105,
115,0,103,108,111,98,
97,108,95,103,104,111,
115,116,95,100,105,115,
116,0,103,108,111,98,
97,108,95,103,104,111,
115,116,95,115,112,114,
101,97,100,0,103,108,
111,98,97,108,95,110,
111,105,115,101,95,115,
116,114,101,110,103,116,
104,0,103,108,111,98,
97,108,95,116,105,110,
116,0,103,108,111,98,
97,108,95,99,97,116,
95,115,97,116,0,103,
108,111,98,97,108,95,
99,97,116,95,98,114,
105,103,104,116,0,103,
108,111,98,97,108,95,
99,97,116,95,119,104,
105,116,101,95,108,118,
108,0,103,108,111,98,
97,108,95,99,97,116,
95,98,108,97,99,107,
95,108,118,108,0,103,
108,111,98,97,108,95,
116,101,109,112,95,97,
114,116,105,102,97,99,
116,95,98,108,101,110,
100,0,103,108,111,98,
97,108,95,98,108,117,
114,83,116,114,101,110,
103,116,104,0,103,108,
111,98,97,108,95,115,
116,101,112,83,105,122,
101,0,103,108,111,98,
97,108,95,112,101,114,
115,105,115,116,101,110,
99,101,0,103,108,111,
98,97,108,95,115,99,
97,110,95,105,110,116,
101,110,115,0,103,108,
111,98,97,108,95,100,
105,102,102,117,115,105,
111,110,0,103,108,111,
98,97,108,95,109,97,
115,107,95,105,110,116,
101,110,115,0,103,108,
111,98,97,108,95,109,
97,115,107,95,100,101,
112,116,104,0,103,108,
111,98,97,108,95,99,
97,116,95,109,97,115,
107,95,112,105,99,107,
101,114,0,103,108,111,
98,97,108,95,109,97,
115,107,95,115,99,97,
108,101,0,103,108,111,
98,97,108,95,97,110,
105,109,95,110,111,105,
115,101,0,103,108,111,
98,97,108,95,100,105,
118,48,0,103,108,111,
98,97,108,95,100,105,
118,49,0,103,108,111,
98,97,108,95,100,105,
118,50,0,103,108,111,
98,97,108,95,100,105,
118,51,0,77,105,99,
114,111,115,111,102,116,
32,40,82,41,32,72,
76,83,76,32,83,104,
97,100,101,114,32,67,
111,109,112,105,108,101,
114,32,49,48,46,49,
0,171,171,171,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
80,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
65,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,28,1,
0,0,80,0,1,0,
71,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
95,0,0,3,242,16,
16,0,0,0,0,0,
95,0,0,3,50,16,
16,0,1,0,0,0,
101,0,0,3,50,32,
16,0,0,0,0,0,
103,0,0,4,242,32,
16,0,1,0,0,0,
1,0,0,0,104,0,
0,2,1,0,0,0,
56,0,0,10,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,2,64,0,0,
71,3,128,63,71,3,
128,63,0,0,0,0,
0,0,0,0,56,0,
0,8,242,0,16,0,
0,0,0,0,86,21,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,1,0,0,0,
50,0,0,10,242,0,
16,0,0,0,0,0,
6,16,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,0,0,
0,0,70,14,16,0,
0,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,166,26,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,2,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,32,16,0,1,0,
0,0,246,31,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
3,0,0,0,70,14,
16,0,0,0,0,0,
62,0,0,1,83,84,
65,84,148,0,0,0,
6,0,0,0,1,0,
0,0,0,0,0,0,
4,0,0,0,5,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,26,7,
122,168,253,79,98,225,
205,5,69,124,184,240,
109,245,1,0,0,0,
12,30,0,0,5,0,
0,0,52,0,0,0,
104,13,0,0,156,13,
0,0,208,13,0,0,
112,29,0,0,82,68,
69,70,44,13,0,0,
2,0,0,0,52,2,
0,0,10,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
3,13,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
124,1,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,149,1,0,0,
3,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
1,0,0,0,172,1,
0,0,3,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
4,0,0,0,1,0,
0,0,1,0,0,0,
201,1,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,5,0,0,0,
1,0,0,0,1,0,
0,0,229,1,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,245,1,
0,0,2,0,0,0,
5,0,0,0,4,0,
0,0,255,255,255,255,
3,0,0,0,1,0,
0,0,13,0,0,0,
3,2,0,0,2,0,
0,0,5,0,0,0,
4,0,0,0,255,255,
255,255,4,0,0,0,
1,0,0,0,13,0,
0,0,23,2,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,5,0,
0,0,1,0,0,0,
13,0,0,0,42,2,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
46,2,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
1,0,0,0,0,0,
0,0,95,103,95,115,
111,117,114,99,101,84,
101,120,116,117,114,101,
95,115,97,109,112,108,
101,114,0,95,80,97,
115,115,70,101,101,100,
98,97,99,107,48,95,
115,97,109,112,108,101,
114,0,95,103,95,115,
99,114,101,101,110,77,
97,115,107,84,101,120,
116,117,114,101,95,115,
97,109,112,108,101,114,
0,95,103,95,100,105,
102,102,117,115,105,111,
110,84,101,120,116,117,
114,101,95,115,97,109,
112,108,101,114,0,103,
95,115,111,117,114,99,
101,84,101,120,116,117,
114,101,0,80,97,115,
115,70,101,101,100,98,
97,99,107,48,0,103,
95,115,99,114,101,101,
110,77,97,115,107,84,
101,120,116,117,114,101,
0,103,95,100,105,102,
102,117,115,105,111,110,
84,101,120,116,117,114,
101,0,85,66,79,0,
80,117,115,104,0,171,
42,2,0,0,35,0,
0,0,100,2,0,0,
224,0,0,0,0,0,
0,0,0,0,0,0,
46,2,0,0,9,0,
0,0,212,10,0,0,
96,0,0,0,0,0,
0,0,0,0,0,0,
220,7,0,0,0,0,
0,0,64,0,0,0,
0,0,0,0,240,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,20,8,
0,0,64,0,0,0,
16,0,0,0,0,0,
0,0,48,8,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,84,8,0,0,
80,0,0,0,4,0,
0,0,0,0,0,0,
112,8,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
148,8,0,0,84,0,
0,0,4,0,0,0,
0,0,0,0,112,8,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,169,8,
0,0,88,0,0,0,
4,0,0,0,0,0,
0,0,112,8,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,189,8,0,0,
92,0,0,0,4,0,
0,0,0,0,0,0,
112,8,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
207,8,0,0,96,0,
0,0,4,0,0,0,
0,0,0,0,112,8,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,231,8,
0,0,100,0,0,0,
4,0,0,0,0,0,
0,0,112,8,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,245,8,0,0,
104,0,0,0,4,0,
0,0,0,0,0,0,
112,8,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
7,9,0,0,108,0,
0,0,4,0,0,0,
0,0,0,0,112,8,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,24,9,
0,0,112,0,0,0,
4,0,0,0,0,0,
0,0,112,8,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,39,9,0,0,
116,0,0,0,4,0,
0,0,0,0,0,0,
112,8,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
56,9,0,0,120,0,
0,0,4,0,0,0,
0,0,0,0,112,8,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,74,9,
0,0,124,0,0,0,
4,0,0,0,0,0,
0,0,112,8,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,94,9,0,0,
128,0,0,0,4,0,
0,0,0,0,0,0,
112,8,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
116,9,0,0,132,0,
0,0,4,0,0,0,
0,0,0,0,112,8,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,128,9,
0,0,136,0,0,0,
4,0,0,0,0,0,
0,0,112,8,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,143,9,0,0,
140,0,0,0,4,0,
0,0,0,0,0,0,
112,8,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
161,9,0,0,144,0,
0,0,4,0,0,0,
0,0,0,0,112,8,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,182,9,
0,0,148,0,0,0,
4,0,0,0,0,0,
0,0,112,8,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,203,9,0,0,
152,0,0,0,4,0,
0,0,0,0,0,0,
112,8,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
230,9,0,0,156,0,
0,0,4,0,0,0,
0,0,0,0,112,8,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,250,9,
0,0,160,0,0,0,
4,0,0,0,0,0,
0,0,112,8,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,10,10,0,0,
164,0,0,0,4,0,
0,0,2,0,0,0,
112,8,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
29,10,0,0,168,0,
0,0,4,0,0,0,
2,0,0,0,112,8,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,48,10,
0,0,172,0,0,0,
4,0,0,0,2,0,
0,0,112,8,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,65,10,0,0,
176,0,0,0,4,0,
0,0,2,0,0,0,
112,8,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
84,10,0,0,180,0,
0,0,4,0,0,0,
2,0,0,0,112,8,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,102,10,
0,0,184,0,0,0,
4,0,0,0,2,0,
0,0,112,8,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,125,10,0,0,
188,0,0,0,4,0,
0,0,0,0,0,0,
112,8,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
143,10,0,0,192,0,
0,0,4,0,0,0,
0,0,0,0,112,8,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,161,10,
0,0,196,0,0,0,
4,0,0,0,0,0,
0,0,112,8,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,173,10,0,0,
200,0,0,0,4,0,
0,0,0,0,0,0,
112,8,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
185,10,0,0,204,0,
0,0,4,0,0,0,
0,0,0,0,112,8,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,197,10,
0,0,208,0,0,0,
4,0,0,0,0,0,
0,0,112,8,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,103,108,111,98,
97,108,95,77,86,80,
0,102,108,111,97,116,
52,120,52,0,2,0,
3,0,4,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
231,7,0,0,103,108,
111,98,97,108,95,79,
114,105,103,105,110,97,
108,83,105,122,101,0,
102,108,111,97,116,52,
0,171,1,0,3,0,
1,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,40,8,
0,0,103,108,111,98,
97,108,95,99,98,95,
102,105,114,115,116,95,
115,116,97,114,116,0,
102,108,111,97,116,0,
0,0,3,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,106,8,0,0,
103,108,111,98,97,108,
95,99,98,95,108,97,
115,116,95,115,116,97,
114,116,0,103,108,111,
98,97,108,95,99,98,
95,112,104,97,115,101,
95,105,110,99,0,103,
108,111,98,97,108,95,
99,98,95,115,97,109,
112,108,101,115,0,103,
108,111,98,97,108,95,
104,111,114,122,95,116,
114,97,99,107,95,115,
99,97,108,101,0,103,
108,111,98,97,108,95,
109,105,110,108,117,109,
0,103,108,111,98,97,
108,95,99,111,108,111,
114,112,111,119,101,114,
0,103,108,111,98,97,
108,95,99,111,109,112,
111,115,105,116,101,0,
103,108,111,98,97,108,
95,115,105,103,95,112,
97,100,0,103,108,111,
98,97,108,95,103,104,
111,115,116,95,118,105,
115,0,103,108,111,98,
97,108,95,103,104,111,
115,116,95,100,105,115,
116,0,103,108,111,98,
97,108,95,103,104,111,
115,116,95,115,112,114,
101,97,100,0,103,108,
111,98,97,108,95,110,
111,105,115,101,95,115,
116,114,101,110,103,116,
104,0,103,108,111,98,
97,108,95,116,105,110,
116,0,103,108,111,98,
97,108,95,99,97,116,
95,115,97,116,0,103,
108,111,98,97,108,95,
99,97,116,95,98,114,
105,103,104,116,0,103,
108,111,98,97,108,95,
99,97,116,95,119,104,
105,116,101,95,108,118,
108,0,103,108,111,98,
97,108,95,99,97,116,
95,98,108,97,99,107,
95,108,118,108,0,103,
108,111,98,97,108,95,
116,101,109,112,95,97,
114,116,105,102,97,99,
116,95,98,108,101,110,
100,0,103,108,111,98,
97,108,95,98,108,117,
114,83,116,114,101,110,
103,116,104,0,103,108,
111,98,97,108,95,115,
116,101,112,83,105,122,
101,0,103,108,111,98,
97,108,95,112,101,114,
115,105,115,116,101,110,
99,101,0,103,108,111,
98,97,108,95,115,99,
97,110,95,105,110,116,
101,110,115,0,103,108,
111,98,97,108,95,100,
105,102,102,117,115,105,
111,110,0,103,108,111,
98,97,108,95,109,97,
115,107,95,105,110,116,
101,110,115,0,103,108,
111,98,97,108,95,109,
97,115,107,95,100,101,
112,116,104,0,103,108,
111,98,97,108,95,99,
97,116,95,109,97,115,
107,95,112,105,99,107,
101,114,0,103,108,111,
98,97,108,95,109,97,
115,107,95,115,99,97,
108,101,0,103,108,111,
98,97,108,95,97,110,
105,109,95,110,111,105,
115,101,0,103,108,111,
98,97,108,95,100,105,
118,48,0,103,108,111,
98,97,108,95,100,105,
118,49,0,103,108,111,
98,97,108,95,100,105,
118,50,0,103,108,111,
98,97,108,95,100,105,
118,51,0,171,171,171,
60,12,0,0,0,0,
0,0,16,0,0,0,
0,0,0,0,48,8,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,78,12,
0,0,16,0,0,0,
16,0,0,0,2,0,
0,0,48,8,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,98,12,0,0,
32,0,0,0,16,0,
0,0,0,0,0,0,
48,8,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
116,12,0,0,48,0,
0,0,4,0,0,0,
0,0,0,0,140,12,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,176,12,
0,0,64,0,0,0,
16,0,0,0,0,0,
0,0,48,8,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,201,12,0,0,
80,0,0,0,4,0,
0,0,2,0,0,0,
112,8,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
214,12,0,0,84,0,
0,0,4,0,0,0,
2,0,0,0,112,8,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,227,12,
0,0,88,0,0,0,
4,0,0,0,0,0,
0,0,112,8,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,241,12,0,0,
92,0,0,0,4,0,
0,0,0,0,0,0,
112,8,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
112,97,114,97,109,115,
95,83,111,117,114,99,
101,83,105,122,101,0,
112,97,114,97,109,115,
95,79,114,105,103,105,
110,97,108,83,105,122,
101,0,112,97,114,97,
109,115,95,79,117,116,
112,117,116,83,105,122,
101,0,112,97,114,97,
109,115,95,70,114,97,
109,101,67,111,117,110,
116,0,100,119,111,114,
100,0,0,0,19,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,134,12,
0,0,112,97,114,97,
109,115,95,70,105,110,
97,108,86,105,101,119,
112,111,114,116,83,105,
122,101,0,112,97,114,
97,109,115,95,119,97,
114,112,88,0,112,97,
114,97,109,115,95,119,
97,114,112,89,0,112,
97,114,97,109,115,95,
99,111,114,110,101,114,
0,112,97,114,97,109,
115,95,110,111,105,115,
101,95,115,101,101,100,
0,77,105,99,114,111,
115,111,102,116,32,40,
82,41,32,72,76,83,
76,32,83,104,97,100,
101,114,32,67,111,109,
112,105,108,101,114,32,
49,48,46,49,0,171,
73,83,71,78,44,0,
0,0,1,0,0,0,
8,0,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
3,3,0,0,84,69,
88,67,79,79,82,68,
0,171,171,171,79,83,
71,78,44,0,0,0,
1,0,0,0,8,0,
0,0,32,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,0,
0,0,83,86,95,84,
97,114,103,101,116,0,
171,171,83,72,69,88,
152,15,0,0,80,0,
0,0,230,3,0,0,
106,8,0,1,89,0,
0,4,70,142,32,0,
0,0,0,0,12,0,
0,0,89,0,0,4,
70,142,32,0,1,0,
0,0,6,0,0,0,
90,0,0,3,0,96,
16,0,2,0,0,0,
90,0,0,3,0,96,
16,0,3,0,0,0,
90,0,0,3,0,96,
16,0,4,0,0,0,
90,0,0,3,0,96,
16,0,5,0,0,0,
88,24,0,4,0,112,
16,0,2,0,0,0,
85,85,0,0,88,24,
0,4,0,112,16,0,
3,0,0,0,85,85,
0,0,88,24,0,4,
0,112,16,0,4,0,
0,0,85,85,0,0,
88,24,0,4,0,112,
16,0,5,0,0,0,
85,85,0,0,98,16,
0,3,50,16,16,0,
0,0,0,0,101,0,
0,3,242,32,16,0,
0,0,0,0,104,0,
0,2,4,0,0,0,
54,0,0,5,66,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
0,192,52,0,0,11,
50,0,16,0,0,0,
0,0,2,64,0,0,
23,183,209,56,23,183,
209,56,0,0,0,0,
0,0,0,0,70,128,
32,0,1,0,0,0,
5,0,0,0,15,0,
0,7,18,0,16,0,
1,0,0,0,134,0,
16,0,0,0,0,0,
134,0,16,0,0,0,
0,0,15,0,0,7,
34,0,16,0,1,0,
0,0,150,5,16,0,
0,0,0,0,150,5,
16,0,0,0,0,0,
14,0,0,10,242,0,
16,0,1,0,0,0,
2,64,0,0,0,0,
128,64,0,0,128,64,
0,0,64,64,0,0,
64,64,70,4,16,0,
1,0,0,0,50,0,
0,10,194,0,16,0,
0,0,0,0,6,4,
16,0,1,0,0,0,
6,4,16,0,1,0,
0,0,166,14,16,128,
65,0,0,0,1,0,
0,0,52,0,0,10,
194,0,16,0,0,0,
0,0,166,14,16,0,
0,0,0,0,2,64,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
75,0,0,5,194,0,
16,0,0,0,0,0,
166,14,16,0,0,0,
0,0,0,0,0,8,
194,0,16,0,0,0,
0,0,166,14,16,128,
65,0,0,0,0,0,
0,0,6,4,16,0,
1,0,0,0,56,0,
0,7,50,0,16,0,
1,0,0,0,230,10,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,50,0,0,15,
194,0,16,0,0,0,
0,0,166,14,16,0,
0,0,0,0,2,64,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,192,0,0,0,192,
2,64,0,0,0,0,
0,0,0,0,0,0,
0,0,0,64,0,0,
0,64,14,0,0,7,
194,0,16,0,0,0,
0,0,6,4,16,0,
1,0,0,0,166,14,
16,0,0,0,0,0,
56,0,0,7,50,0,
16,0,1,0,0,0,
230,10,16,0,0,0,
0,0,230,10,16,0,
0,0,0,0,50,0,
0,15,194,0,16,0,
1,0,0,0,6,4,
16,0,1,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,0,
205,204,76,62,205,204,
76,62,2,64,0,0,
0,0,0,0,0,0,
0,0,171,170,170,190,
171,170,170,190,50,0,
0,12,50,0,16,0,
1,0,0,0,70,0,
16,0,1,0,0,0,
230,10,16,0,1,0,
0,0,2,64,0,0,
0,0,128,63,0,0,
128,63,0,0,0,0,
0,0,0,0,56,0,
0,7,194,0,16,0,
0,0,0,0,166,14,
16,0,0,0,0,0,
6,4,16,0,1,0,
0,0,50,0,0,15,
50,0,16,0,1,0,
0,0,70,16,16,0,
0,0,0,0,2,64,
0,0,0,0,0,64,
0,0,0,64,0,0,
0,0,0,0,0,0,
2,64,0,0,0,0,
128,191,0,0,128,191,
0,0,0,0,0,0,
0,0,56,0,0,7,
50,0,16,0,2,0,
0,0,70,0,16,0,
0,0,0,0,70,0,
16,0,1,0,0,0,
54,0,0,5,66,0,
16,0,2,0,0,0,
1,64,0,0,0,0,
0,192,16,0,0,7,
18,0,16,0,0,0,
0,0,70,2,16,0,
2,0,0,0,70,2,
16,0,2,0,0,0,
14,0,0,10,50,0,
16,0,0,0,0,0,
2,64,0,0,0,0,
128,64,0,0,64,64,
0,0,0,0,0,0,
0,0,6,0,16,0,
0,0,0,0,50,0,
0,10,34,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,26,0,16,128,
65,0,0,0,0,0,
0,0,52,0,0,7,
34,0,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,1,64,
0,0,0,0,0,0,
75,0,0,5,34,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,0,0,0,8,
18,0,16,0,0,0,
0,0,26,0,16,128,
65,0,0,0,0,0,
0,0,10,0,16,0,
0,0,0,0,56,0,
0,7,194,0,16,0,
1,0,0,0,6,0,
16,0,0,0,0,0,
6,4,16,0,2,0,
0,0,50,0,0,9,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,1,64,
0,0,0,0,0,192,
1,64,0,0,0,0,
0,64,14,0,0,7,
50,0,16,0,0,0,
0,0,230,10,16,0,
1,0,0,0,6,0,
16,0,0,0,0,0,
56,0,0,7,194,0,
16,0,1,0,0,0,
6,4,16,0,0,0,
0,0,6,4,16,0,
0,0,0,0,50,0,
0,15,50,0,16,0,
2,0,0,0,230,10,
16,0,1,0,0,0,
2,64,0,0,205,204,
76,62,205,204,76,62,
0,0,0,0,0,0,
0,0,2,64,0,0,
171,170,170,190,171,170,
170,190,0,0,0,0,
0,0,0,0,50,0,
0,12,194,0,16,0,
1,0,0,0,166,14,
16,0,1,0,0,0,
6,4,16,0,2,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
0,0,0,0,128,63,
0,0,128,63,56,0,
0,7,50,0,16,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
230,10,16,0,1,0,
0,0,14,0,0,7,
50,0,16,0,0,0,
0,0,70,0,16,0,
0,0,0,0,230,10,
16,0,0,0,0,0,
24,0,0,11,194,0,
16,0,0,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,6,132,32,0,
1,0,0,0,5,0,
0,0,1,0,0,7,
66,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
55,0,0,9,50,0,
16,0,0,0,0,0,
166,10,16,0,0,0,
0,0,70,0,16,0,
1,0,0,0,70,0,
16,0,0,0,0,0,
49,0,0,8,130,0,
16,0,0,0,0,0,
26,128,32,0,1,0,
0,0,1,0,0,0,
1,64,0,0,0,0,
200,67,56,0,0,8,
18,0,16,0,1,0,
0,0,1,64,0,0,
0,0,0,63,26,128,
32,0,1,0,0,0,
1,0,0,0,55,0,
0,10,130,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
26,128,32,0,1,0,
0,0,1,0,0,0,
10,0,16,0,1,0,
0,0,14,0,0,10,
50,0,16,0,1,0,
0,0,2,64,0,0,
0,0,0,63,0,0,
0,191,0,0,0,0,
0,0,0,0,246,15,
16,0,0,0,0,0,
0,0,0,7,18,0,
16,0,1,0,0,0,
26,0,16,0,0,0,
0,0,10,0,16,0,
1,0,0,0,50,0,
0,9,66,0,16,0,
1,0,0,0,10,0,
16,0,1,0,0,0,
1,64,0,0,0,0,
0,63,1,64,0,0,
0,0,0,63,56,0,
0,7,130,0,16,0,
1,0,0,0,58,0,
16,0,0,0,0,0,
42,0,16,0,1,0,
0,0,26,0,0,5,
130,0,16,0,1,0,
0,0,58,0,16,0,
1,0,0,0,50,0,
0,10,66,0,16,0,
1,0,0,0,42,0,
16,0,1,0,0,0,
58,0,16,0,0,0,
0,0,58,0,16,128,
65,0,0,0,1,0,
0,0,0,0,0,7,
130,0,16,0,1,0,
0,0,58,0,16,0,
1,0,0,0,1,64,
0,0,0,0,0,191,
49,0,0,7,18,0,
16,0,2,0,0,0,
1,64,0,0,0,0,
0,0,58,0,16,0,
1,0,0,0,49,0,
0,7,34,0,16,0,
2,0,0,0,58,0,
16,0,1,0,0,0,
1,64,0,0,0,0,
0,0,0,0,0,8,
130,0,16,0,1,0,
0,0,58,0,16,128,
129,0,0,0,1,0,
0,0,1,64,0,0,
205,204,204,189,52,0,
0,7,130,0,16,0,
1,0,0,0,58,0,
16,0,1,0,0,0,
1,64,0,0,0,0,
0,0,30,0,0,8,
18,0,16,0,2,0,
0,0,10,0,16,128,
65,0,0,0,2,0,
0,0,26,0,16,0,
2,0,0,0,43,0,
0,5,18,0,16,0,
2,0,0,0,10,0,
16,0,2,0,0,0,
56,0,0,7,130,0,
16,0,1,0,0,0,
58,0,16,0,1,0,
0,0,10,0,16,0,
2,0,0,0,50,0,
0,9,66,0,16,0,
1,0,0,0,58,0,
16,0,1,0,0,0,
1,64,0,0,0,0,
160,63,42,0,16,0,
1,0,0,0,0,0,
0,7,66,0,16,0,
1,0,0,0,42,0,
16,0,1,0,0,0,
1,64,0,0,0,0,
0,63,14,0,0,7,
66,0,16,0,1,0,
0,0,42,0,16,0,
1,0,0,0,58,0,
16,0,0,0,0,0,
50,0,0,9,66,0,
16,0,0,0,0,0,
42,0,16,0,1,0,
0,0,1,64,0,0,
0,0,0,64,1,64,
0,0,0,0,128,191,
50,0,0,15,50,0,
16,0,2,0,0,0,
134,0,16,0,0,0,
0,0,2,64,0,0,
0,0,0,63,0,0,
0,63,0,0,0,0,
0,0,0,0,2,64,
0,0,0,0,0,63,
0,0,0,63,0,0,
0,0,0,0,0,0,
0,0,0,7,66,0,
16,0,2,0,0,0,
26,0,16,0,1,0,
0,0,26,0,16,0,
2,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,226,0,
16,0,1,0,0,0,
134,0,16,0,2,0,
0,0,54,121,16,0,
3,0,0,0,0,96,
16,0,3,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
114,0,16,0,2,0,
0,0,70,0,16,0,
2,0,0,0,70,126,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,124,0,0,5,
18,0,16,0,3,0,
0,0,10,0,16,0,
0,0,0,0,50,0,
0,15,50,0,16,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
2,64,0,0,0,0,
0,63,0,0,0,63,
0,0,0,0,0,0,
0,0,2,64,0,0,
0,0,0,63,0,0,
0,63,0,0,0,0,
0,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,70,126,16,0,
5,0,0,0,0,96,
16,0,5,0,0,0,
56,0,0,8,114,0,
16,0,0,0,0,0,
70,2,16,0,0,0,
0,0,246,143,32,0,
0,0,0,0,10,0,
0,0,124,0,0,5,
34,0,16,0,3,0,
0,0,10,0,16,0,
1,0,0,0,50,0,
0,9,18,0,16,0,
1,0,0,0,10,0,
16,0,1,0,0,0,
58,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,15,0,
0,7,130,0,16,0,
2,0,0,0,70,0,
16,0,3,0,0,0,
70,0,16,0,3,0,
0,0,75,0,0,5,
130,0,16,0,2,0,
0,0,58,0,16,0,
2,0,0,0,56,0,
0,7,130,0,16,0,
2,0,0,0,58,0,
16,0,0,0,0,0,
58,0,16,0,2,0,
0,0,47,0,0,6,
130,0,16,0,2,0,
0,0,58,0,16,128,
129,0,0,0,2,0,
0,0,56,0,0,7,
130,0,16,0,2,0,
0,0,58,0,16,0,
2,0,0,0,1,64,
0,0,102,102,38,64,
25,0,0,5,130,0,
16,0,2,0,0,0,
58,0,16,0,2,0,
0,0,50,0,0,10,
18,0,16,0,3,0,
0,0,58,0,16,128,
65,0,0,0,2,0,
0,0,1,64,0,0,
0,0,224,64,10,0,
16,0,1,0,0,0,
50,0,0,9,18,0,
16,0,1,0,0,0,
58,0,16,0,2,0,
0,0,1,64,0,0,
0,0,224,64,10,0,
16,0,1,0,0,0,
56,0,0,7,130,0,
16,0,2,0,0,0,
58,0,16,0,2,0,
0,0,1,64,0,0,
0,0,96,65,56,0,
0,7,34,0,16,0,
3,0,0,0,10,0,
16,0,3,0,0,0,
1,64,0,0,219,15,
73,64,0,0,0,8,
18,0,16,0,3,0,
0,0,10,0,16,128,
65,0,0,0,3,0,
0,0,10,0,16,0,
1,0,0,0,56,0,
0,7,18,0,16,0,
1,0,0,0,10,0,
16,0,1,0,0,0,
1,64,0,0,219,15,
73,64,77,0,0,7,
18,0,16,0,1,0,
0,0,0,208,0,0,
10,0,16,128,65,0,
0,0,1,0,0,0,
77,0,0,6,34,0,
16,0,3,0,0,0,
0,208,0,0,26,0,
16,0,3,0,0,0,
0,0,0,7,18,0,
16,0,1,0,0,0,
10,0,16,0,1,0,
0,0,26,0,16,0,
3,0,0,0,56,0,
0,7,18,0,16,0,
1,0,0,0,10,0,
16,0,1,0,0,0,
1,64,0,0,131,249,
34,62,50,0,0,9,
18,0,16,0,1,0,
0,0,10,0,16,0,
3,0,0,0,1,64,
0,0,0,0,0,63,
10,0,16,0,1,0,
0,0,14,0,0,7,
18,0,16,0,1,0,
0,0,10,0,16,0,
1,0,0,0,58,0,
16,0,2,0,0,0,
0,0,0,8,130,0,
16,0,2,0,0,0,
10,0,16,128,65,0,
0,0,1,0,0,0,
1,64,0,0,0,0,
128,63,124,0,0,5,
50,0,16,0,3,0,
0,0,70,16,16,0,
0,0,0,0,15,0,
0,7,18,0,16,0,
3,0,0,0,70,0,
16,0,3,0,0,0,
70,0,16,0,3,0,
0,0,75,0,0,5,
18,0,16,0,3,0,
0,0,10,0,16,0,
3,0,0,0,15,0,
0,7,130,0,16,0,
0,0,0,0,6,0,
16,0,3,0,0,0,
246,15,16,0,0,0,
0,0,0,0,0,7,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,1,64,
0,0,0,0,128,191,
56,32,0,7,130,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,1,64,0,0,
1,0,32,64,50,0,
0,9,18,0,16,0,
3,0,0,0,58,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
0,192,1,64,0,0,
0,0,64,64,56,0,
0,7,130,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,56,0,0,7,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,10,0,
16,0,3,0,0,0,
50,0,0,12,130,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,42,128,32,128,
65,0,0,0,0,0,
0,0,10,0,0,0,
42,128,32,0,0,0,
0,0,10,0,0,0,
0,0,0,8,18,0,
16,0,3,0,0,0,
58,0,16,128,65,0,
0,0,0,0,0,0,
1,64,0,0,0,0,
128,63,50,0,0,10,
130,0,16,0,0,0,
0,0,58,0,16,128,
65,0,0,0,0,0,
0,0,1,64,0,0,
0,0,0,63,1,64,
0,0,0,0,128,63,
0,0,0,8,34,0,
16,0,3,0,0,0,
10,0,16,128,65,0,
0,0,3,0,0,0,
1,64,0,0,0,0,
128,63,50,0,0,9,
130,0,16,0,2,0,
0,0,58,0,16,0,
2,0,0,0,26,0,
16,0,3,0,0,0,
10,0,16,0,3,0,
0,0,50,0,0,9,
18,0,16,0,1,0,
0,0,10,0,16,0,
1,0,0,0,26,0,
16,0,3,0,0,0,
10,0,16,0,3,0,
0,0,56,0,0,7,
114,0,16,0,2,0,
0,0,6,0,16,0,
1,0,0,0,70,2,
16,0,2,0,0,0,
56,0,0,7,114,0,
16,0,1,0,0,0,
150,7,16,0,1,0,
0,0,246,15,16,0,
2,0,0,0,56,0,
0,8,114,0,16,0,
1,0,0,0,70,2,
16,0,1,0,0,0,
86,133,32,0,0,0,
0,0,10,0,0,0,
52,0,0,7,114,0,
16,0,1,0,0,0,
70,2,16,0,2,0,
0,0,70,2,16,0,
1,0,0,0,14,0,
0,7,114,0,16,0,
1,0,0,0,70,2,
16,0,1,0,0,0,
246,15,16,0,0,0,
0,0,0,0,0,8,
130,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,64,42,128,
32,0,0,0,0,0,
11,0,0,0,0,0,
0,9,130,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
26,128,32,128,65,0,
0,0,0,0,0,0,
11,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,242,0,
16,0,2,0,0,0,
70,16,16,0,0,0,
0,0,70,126,16,0,
4,0,0,0,0,96,
16,0,4,0,0,0,
50,0,0,10,114,0,
16,0,2,0,0,0,
70,2,16,0,2,0,
0,0,246,15,16,0,
0,0,0,0,86,133,
32,0,0,0,0,0,
11,0,0,0,0,0,
0,10,114,0,16,0,
2,0,0,0,70,2,
16,0,2,0,0,0,
2,64,0,0,0,0,
128,191,0,0,128,191,
0,0,128,191,0,0,
0,0,50,0,0,13,
114,0,16,0,2,0,
0,0,6,128,32,0,
0,0,0,0,11,0,
0,0,70,2,16,0,
2,0,0,0,2,64,
0,0,0,0,128,63,
0,0,128,63,0,0,
128,63,0,0,0,0,
56,0,0,7,114,0,
16,0,1,0,0,0,
70,2,16,0,1,0,
0,0,70,2,16,0,
2,0,0,0,52,0,
0,7,114,0,16,0,
0,0,0,0,70,2,
16,0,0,0,0,0,
70,2,16,0,1,0,
0,0,54,0,0,5,
130,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,56,0,
0,7,242,32,16,0,
0,0,0,0,70,14,
16,0,0,0,0,0,
246,15,16,0,2,0,
0,0,62,0,0,1,
83,84,65,84,148,0,
0,0,117,0,0,0,
4,0,0,0,0,0,
0,0,2,0,0,0,
104,0,0,0,1,0,
0,0,1,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,2,0,
0,0,2,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0
};


static const uint32_t sVertexHash[] = 
{
0x4cbac5b3,0xa9f1ab30,0xff2a5ee8,0x52f5f73c,0x9bfa596b,0x4c0d82f4,
0xd74c81fc,0xb4a0a039
};


static const uint32_t sFragmentHash[] =
{
0xed636a40,0x216ea9b2,0xdd6e7766,0xe4ddff0d,0xe3fb49d6,0x4336a6da,
0x42a1b355,0x42fa7bb6
};

}

namespace RetroArch
{
class CrtShadersCathodeRetroCathodeRetroCrtRgbToCrt_noSignalShaderDef : public ShaderDef
{
public:
	CrtShadersCathodeRetroCathodeRetroCrtRgbToCrt_noSignalShaderDef() : ShaderDef{}
	{
		Name = "cathode-retro-crt-rgb-to-crt_no-signal";
		VertexByteCode = RetroArchCrtShadersCathodeRetroCathodeRetroCrtRgbToCrt_noSignalShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchCrtShadersCathodeRetroCathodeRetroCrtRgbToCrt_noSignalShaderDefs::sVertexByteCode);
		VertexHash = RetroArchCrtShadersCathodeRetroCathodeRetroCrtRgbToCrt_noSignalShaderDefs::sVertexHash;
		FragmentByteCode = RetroArchCrtShadersCathodeRetroCathodeRetroCrtRgbToCrt_noSignalShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchCrtShadersCathodeRetroCathodeRetroCrtRgbToCrt_noSignalShaderDefs::sFragmentByteCode);
		FragmentHash = RetroArchCrtShadersCathodeRetroCathodeRetroCrtRgbToCrt_noSignalShaderDefs::sFragmentHash;
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", 0, 64, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("cb_first_start", 0, 80, 4, 0.000000f, 100.000000f, 0.000000f, 1.000000f, "Color Burst Phase First Scanline"));
		Params.push_back(ShaderParam("cb_last_start", 0, 84, 4, 0.000000f, 100.000000f, 1.000000f, 1.000000f, "CB Phase Prev Frame First Scanline"));
		Params.push_back(ShaderParam("cb_phase_inc", 0, 88, 4, 0.000000f, 3.000000f, 1.666660f, 0.010000f, "Color Burst Phase Increment"));
		Params.push_back(ShaderParam("cb_samples", 0, 92, 4, 1.000000f, 100.000000f, 2.000000f, 1.000000f, "Samples Per Color Burst Cyle"));
		Params.push_back(ShaderParam("horz_track_scale", 0, 96, 4, 0.000000f, 3.000000f, 1.000000f, 0.050000f, "Horizontal Tracking Instability Scale"));
		Params.push_back(ShaderParam("minlum", 0, 100, 4, 0.000000f, 1.000000f, 1.000000f, 0.010000f, "Minimum Luminance"));
		Params.push_back(ShaderParam("colorpower", 0, 104, 4, 0.000000f, 2.000000f, 1.000000f, 0.010000f, "Color Power"));
		Params.push_back(ShaderParam("composite", 0, 108, 4, 0.000000f, 1.000000f, 1.000000f, 1.000000f, "Blend Chrome/Luma (aka Composite)"));
		Params.push_back(ShaderParam("sig_pad", 0, 112, 4, 0.000000f, 10.000000f, 0.000000f, 1.000000f, "Signal Padding at Edges"));
		Params.push_back(ShaderParam("ghost_vis", 0, 116, 4, 0.000000f, 1.000000f, 0.150000f, 0.010000f, "Ghost Visibility"));
		Params.push_back(ShaderParam("ghost_dist", 0, 120, 4, 0.000000f, 100.000000f, 1.000000f, 1.000000f, "Ghost Delay Cycles"));
		Params.push_back(ShaderParam("ghost_spread", 0, 124, 4, 0.000000f, 100.000000f, 1.000000f, 1.000000f, "Ghost Spread Cycles"));
		Params.push_back(ShaderParam("noise_strength", 0, 128, 4, 0.000000f, 1.000000f, 0.150000f, 0.010000f, "Artifact Noise Strength"));
		Params.push_back(ShaderParam("tint", 0, 132, 4, -1.000000f, 1.000000f, 0.000000f, 0.010000f, "Tint Knob Adjustment"));
		Params.push_back(ShaderParam("cat_sat", 0, 136, 4, 0.000000f, 2.000000f, 1.000000f, 0.010000f, "Saturation"));
		Params.push_back(ShaderParam("cat_bright", 0, 140, 4, 0.000000f, 2.000000f, 1.000000f, 0.010000f, "Brightness"));
		Params.push_back(ShaderParam("cat_white_lvl", 0, 144, 4, 0.000000f, 2.000000f, 1.000000f, 0.010000f, "White Level"));
		Params.push_back(ShaderParam("cat_black_lvl", 0, 148, 4, 0.000000f, 2.000000f, 0.000000f, 0.010000f, "Black Level"));
		Params.push_back(ShaderParam("temp_artifact_blend", 0, 152, 4, 0.000000f, 1.000000f, 0.000000f, 1.000000f, "Temporal Artifact Blending (Toggle)"));
		Params.push_back(ShaderParam("blurStrength", 0, 156, 4, -1.000000f, 1.000000f, -0.150000f, 0.010000f, "Sharpness"));
		Params.push_back(ShaderParam("stepSize", 0, 160, 4, 1.000000f, 100.000000f, 1.000000f, 1.000000f, "Texels Between Each Sample"));
		Params.push_back(ShaderParam("persistence", 0, 164, 4, 0.000000f, 1.000000f, 0.250000f, 0.010000f, "Phosphor Persistence"));
		Params.push_back(ShaderParam("scan_intens", 0, 168, 4, 0.000000f, 1.000000f, 0.400000f, 0.010000f, "Scanline Intensity"));
		Params.push_back(ShaderParam("diffusion", 0, 172, 4, 0.000000f, 1.000000f, 0.500000f, 0.010000f, "Diffusion Strength"));
		Params.push_back(ShaderParam("mask_intens", 0, 176, 4, 0.000000f, 1.000000f, 0.400000f, 0.010000f, "Mask Strength"));
		Params.push_back(ShaderParam("mask_depth", 0, 180, 4, 0.000000f, 1.000000f, 0.300000f, 0.010000f, "Mask Background Darkness"));
		Params.push_back(ShaderParam("cat_mask_picker", 0, 184, 4, 0.000000f, 3.000000f, 1.000000f, 1.000000f, "Mask (0=none, 1=aperture, 2=slot, 3=shadow)"));
		Params.push_back(ShaderParam("mask_scale", 0, 188, 4, 1.000000f, 200.000000f, 1.000000f, 1.000000f, "Mask Scale (2 or 3 for 4K)"));
		Params.push_back(ShaderParam("anim_noise", 0, 192, 4, 0.000000f, 1.000000f, 0.000000f, 1.000000f, "Animate Anti-Moire Noise"));
		Params.push_back(ShaderParam("div0", 0, 196, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, "--------Screen Settings--------"));
		Params.push_back(ShaderParam("div1", 0, 200, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, "---------TV Knob Settings---------"));
		Params.push_back(ShaderParam("div2", 0, 204, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, "---------Signal Parameters---------"));
		Params.push_back(ShaderParam("div3", 0, 208, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, "-------Artifact Settings-------"));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FrameCount", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FinalViewportSize", -1, 64, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("warpX", -1, 80, 4, 0.000000f, 1.000000f, 0.200000f, 0.010000f, "Barrel Distortion X"));
		Params.push_back(ShaderParam("warpY", -1, 84, 4, 0.000000f, 1.000000f, 0.100000f, 0.010000f, "Barrel Distortion Y"));
		Params.push_back(ShaderParam("corner", -1, 88, 4, 0.000000f, 1.000000f, 0.030000f, 0.010000f, "Rounded Corner Size"));
		Params.push_back(ShaderParam("noise_seed", -1, 92, 4, 179.000000f, 313.000000f, 247.000000f, 1.000000f, "Noise Seed"));
		Samplers.push_back(ShaderSampler("g_screenMaskTexture", 4));
		Samplers.push_back(ShaderSampler("g_diffusionTexture", 5));
		Samplers.push_back(ShaderSampler("g_sourceTexture", 2));
		Samplers.push_back(ShaderSampler("PassFeedback0", 3));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
