/*
ShaderGlass shader crt/shaders\fake-crt-geom-potato imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/crt/shaders/fake-crt-geom-potato.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

// Parameter lines go here:
// precalculated kaizer window filter
// vignette

*/

#pragma once

namespace RetroArchCrtShadersFakeCrtGeomPotatoShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,61,41,
239,168,8,128,118,81,
161,135,56,145,221,58,
171,247,1,0,0,0,
48,6,0,0,5,0,
0,0,52,0,0,0,
32,3,0,0,108,3,
0,0,220,3,0,0,
148,5,0,0,82,68,
69,70,228,2,0,0,
2,0,0,0,136,0,
0,0,2,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
188,2,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
124,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,128,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,85,66,
79,0,80,117,115,104,
0,171,171,171,124,0,
0,0,1,0,0,0,
184,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,128,0,
0,0,5,0,0,0,
24,1,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,224,0,
0,0,0,0,0,0,
64,0,0,0,2,0,
0,0,244,0,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,103,108,111,98,
97,108,95,77,86,80,
0,102,108,111,97,116,
52,120,52,0,2,0,
3,0,4,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
235,0,0,0,224,1,
0,0,0,0,0,0,
16,0,0,0,0,0,
0,0,252,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,32,2,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
252,1,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
52,2,0,0,32,0,
0,0,16,0,0,0,
2,0,0,0,252,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,70,2,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,96,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,132,2,0,0,
52,0,0,0,4,0,
0,0,2,0,0,0,
152,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
112,97,114,97,109,115,
95,83,111,117,114,99,
101,83,105,122,101,0,
102,108,111,97,116,52,
0,171,171,171,1,0,
3,0,1,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
242,1,0,0,112,97,
114,97,109,115,95,79,
114,105,103,105,110,97,
108,83,105,122,101,0,
112,97,114,97,109,115,
95,79,117,116,112,117,
116,83,105,122,101,0,
112,97,114,97,109,115,
95,70,114,97,109,101,
67,111,117,110,116,0,
100,119,111,114,100,0,
171,171,0,0,19,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,88,2,
0,0,112,97,114,97,
109,115,95,83,73,90,
69,0,102,108,111,97,
116,0,171,171,0,0,
3,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
144,2,0,0,77,105,
99,114,111,115,111,102,
116,32,40,82,41,32,
72,76,83,76,32,83,
104,97,100,101,114,32,
67,111,109,112,105,108,
101,114,32,49,48,46,
49,0,73,83,71,78,
68,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,15,0,0,
56,0,0,0,1,0,
0,0,0,0,0,0,
3,0,0,0,1,0,
0,0,3,3,0,0,
84,69,88,67,79,79,
82,68,0,171,171,171,
79,83,71,78,104,0,
0,0,3,0,0,0,
8,0,0,0,80,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
3,12,0,0,80,0,
0,0,2,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
4,11,0,0,89,0,
0,0,0,0,0,0,
1,0,0,0,3,0,
0,0,1,0,0,0,
15,0,0,0,84,69,
88,67,79,79,82,68,
0,83,86,95,80,111,
115,105,116,105,111,110,
0,171,171,171,83,72,
69,88,176,1,0,0,
80,0,1,0,108,0,
0,0,106,8,0,1,
89,0,0,4,70,142,
32,0,0,0,0,0,
4,0,0,0,89,0,
0,4,70,142,32,0,
1,0,0,0,4,0,
0,0,95,0,0,3,
242,16,16,0,0,0,
0,0,95,0,0,3,
50,16,16,0,1,0,
0,0,101,0,0,3,
50,32,16,0,0,0,
0,0,101,0,0,3,
66,32,16,0,0,0,
0,0,103,0,0,4,
242,32,16,0,1,0,
0,0,1,0,0,0,
104,0,0,2,1,0,
0,0,56,0,0,7,
18,0,16,0,0,0,
0,0,10,16,16,0,
1,0,0,0,1,64,
0,0,71,3,128,63,
56,0,0,8,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,10,128,32,0,
1,0,0,0,2,0,
0,0,56,0,0,7,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,1,64,
0,0,219,15,201,64,
14,0,0,8,66,32,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,26,128,32,0,
1,0,0,0,3,0,
0,0,56,0,0,10,
50,32,16,0,0,0,
0,0,70,16,16,0,
1,0,0,0,2,64,
0,0,71,3,128,63,
71,3,128,63,0,0,
0,0,0,0,0,0,
56,0,0,8,242,0,
16,0,0,0,0,0,
86,21,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,1,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,6,16,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
0,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,0,
16,0,0,0,0,0,
166,26,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,2,0,
0,0,70,14,16,0,
0,0,0,0,50,0,
0,10,242,32,16,0,
1,0,0,0,246,31,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,3,0,0,0,
70,14,16,0,0,0,
0,0,62,0,0,1,
83,84,65,84,148,0,
0,0,10,0,0,0,
1,0,0,0,0,0,
0,0,5,0,0,0,
9,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,243,23,
94,143,131,67,163,42,
171,247,91,174,71,27,
232,121,1,0,0,0,
184,10,0,0,5,0,
0,0,52,0,0,0,
216,2,0,0,36,3,
0,0,88,3,0,0,
28,10,0,0,82,68,
69,70,156,2,0,0,
1,0,0,0,184,0,
0,0,3,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
116,2,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
1,0,0,0,1,0,
0,0,172,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,1,0,
0,0,1,0,0,0,
13,0,0,0,179,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,80,
117,115,104,0,179,0,
0,0,5,0,0,0,
208,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,152,1,
0,0,0,0,0,0,
16,0,0,0,2,0,
0,0,180,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,216,1,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
180,1,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
236,1,0,0,32,0,
0,0,16,0,0,0,
0,0,0,0,180,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,254,1,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,24,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,60,2,0,0,
52,0,0,0,4,0,
0,0,0,0,0,0,
80,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
112,97,114,97,109,115,
95,83,111,117,114,99,
101,83,105,122,101,0,
102,108,111,97,116,52,
0,171,171,171,1,0,
3,0,1,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
170,1,0,0,112,97,
114,97,109,115,95,79,
114,105,103,105,110,97,
108,83,105,122,101,0,
112,97,114,97,109,115,
95,79,117,116,112,117,
116,83,105,122,101,0,
112,97,114,97,109,115,
95,70,114,97,109,101,
67,111,117,110,116,0,
100,119,111,114,100,0,
171,171,0,0,19,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,16,2,
0,0,112,97,114,97,
109,115,95,83,73,90,
69,0,102,108,111,97,
116,0,171,171,0,0,
3,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
72,2,0,0,77,105,
99,114,111,115,111,102,
116,32,40,82,41,32,
72,76,83,76,32,83,
104,97,100,101,114,32,
67,111,109,112,105,108,
101,114,32,49,48,46,
49,0,73,83,71,78,
68,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,3,0,0,
56,0,0,0,2,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,4,4,0,0,
84,69,88,67,79,79,
82,68,0,171,171,171,
79,83,71,78,44,0,
0,0,1,0,0,0,
8,0,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
15,0,0,0,83,86,
95,84,97,114,103,101,
116,0,171,171,83,72,
69,88,188,6,0,0,
80,0,0,0,175,1,
0,0,106,8,0,1,
89,0,0,4,70,142,
32,0,1,0,0,0,
1,0,0,0,90,0,
0,3,0,96,16,0,
1,0,0,0,88,24,
0,4,0,112,16,0,
1,0,0,0,85,85,
0,0,98,16,0,3,
50,16,16,0,0,0,
0,0,98,16,0,3,
66,16,16,0,0,0,
0,0,101,0,0,3,
242,32,16,0,0,0,
0,0,104,0,0,2,
4,0,0,0,50,0,
0,15,50,0,16,0,
0,0,0,0,70,16,
16,0,0,0,0,0,
2,64,0,0,0,0,
0,64,0,0,0,64,
0,0,0,0,0,0,
0,0,2,64,0,0,
0,0,128,191,0,0,
128,191,0,0,0,0,
0,0,0,0,56,0,
0,7,194,0,16,0,
0,0,0,0,86,1,
16,0,0,0,0,0,
86,1,16,0,0,0,
0,0,50,0,0,15,
194,0,16,0,0,0,
0,0,166,14,16,0,
0,0,0,0,2,64,
0,0,0,0,0,0,
0,0,0,0,143,194,
245,60,10,215,35,61,
2,64,0,0,0,0,
0,0,0,0,0,0,
0,0,128,63,0,0,
128,63,56,0,0,7,
50,0,16,0,0,0,
0,0,230,10,16,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
50,0,0,15,50,0,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,2,64,0,0,
0,0,0,63,0,0,
0,63,0,0,0,0,
0,0,0,0,2,64,
0,0,0,0,0,63,
0,0,0,63,0,0,
0,0,0,0,0,0,
50,0,0,10,66,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,26,128,32,0,
1,0,0,0,0,0,
0,0,1,64,0,0,
0,0,128,190,56,0,
0,7,66,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
1,64,0,0,219,15,
201,64,77,0,0,6,
66,0,16,0,0,0,
0,0,0,208,0,0,
42,0,16,0,0,0,
0,0,0,0,0,7,
130,0,16,0,0,0,
0,0,10,16,16,0,
0,0,0,0,1,64,
0,0,0,0,0,191,
56,0,0,7,18,0,
16,0,1,0,0,0,
58,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,50,0,
0,9,130,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,62,50,0,
0,10,66,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,10,0,16,128,
65,0,0,0,1,0,
0,0,0,0,0,7,
66,0,16,0,0,0,
0,0,42,0,16,0,
0,0,0,0,1,64,
0,0,0,0,64,63,
56,0,0,11,50,0,
16,0,1,0,0,0,
2,64,0,0,0,0,
64,63,0,0,0,63,
0,0,0,0,0,0,
0,0,230,138,32,0,
1,0,0,0,0,0,
0,0,54,0,0,6,
146,0,16,0,1,0,
0,0,6,4,16,128,
65,0,0,0,1,0,
0,0,54,0,0,8,
98,0,16,0,1,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
0,128,0,0,0,128,
0,0,0,0,0,0,
0,7,242,0,16,0,
1,0,0,0,70,4,
16,0,0,0,0,0,
70,14,16,0,1,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,114,0,16,0,
2,0,0,0,230,10,
16,0,1,0,0,0,
70,126,16,0,1,0,
0,0,0,96,16,0,
1,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,1,0,0,0,
70,0,16,0,1,0,
0,0,70,126,16,0,
1,0,0,0,0,96,
16,0,1,0,0,0,
56,0,0,10,114,0,
16,0,2,0,0,0,
70,2,16,0,2,0,
0,0,2,64,0,0,
71,3,136,190,71,3,
136,190,71,3,136,190,
0,0,0,0,50,0,
0,12,114,0,16,0,
1,0,0,0,70,2,
16,0,1,0,0,0,
2,64,0,0,71,3,
136,190,71,3,136,190,
71,3,136,190,0,0,
0,0,70,2,16,0,
2,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,2,0,0,0,
70,0,16,0,0,0,
0,0,70,126,16,0,
1,0,0,0,0,96,
16,0,1,0,0,0,
50,0,0,12,114,0,
16,0,1,0,0,0,
70,2,16,0,2,0,
0,0,2,64,0,0,
163,1,196,63,163,1,
196,63,163,1,196,63,
0,0,0,0,70,2,
16,0,1,0,0,0,
56,0,0,7,114,0,
16,0,2,0,0,0,
166,10,16,0,0,0,
0,0,70,2,16,0,
1,0,0,0,77,0,
0,6,66,0,16,0,
0,0,0,0,0,208,
0,0,42,16,16,0,
0,0,0,0,50,0,
0,9,66,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
1,64,0,0,154,153,
25,62,1,64,0,0,
154,153,89,63,50,0,
0,10,114,0,16,0,
3,0,0,0,70,2,
16,128,65,0,0,0,
2,0,0,0,166,10,
16,0,0,0,0,0,
70,2,16,0,1,0,
0,0,56,0,0,7,
114,0,16,0,2,0,
0,0,166,10,16,0,
0,0,0,0,70,2,
16,0,2,0,0,0,
16,0,0,10,66,0,
16,0,0,0,0,0,
2,64,0,0,154,153,
25,62,154,153,25,62,
154,153,25,62,0,0,
0,0,70,2,16,0,
1,0,0,0,50,0,
0,9,114,0,16,0,
1,0,0,0,166,10,
16,0,0,0,0,0,
70,2,16,0,3,0,
0,0,70,2,16,0,
2,0,0,0,50,0,
0,9,66,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
128,190,1,64,0,0,
0,0,160,63,56,0,
0,10,114,0,16,0,
2,0,0,0,70,2,
16,0,1,0,0,0,
2,64,0,0,0,0,
128,63,102,102,102,63,
51,51,147,63,0,0,
0,0,16,0,0,10,
130,0,16,0,0,0,
0,0,2,64,0,0,
225,122,148,62,154,153,
25,63,174,71,225,61,
0,0,0,0,70,2,
16,0,2,0,0,0,
50,0,0,13,114,0,
16,0,1,0,0,0,
70,2,16,0,1,0,
0,0,2,64,0,0,
0,0,128,63,102,102,
102,63,51,51,147,63,
0,0,0,0,246,15,
16,128,65,0,0,0,
0,0,0,0,50,0,
0,12,114,0,16,0,
1,0,0,0,70,2,
16,0,1,0,0,0,
2,64,0,0,205,204,
140,63,205,204,140,63,
205,204,140,63,0,0,
0,0,246,15,16,0,
0,0,0,0,56,0,
0,7,114,0,16,0,
1,0,0,0,166,10,
16,0,0,0,0,0,
70,2,16,0,1,0,
0,0,0,0,0,11,
194,0,16,0,0,0,
0,0,6,4,16,128,
65,0,0,0,0,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
0,0,0,0,128,63,
0,0,128,63,51,0,
0,7,50,0,16,0,
0,0,0,0,230,10,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,14,0,0,7,
18,0,16,0,0,0,
0,0,1,64,0,0,
23,183,81,57,10,0,
16,0,0,0,0,0,
49,0,0,7,34,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,49,0,
0,7,18,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
1,64,0,0,23,183,
209,56,55,0,0,9,
18,0,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
1,64,0,0,255,255,
255,255,55,0,0,12,
114,32,16,0,0,0,
0,0,6,0,16,0,
0,0,0,0,2,64,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
70,2,16,0,1,0,
0,0,54,0,0,5,
130,32,16,0,0,0,
0,0,1,64,0,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,45,0,
0,0,4,0,0,0,
0,0,0,0,3,0,
0,0,37,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
2,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};

}

namespace RetroArch
{
class CrtShadersFakeCrtGeomPotatoShaderDef : public ShaderDef
{
public:
	CrtShadersFakeCrtGeomPotatoShaderDef() : ShaderDef{}
	{
		Name = "fake-crt-geom-potato";
		VertexByteCode = RetroArchCrtShadersFakeCrtGeomPotatoShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchCrtShadersFakeCrtGeomPotatoShaderDefs::sVertexByteCode);
		FragmentByteCode = RetroArchCrtShadersFakeCrtGeomPotatoShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchCrtShadersFakeCrtGeomPotatoShaderDefs::sFragmentByteCode);
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FrameCount", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SIZE", -1, 52, 4, 2.000000f, 3.000000f, 2.000000f, 1.000000f, "Mask Type"));
		Samplers.push_back(ShaderSampler("Source", 1));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
