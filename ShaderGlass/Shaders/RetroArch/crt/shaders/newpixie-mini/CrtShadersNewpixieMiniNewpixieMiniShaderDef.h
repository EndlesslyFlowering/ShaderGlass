/*
ShaderGlass shader crt/shaders/newpixie-mini\newpixie-mini imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/crt/shaders/newpixie-mini/newpixie-mini.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

// newpixie CRT
// by Mattias Gustavsson
// adapted for slang by hunterk
//    uv.x *= 0.75;
 Curve 
 Main color, Bleed 
 Level adjustment (curves) 
 Vignette. Increase the 4.0 factor for greater burnout effect in the center of the screen. 
 Compensate the lack of vignette, in case we decide to comment it out for performance reasons 
//col *= 0.6;
 Scanlines 
 Vertical lines (shadow mask) 
 Tone map 

*/

#pragma once

namespace RetroArchCrtShadersNewpixieMiniNewpixieMiniShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,142,95,
96,113,171,0,161,93,
80,104,187,248,168,16,
35,238,1,0,0,0,
172,3,0,0,5,0,
0,0,52,0,0,0,
60,1,0,0,136,1,
0,0,224,1,0,0,
16,3,0,0,82,68,
69,70,0,1,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
216,0,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,1,0,
0,0,120,0,0,0,
64,0,0,0,0,0,
0,0,0,0,0,0,
160,0,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,180,0,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,171,0,0,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
80,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
65,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,40,1,
0,0,80,0,1,0,
74,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
95,0,0,3,242,16,
16,0,0,0,0,0,
95,0,0,3,50,16,
16,0,1,0,0,0,
101,0,0,3,50,32,
16,0,0,0,0,0,
103,0,0,4,242,32,
16,0,1,0,0,0,
1,0,0,0,104,0,
0,2,1,0,0,0,
54,0,0,5,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,0,0,0,8,
18,0,16,0,0,0,
0,0,26,16,16,128,
65,0,0,0,0,0,
0,0,1,64,0,0,
0,0,128,63,56,0,
0,8,242,0,16,0,
0,0,0,0,6,0,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,1,0,0,0,
50,0,0,10,242,0,
16,0,0,0,0,0,
6,16,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,0,0,
0,0,70,14,16,0,
0,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,166,26,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,2,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,32,16,0,1,0,
0,0,246,31,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
3,0,0,0,70,14,
16,0,0,0,0,0,
62,0,0,1,83,84,
65,84,148,0,0,0,
7,0,0,0,1,0,
0,0,0,0,0,0,
4,0,0,0,5,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,33,82,
178,188,16,95,101,127,
126,55,171,65,52,255,
23,154,1,0,0,0,
68,14,0,0,5,0,
0,0,52,0,0,0,
116,2,0,0,168,2,
0,0,220,2,0,0,
168,13,0,0,82,68,
69,70,56,2,0,0,
1,0,0,0,184,0,
0,0,3,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
16,2,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,1,0,
0,0,172,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,3,0,
0,0,1,0,0,0,
13,0,0,0,179,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,80,
117,115,104,0,179,0,
0,0,4,0,0,0,
208,0,0,0,48,0,
0,0,0,0,0,0,
0,0,0,0,112,1,
0,0,0,0,0,0,
16,0,0,0,0,0,
0,0,140,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,176,1,0,0,
16,0,0,0,16,0,
0,0,2,0,0,0,
140,1,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
194,1,0,0,32,0,
0,0,4,0,0,0,
2,0,0,0,220,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,0,2,
0,0,36,0,0,0,
4,0,0,0,2,0,
0,0,220,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,112,97,114,97,
109,115,95,83,111,117,
114,99,101,83,105,122,
101,0,102,108,111,97,
116,52,0,171,171,171,
1,0,3,0,1,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,130,1,0,0,
112,97,114,97,109,115,
95,79,117,116,112,117,
116,83,105,122,101,0,
112,97,114,97,109,115,
95,99,117,114,118,97,
116,117,114,101,0,102,
108,111,97,116,0,171,
171,171,0,0,3,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,211,1,
0,0,112,97,114,97,
109,115,95,118,105,103,
110,101,116,116,101,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,44,0,0,0,
1,0,0,0,8,0,
0,0,32,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,0,0,0,
83,86,95,84,97,114,
103,101,116,0,171,171,
83,72,69,88,196,10,
0,0,80,0,0,0,
177,2,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,1,0,
0,0,3,0,0,0,
90,0,0,3,0,96,
16,0,3,0,0,0,
88,24,0,4,0,112,
16,0,3,0,0,0,
85,85,0,0,98,16,
0,3,50,16,16,0,
0,0,0,0,101,0,
0,3,242,32,16,0,
0,0,0,0,104,0,
0,2,4,0,0,0,
0,0,0,10,50,0,
16,0,0,0,0,0,
70,16,16,0,0,0,
0,0,2,64,0,0,
0,0,0,191,0,0,
0,191,0,0,0,0,
0,0,0,0,56,0,
0,8,50,0,16,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
6,128,32,0,1,0,
0,0,2,0,0,0,
56,0,0,10,50,0,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,2,64,0,0,
205,204,108,63,246,40,
140,63,0,0,0,0,
0,0,0,0,56,0,
0,8,66,0,16,0,
0,0,0,0,26,0,
16,128,129,0,0,0,
0,0,0,0,1,64,
0,0,0,0,128,62,
50,0,0,9,66,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,42,0,16,0,
0,0,0,0,1,64,
0,0,0,0,128,63,
56,0,0,7,18,0,
16,0,1,0,0,0,
42,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,56,0,
0,8,18,0,16,0,
0,0,0,0,10,0,
16,128,129,0,0,0,
1,0,0,0,1,64,
0,0,171,170,170,62,
50,0,0,9,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,1,64,
0,0,0,0,128,63,
56,0,0,7,34,0,
16,0,1,0,0,0,
10,0,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,14,0,
0,8,50,0,16,0,
0,0,0,0,70,0,
16,0,1,0,0,0,
6,128,32,0,1,0,
0,0,2,0,0,0,
0,0,0,10,50,0,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,2,64,0,0,
0,0,0,63,0,0,
0,63,0,0,0,0,
0,0,0,0,50,0,
0,15,50,0,16,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
2,64,0,0,31,133,
107,63,31,133,107,63,
0,0,0,0,0,0,
0,0,2,64,0,0,
10,215,35,61,10,215,
35,61,0,0,0,0,
0,0,0,0,0,0,
0,8,194,0,16,0,
0,0,0,0,6,4,
16,128,65,0,0,0,
0,0,0,0,6,20,
16,0,0,0,0,0,
50,0,0,12,50,0,
16,0,0,0,0,0,
230,10,16,0,0,0,
0,0,2,64,0,0,
205,204,204,62,205,204,
204,62,0,0,0,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
50,0,0,15,242,0,
16,0,1,0,0,0,
70,5,16,0,0,0,
0,0,2,64,0,0,
145,237,140,63,145,237,
140,63,145,237,140,63,
145,237,140,63,2,64,
0,0,93,143,66,189,
25,115,87,189,170,241,
82,189,243,65,79,189,
56,0,0,8,194,0,
16,0,0,0,0,0,
86,17,16,0,0,0,
0,0,86,129,32,0,
1,0,0,0,1,0,
0,0,56,0,0,10,
50,0,16,0,2,0,
0,0,230,10,16,0,
0,0,0,0,2,64,
0,0,0,0,192,63,
171,170,170,62,0,0,
0,0,0,0,0,0,
77,0,0,6,66,0,
16,0,0,0,0,0,
0,208,0,0,10,0,
16,0,2,0,0,0,
65,0,0,5,18,0,
16,0,2,0,0,0,
26,0,16,0,2,0,
0,0,50,0,0,10,
130,0,16,0,0,0,
0,0,10,0,16,128,
65,0,0,0,2,0,
0,0,1,64,0,0,
0,0,64,64,58,0,
16,0,0,0,0,0,
56,32,0,7,130,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,63,50,0,
0,10,130,0,16,0,
0,0,0,0,58,0,
16,128,65,0,0,0,
0,0,0,0,1,64,
0,0,31,133,107,62,
1,64,0,0,0,0,
128,63,14,0,0,8,
66,0,16,0,0,0,
0,0,42,0,16,0,
0,0,0,0,10,128,
32,0,1,0,0,0,
1,0,0,0,50,0,
0,9,18,0,16,0,
1,0,0,0,42,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
128,62,10,0,16,0,
1,0,0,0,50,0,
0,15,50,0,16,0,
2,0,0,0,70,0,
16,0,1,0,0,0,
2,64,0,0,51,51,
131,63,31,133,107,63,
0,0,0,0,0,0,
0,0,2,64,0,0,
205,204,76,188,10,215,
35,61,0,0,0,0,
0,0,0,0,0,0,
0,10,50,0,16,0,
1,0,0,0,6,0,
16,0,1,0,0,0,
2,64,0,0,250,237,
107,58,166,155,196,186,
0,0,0,0,0,0,
0,0,0,0,0,8,
66,0,16,0,2,0,
0,0,26,0,16,128,
65,0,0,0,2,0,
0,0,1,64,0,0,
0,0,128,63,69,0,
0,139,194,0,0,128,
67,85,21,0,66,0,
16,0,0,0,0,0,
134,0,16,0,2,0,
0,0,134,125,16,0,
3,0,0,0,0,96,
16,0,3,0,0,0,
47,0,0,6,66,0,
16,0,0,0,0,0,
42,0,16,128,129,0,
0,0,0,0,0,0,
56,0,0,7,66,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,1,64,0,0,
205,204,12,64,25,0,
0,5,66,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
50,0,0,9,34,0,
16,0,2,0,0,0,
42,0,16,0,0,0,
0,0,1,64,0,0,
0,0,160,63,1,64,
0,0,10,215,163,60,
50,0,0,15,50,0,
16,0,3,0,0,0,
198,0,16,0,1,0,
0,0,2,64,0,0,
51,51,131,63,31,133,
107,63,0,0,0,0,
0,0,0,0,2,64,
0,0,205,204,76,188,
10,215,35,61,0,0,
0,0,0,0,0,0,
50,0,0,15,50,0,
16,0,1,0,0,0,
150,5,16,0,1,0,
0,0,2,64,0,0,
51,51,131,63,31,133,
107,63,0,0,0,0,
0,0,0,0,2,64,
0,0,205,204,76,188,
10,215,35,61,0,0,
0,0,0,0,0,0,
0,0,0,8,66,0,
16,0,3,0,0,0,
26,0,16,128,65,0,
0,0,3,0,0,0,
1,64,0,0,0,0,
128,63,69,0,0,139,
194,0,0,128,67,85,
21,0,66,0,16,0,
0,0,0,0,134,0,
16,0,3,0,0,0,
150,124,16,0,3,0,
0,0,0,96,16,0,
3,0,0,0,47,0,
0,6,66,0,16,0,
0,0,0,0,42,0,
16,128,129,0,0,0,
0,0,0,0,56,0,
0,7,66,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
1,64,0,0,205,204,
12,64,25,0,0,5,
66,0,16,0,0,0,
0,0,42,0,16,0,
0,0,0,0,50,0,
0,9,18,0,16,0,
2,0,0,0,42,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
160,63,1,64,0,0,
10,215,163,60,0,0,
0,8,66,0,16,0,
1,0,0,0,26,0,
16,128,65,0,0,0,
1,0,0,0,1,64,
0,0,0,0,128,63,
69,0,0,139,194,0,
0,128,67,85,21,0,
66,0,16,0,0,0,
0,0,134,0,16,0,
1,0,0,0,70,126,
16,0,3,0,0,0,
0,96,16,0,3,0,
0,0,47,0,0,6,
66,0,16,0,0,0,
0,0,42,0,16,128,
129,0,0,0,0,0,
0,0,56,0,0,7,
66,0,16,0,0,0,
0,0,42,0,16,0,
0,0,0,0,1,64,
0,0,205,204,12,64,
25,0,0,5,66,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,50,0,0,9,
66,0,16,0,2,0,
0,0,42,0,16,0,
0,0,0,0,1,64,
0,0,0,0,160,63,
1,64,0,0,10,215,
163,60,56,0,0,7,
114,0,16,0,1,0,
0,0,70,2,16,0,
2,0,0,0,70,2,
16,0,2,0,0,0,
56,0,0,7,114,0,
16,0,1,0,0,0,
70,2,16,0,1,0,
0,0,70,2,16,0,
1,0,0,0,50,0,
0,9,114,0,16,0,
3,0,0,0,70,2,
16,0,2,0,0,0,
70,2,16,0,2,0,
0,0,70,2,16,0,
2,0,0,0,50,0,
0,9,114,0,16,0,
1,0,0,0,70,2,
16,0,1,0,0,0,
70,2,16,0,2,0,
0,0,70,2,16,0,
3,0,0,0,51,0,
0,10,114,0,16,0,
1,0,0,0,70,2,
16,0,1,0,0,0,
2,64,0,0,0,0,
32,65,0,0,32,65,
0,0,32,65,0,0,
0,0,56,0,0,7,
66,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
0,0,0,11,50,0,
16,0,2,0,0,0,
70,0,16,128,65,0,
0,0,0,0,0,0,
2,64,0,0,0,0,
128,63,0,0,128,63,
0,0,0,0,0,0,
0,0,56,0,0,8,
18,0,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,26,128,
32,0,1,0,0,0,
1,0,0,0,56,0,
0,10,82,0,16,0,
0,0,0,0,6,2,
16,0,0,0,0,0,
2,64,0,0,0,0,
192,63,0,0,0,0,
0,0,128,64,0,0,
0,0,77,0,0,6,
18,0,16,0,0,0,
0,0,0,208,0,0,
10,0,16,0,0,0,
0,0,50,0,0,9,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,1,64,
0,0,236,81,56,62,
1,64,0,0,51,51,
179,62,47,0,0,5,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,56,0,
0,7,18,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
1,64,0,0,102,102,
102,63,25,0,0,5,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,56,0,
0,7,34,0,16,0,
0,0,0,0,10,0,
16,0,2,0,0,0,
42,0,16,0,0,0,
0,0,50,0,0,11,
66,0,16,0,0,0,
0,0,26,128,32,128,
65,0,0,0,1,0,
0,0,2,0,0,0,
1,64,0,0,164,112,
125,63,1,64,0,0,
0,0,128,63,50,0,
0,9,34,0,16,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
26,0,16,0,2,0,
0,0,42,0,16,0,
0,0,0,0,68,0,
0,5,34,0,16,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
14,0,0,10,34,0,
16,0,0,0,0,0,
2,64,0,0,0,0,
128,63,0,0,128,63,
0,0,128,63,0,0,
128,63,26,0,16,0,
0,0,0,0,56,0,
0,7,34,0,16,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
1,64,0,0,102,102,
166,63,56,0,0,7,
114,0,16,0,1,0,
0,0,86,5,16,0,
0,0,0,0,70,2,
16,0,1,0,0,0,
56,0,0,7,114,0,
16,0,0,0,0,0,
6,0,16,0,0,0,
0,0,70,2,16,0,
1,0,0,0,50,0,
0,12,114,0,16,0,
0,0,0,0,70,2,
16,0,0,0,0,0,
246,15,16,0,0,0,
0,0,2,64,0,0,
111,18,131,187,111,18,
131,187,111,18,131,187,
0,0,0,0,52,0,
0,10,114,0,16,0,
0,0,0,0,70,2,
16,0,0,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,50,0,0,15,
114,0,16,0,1,0,
0,0,70,2,16,0,
0,0,0,0,2,64,
0,0,102,102,198,64,
102,102,198,64,102,102,
198,64,0,0,0,0,
2,64,0,0,0,0,
0,63,0,0,0,63,
0,0,0,63,0,0,
0,0,56,0,0,7,
114,0,16,0,1,0,
0,0,70,2,16,0,
0,0,0,0,70,2,
16,0,1,0,0,0,
50,0,0,15,114,0,
16,0,2,0,0,0,
70,2,16,0,0,0,
0,0,2,64,0,0,
102,102,198,64,102,102,
198,64,102,102,198,64,
0,0,0,0,2,64,
0,0,154,153,217,63,
154,153,217,63,154,153,
217,63,0,0,0,0,
50,0,0,12,114,0,
16,0,0,0,0,0,
70,2,16,0,0,0,
0,0,70,2,16,0,
2,0,0,0,2,64,
0,0,143,194,117,61,
143,194,117,61,143,194,
117,61,0,0,0,0,
14,0,0,7,114,32,
16,0,0,0,0,0,
70,2,16,0,1,0,
0,0,70,2,16,0,
0,0,0,0,54,0,
0,5,130,32,16,0,
0,0,0,0,1,64,
0,0,0,0,128,63,
62,0,0,1,83,84,
65,84,148,0,0,0,
77,0,0,0,4,0,
0,0,0,0,0,0,
2,0,0,0,72,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};


static const uint32_t sVertexHash[] = 
{
0xc7345743,0x54b7a855,0x97458168,0xf556d27b,0x7a4260df,0x3cfd5ffe,
0xde9c5358,0x9014fe6f
};


static const uint32_t sFragmentHash[] =
{
0x3ac9077a,0x241130f1,0xc974aa37,0x953d1baa,0x617be2cf,0x192d0dcf,
0xe6496a56,0x6a58a3b8
};

}

namespace RetroArch
{
class CrtShadersNewpixieMiniNewpixieMiniShaderDef : public ShaderDef
{
public:
	CrtShadersNewpixieMiniNewpixieMiniShaderDef() : ShaderDef{}
	{
		Name = "newpixie-mini";
		VertexByteCode = RetroArchCrtShadersNewpixieMiniNewpixieMiniShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchCrtShadersNewpixieMiniNewpixieMiniShaderDefs::sVertexByteCode);
		VertexHash = RetroArchCrtShadersNewpixieMiniNewpixieMiniShaderDefs::sVertexHash;
		FragmentByteCode = RetroArchCrtShadersNewpixieMiniNewpixieMiniShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchCrtShadersNewpixieMiniNewpixieMiniShaderDefs::sFragmentByteCode);
		FragmentHash = RetroArchCrtShadersNewpixieMiniNewpixieMiniShaderDefs::sFragmentHash;
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("curvature", -1, 32, 4, 0.000100f, 4.000000f, 2.000000f, 0.250000f, "Curvature"));
		Params.push_back(ShaderParam("vignette", -1, 36, 4, 0.000000f, 1.000000f, 0.500000f, 0.050000f, "Vignette"));
		Samplers.push_back(ShaderSampler("Source", 3));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
