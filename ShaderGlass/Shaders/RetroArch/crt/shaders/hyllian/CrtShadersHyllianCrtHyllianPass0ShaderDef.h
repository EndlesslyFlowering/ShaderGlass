/*
ShaderGlass shader crt/shaders/hyllian\crt-hyllian-pass0 imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/crt/shaders/hyllian/crt-hyllian-pass0.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

 Curvature code. Credits to torridgristle! 
// Radius of Convergence = 1.0 - SQRT_OF_2 / 2
// Horizontal cubic filter.
// Some known filters use these values:
//    B = 0.5, C = 0.0        =>  A sharp almost gaussian filter.
//    B = 0.0, C = 0.0        =>  Hermite cubic filter.
//    B = 1.0, C = 0.0        =>  Cubic B-Spline filter.
//    B = 0.0, C = 0.5        =>  Catmull-Rom Spline filter.
//    B = C = 1.0/3.0         =>  Mitchell-Netravali cubic filter.
//    B = 0.3782, C = 0.3109  =>  Robidoux filter.
//    B = 0.2620, C = 0.3690  =>  Robidoux Sharp filter.
// For more info, see: http://www.imagemagick.org/Usage/img_diagrams/cubic_survey.gif
// Anti-ringing
//  Get min/max samples

*/

#pragma once

namespace RetroArchCrtShadersHyllianCrtHyllianPass0ShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,121,167,
99,90,66,73,171,198,
232,30,169,74,226,79,
201,125,1,0,0,0,
128,4,0,0,5,0,
0,0,52,0,0,0,
28,2,0,0,104,2,
0,0,192,2,0,0,
228,3,0,0,82,68,
69,70,224,1,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
182,1,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,4,0,
0,0,120,0,0,0,
112,0,0,0,0,0,
0,0,0,0,0,0,
24,1,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,44,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,80,1,
0,0,64,0,0,0,
16,0,0,0,0,0,
0,0,108,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,144,1,0,0,
80,0,0,0,16,0,
0,0,0,0,0,0,
108,1,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
164,1,0,0,96,0,
0,0,16,0,0,0,
0,0,0,0,108,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,35,1,0,0,
103,108,111,98,97,108,
95,79,117,116,112,117,
116,83,105,122,101,0,
102,108,111,97,116,52,
0,171,171,171,1,0,
3,0,1,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
98,1,0,0,103,108,
111,98,97,108,95,79,
114,105,103,105,110,97,
108,83,105,122,101,0,
103,108,111,98,97,108,
95,83,111,117,114,99,
101,83,105,122,101,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,171,171,
73,83,71,78,68,0,
0,0,2,0,0,0,
8,0,0,0,56,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
15,15,0,0,56,0,
0,0,1,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
3,3,0,0,84,69,
88,67,79,79,82,68,
0,171,171,171,79,83,
71,78,80,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,12,
0,0,65,0,0,0,
0,0,0,0,1,0,
0,0,3,0,0,0,
1,0,0,0,15,0,
0,0,84,69,88,67,
79,79,82,68,0,83,
86,95,80,111,115,105,
116,105,111,110,0,171,
171,171,83,72,69,88,
28,1,0,0,80,0,
1,0,71,0,0,0,
106,8,0,1,89,0,
0,4,70,142,32,0,
0,0,0,0,4,0,
0,0,95,0,0,3,
242,16,16,0,0,0,
0,0,95,0,0,3,
50,16,16,0,1,0,
0,0,101,0,0,3,
50,32,16,0,0,0,
0,0,103,0,0,4,
242,32,16,0,1,0,
0,0,1,0,0,0,
104,0,0,2,1,0,
0,0,56,0,0,10,
50,32,16,0,0,0,
0,0,70,16,16,0,
1,0,0,0,2,64,
0,0,71,3,128,63,
71,3,128,63,0,0,
0,0,0,0,0,0,
56,0,0,8,242,0,
16,0,0,0,0,0,
86,21,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,1,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,6,16,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
0,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,0,
16,0,0,0,0,0,
166,26,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,2,0,
0,0,70,14,16,0,
0,0,0,0,50,0,
0,10,242,32,16,0,
1,0,0,0,246,31,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,3,0,0,0,
70,14,16,0,0,0,
0,0,62,0,0,1,
83,84,65,84,148,0,
0,0,6,0,0,0,
1,0,0,0,0,0,
0,0,4,0,0,0,
5,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,129,93,
199,18,46,198,141,125,
164,107,180,25,4,198,
135,39,1,0,0,0,
248,14,0,0,5,0,
0,0,52,0,0,0,
128,4,0,0,180,4,
0,0,232,4,0,0,
92,14,0,0,82,68,
69,70,68,4,0,0,
2,0,0,0,220,0,
0,0,4,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
25,4,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
188,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,204,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,211,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
215,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
1,0,0,0,0,0,
0,0,95,83,111,117,
114,99,101,95,115,97,
109,112,108,101,114,0,
83,111,117,114,99,101,
0,85,66,79,0,80,
117,115,104,0,211,0,
0,0,4,0,0,0,
12,1,0,0,112,0,
0,0,0,0,0,0,
0,0,0,0,215,0,
0,0,7,0,0,0,
76,2,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,172,1,
0,0,0,0,0,0,
64,0,0,0,0,0,
0,0,192,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,228,1,0,0,
64,0,0,0,16,0,
0,0,0,0,0,0,
0,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
36,2,0,0,80,0,
0,0,16,0,0,0,
0,0,0,0,0,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,56,2,
0,0,96,0,0,0,
16,0,0,0,2,0,
0,0,0,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,103,108,111,98,
97,108,95,77,86,80,
0,102,108,111,97,116,
52,120,52,0,2,0,
3,0,4,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
183,1,0,0,103,108,
111,98,97,108,95,79,
117,116,112,117,116,83,
105,122,101,0,102,108,
111,97,116,52,0,171,
171,171,1,0,3,0,
1,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,246,1,
0,0,103,108,111,98,
97,108,95,79,114,105,
103,105,110,97,108,83,
105,122,101,0,103,108,
111,98,97,108,95,83,
111,117,114,99,101,83,
105,122,101,0,171,171,
100,3,0,0,0,0,
0,0,4,0,0,0,
2,0,0,0,132,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,168,3,
0,0,4,0,0,0,
4,0,0,0,2,0,
0,0,132,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,190,3,0,0,
8,0,0,0,4,0,
0,0,2,0,0,0,
132,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
214,3,0,0,12,0,
0,0,4,0,0,0,
2,0,0,0,132,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,236,3,
0,0,16,0,0,0,
4,0,0,0,2,0,
0,0,132,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,253,3,0,0,
20,0,0,0,4,0,
0,0,2,0,0,0,
132,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
11,4,0,0,24,0,
0,0,4,0,0,0,
0,0,0,0,132,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,112,97,
114,97,109,115,95,72,
70,73,76,84,69,82,
95,80,82,79,70,73,
76,69,0,102,108,111,
97,116,0,171,171,171,
0,0,3,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,123,3,0,0,
112,97,114,97,109,115,
95,83,72,65,82,80,
78,69,83,83,95,72,
65,67,75,0,112,97,
114,97,109,115,95,67,
82,84,95,65,78,84,
73,95,82,73,78,71,
73,78,71,0,112,97,
114,97,109,115,95,67,
82,84,95,73,110,112,
117,116,71,97,109,109,
97,0,112,97,114,97,
109,115,95,67,85,82,
86,65,84,85,82,69,
0,112,97,114,97,109,
115,95,87,65,82,80,
95,88,0,112,97,114,
97,109,115,95,87,65,
82,80,95,89,0,77,
105,99,114,111,115,111,
102,116,32,40,82,41,
32,72,76,83,76,32,
83,104,97,100,101,114,
32,67,111,109,112,105,
108,101,114,32,49,48,
46,49,0,171,171,171,
73,83,71,78,44,0,
0,0,1,0,0,0,
8,0,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
3,3,0,0,84,69,
88,67,79,79,82,68,
0,171,171,171,79,83,
71,78,44,0,0,0,
1,0,0,0,8,0,
0,0,32,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,0,
0,0,83,86,95,84,
97,114,103,101,116,0,
171,171,83,72,69,88,
108,9,0,0,80,0,
0,0,91,2,0,0,
106,8,0,1,89,0,
0,4,70,142,32,0,
0,0,0,0,7,0,
0,0,89,0,0,4,
70,142,32,0,1,0,
0,0,2,0,0,0,
90,0,0,3,0,96,
16,0,2,0,0,0,
88,24,0,4,0,112,
16,0,2,0,0,0,
85,85,0,0,98,16,
0,3,50,16,16,0,
0,0,0,0,101,0,
0,3,242,32,16,0,
0,0,0,0,104,0,
0,2,8,0,0,0,
50,0,0,15,50,0,
16,0,0,0,0,0,
70,16,16,0,0,0,
0,0,2,64,0,0,
0,0,0,64,0,0,
0,64,0,0,0,0,
0,0,0,0,2,64,
0,0,0,0,128,191,
0,0,128,191,0,0,
0,0,0,0,0,0,
15,0,0,7,66,0,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,70,0,16,0,
0,0,0,0,75,0,
0,5,66,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
14,0,0,7,50,0,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,166,10,16,0,
0,0,0,0,50,0,
0,10,66,0,16,0,
0,0,0,0,42,0,
16,128,65,0,0,0,
0,0,0,0,1,64,
0,0,243,4,53,63,
1,64,0,0,0,0,
128,63,47,0,0,5,
66,0,16,0,0,0,
0,0,42,0,16,0,
0,0,0,0,56,0,
0,8,18,0,16,0,
1,0,0,0,1,64,
0,0,0,0,64,64,
26,128,32,0,1,0,
0,0,1,0,0,0,
54,0,0,8,162,0,
16,0,1,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,10,
50,0,16,0,1,0,
0,0,70,0,16,0,
1,0,0,0,2,64,
0,0,0,0,128,63,
0,0,128,63,0,0,
0,0,0,0,0,0,
14,0,0,10,50,0,
16,0,1,0,0,0,
2,64,0,0,0,0,
128,63,0,0,128,63,
0,0,128,63,0,0,
128,63,70,0,16,0,
1,0,0,0,56,0,
0,7,194,0,16,0,
0,0,0,0,166,10,
16,0,0,0,0,0,
6,4,16,0,1,0,
0,0,56,0,0,10,
50,0,16,0,1,0,
0,0,70,0,16,0,
1,0,0,0,2,64,
0,0,66,194,226,191,
66,194,226,191,0,0,
0,0,0,0,0,0,
25,0,0,5,50,0,
16,0,1,0,0,0,
70,0,16,0,1,0,
0,0,0,0,0,11,
50,0,16,0,1,0,
0,0,70,0,16,128,
65,0,0,0,1,0,
0,0,2,64,0,0,
0,0,128,63,0,0,
128,63,0,0,0,0,
0,0,0,0,25,0,
0,5,194,0,16,0,
0,0,0,0,166,14,
16,0,0,0,0,0,
0,0,0,11,194,0,
16,0,0,0,0,0,
166,14,16,128,65,0,
0,0,0,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,0,
0,0,128,63,0,0,
128,63,56,0,0,7,
50,0,16,0,0,0,
0,0,230,10,16,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
14,0,0,7,50,0,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,70,0,16,0,
1,0,0,0,50,0,
0,15,50,0,16,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
2,64,0,0,0,0,
0,63,0,0,0,63,
0,0,0,0,0,0,
0,0,2,64,0,0,
0,0,0,63,0,0,
0,63,0,0,0,0,
0,0,0,0,49,0,
0,8,66,0,16,0,
0,0,0,0,1,64,
0,0,0,0,0,63,
10,128,32,0,1,0,
0,0,1,0,0,0,
55,0,0,9,50,0,
16,0,0,0,0,0,
166,10,16,0,0,0,
0,0,70,0,16,0,
0,0,0,0,70,16,
16,0,0,0,0,0,
54,0,0,6,34,0,
16,0,1,0,0,0,
26,128,32,0,0,0,
0,0,6,0,0,0,
56,0,0,9,18,0,
16,0,1,0,0,0,
10,128,32,0,0,0,
0,0,6,0,0,0,
26,128,32,0,1,0,
0,0,0,0,0,0,
50,0,0,12,50,0,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,70,0,16,0,
1,0,0,0,2,64,
0,0,0,0,0,191,
0,0,0,0,0,0,
0,0,0,0,0,0,
65,0,0,5,98,0,
16,0,0,0,0,0,
6,1,16,0,0,0,
0,0,26,0,0,5,
66,0,16,0,2,0,
0,0,10,0,16,0,
0,0,0,0,0,0,
0,10,50,0,16,0,
0,0,0,0,150,5,
16,0,0,0,0,0,
2,64,0,0,0,0,
0,63,0,0,0,63,
0,0,0,0,0,0,
0,0,14,0,0,7,
50,0,16,0,0,0,
0,0,70,0,16,0,
0,0,0,0,70,0,
16,0,1,0,0,0,
14,0,0,10,66,0,
16,0,1,0,0,0,
2,64,0,0,0,0,
128,63,0,0,128,63,
0,0,128,63,0,0,
128,63,10,0,16,0,
1,0,0,0,0,0,
0,7,194,0,16,0,
0,0,0,0,166,14,
16,0,1,0,0,0,
6,4,16,0,0,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,114,0,16,0,
3,0,0,0,230,10,
16,0,0,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,47,0,
0,5,114,0,16,0,
3,0,0,0,70,2,
16,0,3,0,0,0,
56,0,0,8,114,0,
16,0,3,0,0,0,
70,2,16,0,3,0,
0,0,246,143,32,0,
1,0,0,0,0,0,
0,0,25,0,0,5,
114,0,16,0,3,0,
0,0,70,2,16,0,
3,0,0,0,0,0,
0,8,194,0,16,0,
0,0,0,0,166,14,
16,128,65,0,0,0,
1,0,0,0,6,4,
16,0,0,0,0,0,
50,0,0,12,50,0,
16,0,1,0,0,0,
230,10,16,0,1,0,
0,0,2,64,0,0,
0,0,0,64,0,0,
0,64,0,0,0,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
114,0,16,0,4,0,
0,0,70,0,16,0,
0,0,0,0,70,126,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,47,0,0,5,
114,0,16,0,4,0,
0,0,70,2,16,0,
4,0,0,0,56,0,
0,8,114,0,16,0,
4,0,0,0,70,2,
16,0,4,0,0,0,
246,143,32,0,1,0,
0,0,0,0,0,0,
25,0,0,5,114,0,
16,0,4,0,0,0,
70,2,16,0,4,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,114,0,16,0,
1,0,0,0,70,0,
16,0,1,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,47,0,
0,5,114,0,16,0,
1,0,0,0,70,2,
16,0,1,0,0,0,
56,0,0,8,114,0,
16,0,1,0,0,0,
70,2,16,0,1,0,
0,0,246,143,32,0,
1,0,0,0,0,0,
0,0,25,0,0,5,
114,0,16,0,1,0,
0,0,70,2,16,0,
1,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,0,0,0,0,
230,10,16,0,0,0,
0,0,70,126,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
47,0,0,5,114,0,
16,0,0,0,0,0,
70,2,16,0,0,0,
0,0,56,0,0,8,
114,0,16,0,0,0,
0,0,70,2,16,0,
0,0,0,0,246,143,
32,0,1,0,0,0,
0,0,0,0,25,0,
0,5,114,0,16,0,
0,0,0,0,70,2,
16,0,0,0,0,0,
56,0,0,7,34,0,
16,0,2,0,0,0,
42,0,16,0,2,0,
0,0,42,0,16,0,
2,0,0,0,56,0,
0,7,18,0,16,0,
2,0,0,0,42,0,
16,0,2,0,0,0,
26,0,16,0,2,0,
0,0,54,0,0,5,
66,0,16,0,5,0,
0,0,1,64,0,0,
0,0,128,63,54,0,
0,5,130,0,16,0,
2,0,0,0,1,64,
0,0,0,0,128,63,
49,0,0,8,130,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
0,63,10,128,32,0,
1,0,0,0,0,0,
0,0,55,0,0,15,
242,0,16,0,6,0,
0,0,246,15,16,0,
0,0,0,0,2,64,
0,0,0,0,192,63,
0,0,32,192,0,0,
0,191,0,0,192,191,
2,64,0,0,0,0,
0,64,0,0,64,192,
0,0,0,128,0,0,
0,192,54,0,0,5,
50,0,16,0,5,0,
0,0,70,0,16,0,
6,0,0,0,16,0,
0,7,130,0,16,0,
1,0,0,0,70,2,
16,0,5,0,0,0,
70,3,16,0,2,0,
0,0,56,0,0,7,
114,0,16,0,5,0,
0,0,70,2,16,0,
4,0,0,0,246,15,
16,0,1,0,0,0,
1,0,0,10,50,0,
16,0,6,0,0,0,
246,15,16,0,0,0,
0,0,2,64,0,0,
0,0,128,63,0,0,
0,63,0,0,0,0,
0,0,0,0,55,0,
0,9,34,0,16,0,
7,0,0,0,58,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
0,64,1,64,0,0,
0,0,64,64,16,0,
0,7,130,0,16,0,
0,0,0,0,38,10,
16,0,6,0,0,0,
70,2,16,0,2,0,
0,0,15,0,0,7,
130,0,16,0,1,0,
0,0,150,5,16,0,
6,0,0,0,70,0,
16,0,2,0,0,0,
54,0,0,5,82,0,
16,0,7,0,0,0,
246,13,16,0,6,0,
0,0,16,0,0,7,
18,0,16,0,2,0,
0,0,70,2,16,0,
7,0,0,0,70,2,
16,0,2,0,0,0,
50,0,0,9,114,0,
16,0,0,0,0,0,
246,15,16,0,0,0,
0,0,70,2,16,0,
0,0,0,0,70,2,
16,0,5,0,0,0,
50,0,0,9,114,0,
16,0,0,0,0,0,
6,0,16,0,2,0,
0,0,70,2,16,0,
3,0,0,0,70,2,
16,0,0,0,0,0,
50,0,0,9,114,0,
16,0,0,0,0,0,
246,15,16,0,1,0,
0,0,70,2,16,0,
1,0,0,0,70,2,
16,0,0,0,0,0,
51,0,0,7,114,0,
16,0,1,0,0,0,
70,2,16,0,3,0,
0,0,70,2,16,0,
4,0,0,0,52,0,
0,7,114,0,16,0,
2,0,0,0,70,2,
16,0,3,0,0,0,
70,2,16,0,4,0,
0,0,52,0,0,7,
114,0,16,0,1,0,
0,0,70,2,16,0,
0,0,0,0,70,2,
16,0,1,0,0,0,
51,0,0,7,114,0,
16,0,1,0,0,0,
70,2,16,0,2,0,
0,0,70,2,16,0,
1,0,0,0,0,0,
0,8,114,0,16,0,
1,0,0,0,70,2,
16,128,65,0,0,0,
0,0,0,0,70,2,
16,0,1,0,0,0,
50,0,0,10,114,32,
16,0,0,0,0,0,
166,138,32,0,1,0,
0,0,0,0,0,0,
70,2,16,0,1,0,
0,0,70,2,16,0,
0,0,0,0,54,0,
0,5,130,32,16,0,
0,0,0,0,1,64,
0,0,0,0,128,63,
62,0,0,1,83,84,
65,84,148,0,0,0,
74,0,0,0,8,0,
0,0,0,0,0,0,
2,0,0,0,58,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,7,0,
0,0,3,0,0,0,
2,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};


static const uint32_t sVertexHash[] = 
{
0x5407a806,0xeecff162,0x82ca6de,0x62ab456,0xbe79f5f6,0x8f94e9de,
0xcdd4eead,0xc61febc
};


static const uint32_t sFragmentHash[] =
{
0x346d986c,0xc5992c3,0x536fe97e,0xb8b8727a,0x5342bdb2,0xac1e6483,
0xdbe1c99e,0x7eb55bbe
};

}

namespace RetroArch
{
class CrtShadersHyllianCrtHyllianPass0ShaderDef : public ShaderDef
{
public:
	CrtShadersHyllianCrtHyllianPass0ShaderDef() : ShaderDef{}
	{
		Name = "crt-hyllian-pass0";
		VertexByteCode = RetroArchCrtShadersHyllianCrtHyllianPass0ShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchCrtShadersHyllianCrtHyllianPass0ShaderDefs::sVertexByteCode);
		VertexHash = RetroArchCrtShadersHyllianCrtHyllianPass0ShaderDefs::sVertexHash;
		FragmentByteCode = RetroArchCrtShadersHyllianCrtHyllianPass0ShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchCrtShadersHyllianCrtHyllianPass0ShaderDefs::sFragmentByteCode);
		FragmentHash = RetroArchCrtShadersHyllianCrtHyllianPass0ShaderDefs::sFragmentHash;
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", 0, 64, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", 0, 80, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", 0, 96, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("HFILTER_PROFILE", -1, 0, 4, 0.000000f, 1.000000f, 1.000000f, 1.000000f, "HORIZONTAL FILTER PROFILE [ SHARP1 | SHARP2 ]"));
		Params.push_back(ShaderParam("SHARPNESS_HACK", -1, 4, 4, 1.000000f, 4.000000f, 1.000000f, 1.000000f, "SHARPNESS_HACK"));
		Params.push_back(ShaderParam("CRT_ANTI_RINGING", -1, 8, 4, 0.000000f, 1.000000f, 1.000000f, 1.000000f, "ANTI RINGING"));
		Params.push_back(ShaderParam("CRT_InputGamma", -1, 12, 4, 1.000000f, 5.000000f, 2.400000f, 0.100000f, "INPUT GAMMA"));
		Params.push_back(ShaderParam("CURVATURE", -1, 16, 4, 0.000000f, 1.000000f, 0.000000f, 1.000000f, "ENABLE CURVATURE"));
		Params.push_back(ShaderParam("WARP_X", -1, 20, 4, 0.000000f, 0.125000f, 0.015000f, 0.005000f, "CURVATURE-X"));
		Params.push_back(ShaderParam("WARP_Y", -1, 24, 4, 0.000000f, 0.125000f, 0.015000f, 0.005000f, "CURVATURE-Y"));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
