/*
ShaderGlass shader crt/shaders/crt-royale/src-fast\crt-royale-bloom-vertical imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/crt/shaders/crt-royale/src-fast/crt-royale-bloom-vertical.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

/////////////////////////////  GPL LICENSE NOTICE  /////////////////////////////
//  crt-royale: A full-featured CRT shader, with cheese.
//  Copyright (C) 2014 TroggleMonkey <trogglemonkey@gmx.com>
//
//  This program is free software; you can redistribute it and/or modify it
//  under the terms of the GNU General Public License as published by the Free
//  Software Foundation; either version 2 of the License, or any later version.
//
//  This program is distributed in the hope that it will be useful, but WITHOUT
//  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
//  more details.
//
//  You should have received a copy of the GNU General Public License along with
//  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
//  Place, Suite 330, Boston, MA 02111-1307 USA
/////////////////////////////  SETTINGS MANAGEMENT  ////////////////////////////
/////////////////////////////  GPL LICENSE NOTICE  /////////////////////////////
//  crt-royale: A full-featured CRT shader, with cheese.
//  Copyright (C) 2014 TroggleMonkey <trogglemonkey@gmx.com>
//
//  This program is free software; you can redistribute it and/or modify it
//  under the terms of the GNU General Public License as published by the Free
//  Software Foundation; either version 2 of the License, or any later version.
//
//  This program is distributed in the hope that it will be useful, but WITHOUT
//  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
//  more details.
//
//  You should have received a copy of the GNU General Public License along with
//  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
//  Place, Suite 330, Boston, MA 02111-1307 USA
/////////////////////////////  SETTINGS MANAGEMENT  ////////////////////////////
//	float mask_sample_mode_desired;
//    #ifdef DRIVERS_ALLOW_DERIVATIVES
//        #define DRIVERS_ALLOW_FINE_DERIVATIVES
//    #endif
//#define DRIVERS_ALLOW_DYNAMIC_BRANCHES
//#define ACCOMODATE_POSSIBLE_DYNAMIC_LOOPS
//#define DRIVERS_ALLOW_TEX2DLOD
//#define DRIVERS_ALLOW_TEX2DBIAS
//#define INTEGRATED_GRAPHICS_COMPATIBILITY_MODE
//#define RUNTIME_ANTIALIAS_SUBPIXEL_OFFSETS
//#define PHOSPHOR_BLOOM_TRIADS_LARGER_THAN_6_PIXELS
//#define PHOSPHOR_BLOOM_TRIADS_LARGER_THAN_9_PIXELS
//#define PHOSPHOR_BLOOM_TRIADS_LARGER_THAN_12_PIXELS
//  GAMMA:
//  LEVELS MANAGEMENT:
//  HALATION/DIFFUSION/BLOOM:
//  ANTIALIASING:
//  PHOSPHOR MASK:
//  GEOMETRY:
//  BORDERS:
//  PASS SCALES AND RELATED CONSTANTS:
//  PHOSPHOR MASK TEXTURE CONSTANTS:
//vec2 mask_texture_large_size = vec2(512.0, 512.0);
//#define PHOSPHOR_MASK_GRILLE14
//float mask_grille14_avg_color = 50.6666666/255.0;
////////////////////////  COMMON MATHEMATICAL CONSTANTS  ///////////////////////
//  Override some parameters for gamma-management.h and tex2Dantialias.h:
//#pragma parameter mask_sample_mode_desired "Mask - Sample Mode" 0.0 0.0 2.0 1.0   //  Consider blocking mode 2.
//#define mask_sample_mode_desired global.mask_sample_mode_desired
//#define interlace_bff global.interlace_bff
//  Provide accessors for vector constants that pack scalar uniforms:
//  Get an aspect ratio vector.  Enforce geom_max_aspect_ratio, and prevent
//  the absolute scale from affecting the uv-mapping for curvature:
//  Provide accessors settings which still need "cooking:
//float get_mask_sample_mode()
//{
//    return mask_sample_mode_desired;
//}
///////////////////////////////  VERTEX INCLUDES  ///////////////////////////////
// copied from bloom-functions.h
//  Requires:   1.) triad_size is the final phosphor triad size in pixels
//              2.) thresh is the max desired pixel difference in the
//                  blurred triad (e.g. 1.0/256.0).
//  Returns:    Return the minimum sigma that will fully blur a phosphor
//              triad on the screen to an even color, within thresh.
//              This closed-form function was found by curve-fitting data.
//  Estimate: max error = ~0.086036, mean sq. error = ~0.0013387:
//  Estimate: max error = ~0.16486, mean sq. error = ~0.0041041:
//return 0.5985*triad_size - triad_size*sqrt(thresh)
//  We can use the Gaussian integral to calculate the asymptotic weight for
//  the center pixel.  Since the unnormalized center pixel weight is 1.0,
//  the normalized weight is the same as the weight sum inverse.  Given a
//  large enough blur (9+), the asymptotic weight sum is close and faster:
//      center_weight = 0.5 *
//          (erf(0.5/(sigma*sqrt(2.0))) - erf(-0.5/(sigma*sqrt(2.0))))
//      erf(-x) == -erf(x), so we get 0.5 * (2.0 * erf(blah blah)):
//  However, we can get even faster results with curve-fitting.  These are
//  also closer than the asymptotic results, because they were constructed
//  from 64 blurs sizes from [3, 131) and 255 equally-spaced sigmas from
//  (0, blurN_std_dev), so the results for smaller sigmas are biased toward
//  smaller blurs.  The max error is 0.0031793913.
//  Relative FPS: 134.3 with erf, 135.8 with curve-fitting.
//float temp = 0.5/sqrt(2.0);
//return erf(temp/sigma);
//  Stated tile properties must be correct:
//  If mask_specify_num_triads is 1.0/true and estimated_viewport_size.x is
//  wrong, the user preference will be misinterpreted:
//  Make sure we're not upsizing:
//  Enforce min_tile_size and max_tile_size in both dimensions:
//  We need integer tile sizes in both directions for tiled sampling to
//  work correctly.  Use floor (to make sure we don't round up), but be
//  careful to avoid a rounding bug where floor decreases whole numbers:
//  Get the uv sample distance between output pixels.  Calculate dxdy like
//  blurs/shaders/vertex-shader-blur-fast-vertical.h.
//  This blur is vertical-only, so zero out the vertical offset:
//  Calculate a runtime bloom_sigma in case it's needed:
//////////////////////////////  FRAGMENT INCLUDES  //////////////////////////////

*/

#pragma once

namespace RetroArchCrtShadersCrtRoyaleSrcFastCrtRoyaleBloomVerticalShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,68,77,
106,244,237,190,132,7,
159,22,7,34,105,128,
207,201,1,0,0,0,
164,18,0,0,5,0,
0,0,52,0,0,0,
116,11,0,0,192,11,
0,0,144,12,0,0,
8,18,0,0,82,68,
69,70,56,11,0,0,
2,0,0,0,136,0,
0,0,2,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
16,11,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
124,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,128,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,85,66,
79,0,80,117,115,104,
0,171,171,171,124,0,
0,0,32,0,0,0,
184,0,0,0,192,0,
0,0,0,0,0,0,
0,0,0,0,128,0,
0,0,6,0,0,0,
72,9,0,0,96,0,
0,0,0,0,0,0,
0,0,0,0,184,5,
0,0,0,0,0,0,
64,0,0,0,2,0,
0,0,204,5,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,240,5,0,0,
64,0,0,0,4,0,
0,0,0,0,0,0,
8,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
44,6,0,0,68,0,
0,0,4,0,0,0,
0,0,0,0,8,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,61,6,
0,0,72,0,0,0,
4,0,0,0,0,0,
0,0,8,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,84,6,0,0,
76,0,0,0,4,0,
0,0,0,0,0,0,
8,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
118,6,0,0,80,0,
0,0,4,0,0,0,
0,0,0,0,8,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,138,6,
0,0,84,0,0,0,
4,0,0,0,0,0,
0,0,8,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,160,6,0,0,
88,0,0,0,4,0,
0,0,0,0,0,0,
8,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
182,6,0,0,92,0,
0,0,4,0,0,0,
0,0,0,0,8,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,205,6,
0,0,96,0,0,0,
4,0,0,0,0,0,
0,0,8,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,227,6,0,0,
100,0,0,0,4,0,
0,0,0,0,0,0,
8,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
249,6,0,0,104,0,
0,0,4,0,0,0,
0,0,0,0,8,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,17,7,
0,0,108,0,0,0,
4,0,0,0,0,0,
0,0,8,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,42,7,0,0,
112,0,0,0,4,0,
0,0,0,0,0,0,
8,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
66,7,0,0,116,0,
0,0,4,0,0,0,
0,0,0,0,8,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,102,7,
0,0,120,0,0,0,
4,0,0,0,0,0,
0,0,8,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,132,7,0,0,
124,0,0,0,4,0,
0,0,0,0,0,0,
8,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
162,7,0,0,128,0,
0,0,4,0,0,0,
0,0,0,0,8,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,192,7,
0,0,132,0,0,0,
4,0,0,0,0,0,
0,0,8,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,222,7,0,0,
136,0,0,0,4,0,
0,0,0,0,0,0,
8,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
252,7,0,0,140,0,
0,0,4,0,0,0,
0,0,0,0,8,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,26,8,
0,0,144,0,0,0,
4,0,0,0,0,0,
0,0,8,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,43,8,0,0,
148,0,0,0,4,0,
0,0,2,0,0,0,
8,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
74,8,0,0,152,0,
0,0,4,0,0,0,
2,0,0,0,8,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,105,8,
0,0,156,0,0,0,
4,0,0,0,2,0,
0,0,8,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,136,8,0,0,
160,0,0,0,4,0,
0,0,0,0,0,0,
8,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
174,8,0,0,164,0,
0,0,4,0,0,0,
0,0,0,0,8,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,212,8,
0,0,168,0,0,0,
4,0,0,0,0,0,
0,0,8,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,230,8,0,0,
172,0,0,0,4,0,
0,0,0,0,0,0,
8,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
252,8,0,0,176,0,
0,0,4,0,0,0,
0,0,0,0,8,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,17,9,
0,0,180,0,0,0,
4,0,0,0,0,0,
0,0,8,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,40,9,0,0,
184,0,0,0,4,0,
0,0,0,0,0,0,
8,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
103,108,111,98,97,108,
95,77,86,80,0,102,
108,111,97,116,52,120,
52,0,2,0,3,0,
4,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,195,5,
0,0,103,108,111,98,
97,108,95,99,114,116,
95,103,97,109,109,97,
0,102,108,111,97,116,
0,171,0,0,3,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,6,
0,0,103,108,111,98,
97,108,95,108,99,100,
95,103,97,109,109,97,
0,103,108,111,98,97,
108,95,108,101,118,101,
108,115,95,99,111,110,
116,114,97,115,116,0,
103,108,111,98,97,108,
95,98,108,111,111,109,
95,117,110,100,101,114,
101,115,116,105,109,97,
116,101,95,108,101,118,
101,108,115,0,103,108,
111,98,97,108,95,98,
108,111,111,109,95,101,
120,99,101,115,115,0,
103,108,111,98,97,108,
95,98,101,97,109,95,
109,105,110,95,115,105,
103,109,97,0,103,108,
111,98,97,108,95,98,
101,97,109,95,109,97,
120,95,115,105,103,109,
97,0,103,108,111,98,
97,108,95,98,101,97,
109,95,115,112,111,116,
95,112,111,119,101,114,
0,103,108,111,98,97,
108,95,98,101,97,109,
95,109,105,110,95,115,
104,97,112,101,0,103,
108,111,98,97,108,95,
98,101,97,109,95,109,
97,120,95,115,104,97,
112,101,0,103,108,111,
98,97,108,95,98,101,
97,109,95,115,104,97,
112,101,95,112,111,119,
101,114,0,103,108,111,
98,97,108,95,98,101,
97,109,95,104,111,114,
105,122,95,102,105,108,
116,101,114,0,103,108,
111,98,97,108,95,98,
101,97,109,95,104,111,
114,105,122,95,115,105,
103,109,97,0,103,108,
111,98,97,108,95,98,
101,97,109,95,104,111,
114,105,122,95,108,105,
110,101,97,114,95,114,
103,98,95,119,101,105,
103,104,116,0,103,108,
111,98,97,108,95,99,
111,110,118,101,114,103,
101,110,99,101,95,111,
102,102,115,101,116,95,
120,95,114,0,103,108,
111,98,97,108,95,99,
111,110,118,101,114,103,
101,110,99,101,95,111,
102,102,115,101,116,95,
120,95,103,0,103,108,
111,98,97,108,95,99,
111,110,118,101,114,103,
101,110,99,101,95,111,
102,102,115,101,116,95,
120,95,98,0,103,108,
111,98,97,108,95,99,
111,110,118,101,114,103,
101,110,99,101,95,111,
102,102,115,101,116,95,
121,95,114,0,103,108,
111,98,97,108,95,99,
111,110,118,101,114,103,
101,110,99,101,95,111,
102,102,115,101,116,95,
121,95,103,0,103,108,
111,98,97,108,95,99,
111,110,118,101,114,103,
101,110,99,101,95,111,
102,102,115,101,116,95,
121,95,98,0,103,108,
111,98,97,108,95,109,
97,115,107,95,116,121,
112,101,0,103,108,111,
98,97,108,95,109,97,
115,107,95,110,117,109,
95,116,114,105,97,100,
115,95,100,101,115,105,
114,101,100,0,103,108,
111,98,97,108,95,109,
97,115,107,95,116,114,
105,97,100,95,115,105,
122,101,95,100,101,115,
105,114,101,100,0,103,
108,111,98,97,108,95,
109,97,115,107,95,115,
112,101,99,105,102,121,
95,110,117,109,95,116,
114,105,97,100,115,0,
103,108,111,98,97,108,
95,97,97,95,115,117,
98,112,105,120,101,108,
95,114,95,111,102,102,
115,101,116,95,120,95,
114,117,110,116,105,109,
101,0,103,108,111,98,
97,108,95,97,97,95,
115,117,98,112,105,120,
101,108,95,114,95,111,
102,102,115,101,116,95,
121,95,114,117,110,116,
105,109,101,0,103,108,
111,98,97,108,95,97,
97,95,99,117,98,105,
99,95,99,0,103,108,
111,98,97,108,95,97,
97,95,103,97,117,115,
115,95,115,105,103,109,
97,0,103,108,111,98,
97,108,95,105,110,116,
101,114,108,97,99,101,
95,98,102,102,0,103,
108,111,98,97,108,95,
105,110,116,101,114,108,
97,99,101,95,49,48,
56,48,105,0,103,108,
111,98,97,108,95,105,
110,116,101,114,108,97,
99,101,95,100,101,116,
101,99,116,95,116,111,
103,103,108,101,0,171,
56,10,0,0,0,0,
0,0,16,0,0,0,
2,0,0,0,84,10,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,120,10,
0,0,16,0,0,0,
16,0,0,0,0,0,
0,0,84,10,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,140,10,0,0,
32,0,0,0,16,0,
0,0,2,0,0,0,
84,10,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
158,10,0,0,48,0,
0,0,4,0,0,0,
0,0,0,0,184,10,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,220,10,
0,0,64,0,0,0,
16,0,0,0,0,0,
0,0,84,10,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,248,10,0,0,
80,0,0,0,16,0,
0,0,0,0,0,0,
84,10,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
112,97,114,97,109,115,
95,83,111,117,114,99,
101,83,105,122,101,0,
102,108,111,97,116,52,
0,171,171,171,1,0,
3,0,1,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
74,10,0,0,112,97,
114,97,109,115,95,79,
114,105,103,105,110,97,
108,83,105,122,101,0,
112,97,114,97,109,115,
95,79,117,116,112,117,
116,83,105,122,101,0,
112,97,114,97,109,115,
95,70,114,97,109,101,
67,111,117,110,116,0,
100,119,111,114,100,0,
171,171,0,0,19,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,176,10,
0,0,112,97,114,97,
109,115,95,77,65,83,
75,69,68,95,83,67,
65,78,76,73,78,69,
83,83,105,122,101,0,
112,97,114,97,109,115,
95,66,76,79,79,77,
95,65,80,80,82,79,
88,83,105,122,101,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
200,0,0,0,7,0,
0,0,8,0,0,0,
176,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
176,0,0,0,1,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,12,3,0,0,
176,0,0,0,2,0,
0,0,0,0,0,0,
3,0,0,0,1,0,
0,0,1,14,0,0,
176,0,0,0,5,0,
0,0,0,0,0,0,
3,0,0,0,1,0,
0,0,2,13,0,0,
176,0,0,0,3,0,
0,0,0,0,0,0,
3,0,0,0,2,0,
0,0,15,0,0,0,
176,0,0,0,4,0,
0,0,0,0,0,0,
3,0,0,0,3,0,
0,0,15,0,0,0,
185,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,4,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,112,5,
0,0,80,0,1,0,
92,1,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,10,0,0,0,
89,0,0,4,70,142,
32,0,1,0,0,0,
3,0,0,0,95,0,
0,3,242,16,16,0,
0,0,0,0,95,0,
0,3,50,16,16,0,
1,0,0,0,101,0,
0,3,50,32,16,0,
0,0,0,0,101,0,
0,3,194,32,16,0,
0,0,0,0,101,0,
0,3,18,32,16,0,
1,0,0,0,101,0,
0,3,34,32,16,0,
1,0,0,0,101,0,
0,3,242,32,16,0,
2,0,0,0,101,0,
0,3,242,32,16,0,
3,0,0,0,103,0,
0,4,242,32,16,0,
4,0,0,0,1,0,
0,0,104,0,0,2,
3,0,0,0,14,0,
0,9,18,0,16,0,
0,0,0,0,26,128,
32,0,1,0,0,0,
0,0,0,0,26,128,
32,0,1,0,0,0,
2,0,0,0,14,0,
0,8,130,32,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
26,128,32,0,1,0,
0,0,0,0,0,0,
56,0,0,10,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,2,64,0,0,
71,3,128,63,71,3,
128,63,0,0,0,0,
0,0,0,0,54,0,
0,5,66,32,16,0,
0,0,0,0,1,64,
0,0,0,0,0,0,
14,0,0,9,18,0,
16,0,0,0,0,0,
10,128,32,0,1,0,
0,0,2,0,0,0,
26,128,32,0,0,0,
0,0,9,0,0,0,
0,0,0,9,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,42,128,32,128,
65,0,0,0,0,0,
0,0,9,0,0,0,
50,0,0,11,18,0,
16,0,0,0,0,0,
58,128,32,0,0,0,
0,0,9,0,0,0,
10,0,16,0,0,0,
0,0,42,128,32,0,
0,0,0,0,9,0,
0,0,56,0,0,7,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,1,64,
0,0,0,0,0,65,
51,0,0,7,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,66,52,0,
0,7,18,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
128,65,56,0,0,11,
98,0,16,0,0,0,
0,0,2,64,0,0,
0,0,0,0,57,142,
99,61,57,142,99,61,
0,0,0,0,6,129,
32,0,1,0,0,0,
2,0,0,0,51,0,
0,7,50,0,16,0,
0,0,0,0,150,5,
16,0,0,0,0,0,
6,0,16,0,0,0,
0,0,51,0,0,7,
18,0,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
0,0,0,7,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,55,65,0,
0,5,18,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
50,0,0,9,34,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,1,64,0,0,
40,126,156,61,1,64,
0,0,104,174,83,189,
50,0,0,10,18,0,
16,0,0,0,0,0,
10,0,16,128,65,0,
0,0,0,0,0,0,
1,64,0,0,224,17,
23,60,26,0,16,0,
0,0,0,0,0,0,
0,7,34,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
1,64,0,0,143,63,
176,189,14,0,0,10,
98,0,16,0,0,0,
0,0,2,64,0,0,
0,0,0,0,185,90,
178,62,149,117,204,62,
0,0,0,0,86,4,
16,0,0,0,0,0,
56,0,0,7,34,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,1,64,0,0,
59,170,184,63,25,0,
0,5,34,0,16,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
56,0,0,7,34,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,1,64,0,0,
59,170,184,63,25,0,
0,5,34,0,16,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
51,0,0,7,34,32,
16,0,1,0,0,0,
42,0,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,54,0,
0,5,18,32,16,0,
1,0,0,0,10,0,
16,0,0,0,0,0,
56,0,0,7,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,14,0,
0,7,18,0,16,0,
0,0,0,0,1,64,
0,0,0,0,0,63,
10,0,16,0,0,0,
0,0,56,0,0,10,
242,0,16,0,1,0,
0,0,6,0,16,0,
0,0,0,0,2,64,
0,0,59,170,184,191,
59,170,184,192,131,191,
79,193,59,170,184,193,
56,0,0,10,242,0,
16,0,0,0,0,0,
6,0,16,0,0,0,
0,0,2,64,0,0,
254,68,16,194,131,191,
79,194,85,98,141,194,
59,170,184,194,25,0,
0,5,242,0,16,0,
0,0,0,0,70,14,
16,0,0,0,0,0,
25,0,0,5,242,0,
16,0,1,0,0,0,
70,14,16,0,1,0,
0,0,0,0,0,7,
50,0,16,0,2,0,
0,0,214,5,16,0,
1,0,0,0,134,0,
16,0,1,0,0,0,
14,0,0,7,50,32,
16,0,3,0,0,0,
214,5,16,0,1,0,
0,0,70,0,16,0,
2,0,0,0,0,0,
0,7,194,0,16,0,
2,0,0,0,86,13,
16,0,0,0,0,0,
6,8,16,0,0,0,
0,0,14,0,0,7,
194,32,16,0,3,0,
0,0,86,13,16,0,
0,0,0,0,166,14,
16,0,2,0,0,0,
54,0,0,5,242,32,
16,0,2,0,0,0,
70,14,16,0,2,0,
0,0,56,0,0,8,
242,0,16,0,0,0,
0,0,86,21,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,6,16,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,0,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,166,26,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
2,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,32,
16,0,4,0,0,0,
246,31,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,3,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,41,0,
0,0,3,0,0,0,
0,0,0,0,9,0,
0,0,37,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,97,21,
210,150,86,181,231,24,
71,13,211,219,139,235,
40,138,1,0,0,0,
168,6,0,0,5,0,
0,0,52,0,0,0,
248,0,0,0,164,1,
0,0,216,1,0,0,
12,6,0,0,82,68,
69,70,188,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
147,0,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
124,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,140,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,95,83,
111,117,114,99,101,95,
115,97,109,112,108,101,
114,0,83,111,117,114,
99,101,0,77,105,99,
114,111,115,111,102,116,
32,40,82,41,32,72,
76,83,76,32,83,104,
97,100,101,114,32,67,
111,109,112,105,108,101,
114,32,49,48,46,49,
0,171,73,83,71,78,
164,0,0,0,6,0,
0,0,8,0,0,0,
152,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,3,0,0,
152,0,0,0,1,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,12,12,0,0,
152,0,0,0,2,0,
0,0,0,0,0,0,
3,0,0,0,1,0,
0,0,1,0,0,0,
152,0,0,0,5,0,
0,0,0,0,0,0,
3,0,0,0,1,0,
0,0,2,2,0,0,
152,0,0,0,3,0,
0,0,0,0,0,0,
3,0,0,0,2,0,
0,0,15,15,0,0,
152,0,0,0,4,0,
0,0,0,0,0,0,
3,0,0,0,3,0,
0,0,15,15,0,0,
84,69,88,67,79,79,
82,68,0,171,171,171,
79,83,71,78,44,0,
0,0,1,0,0,0,
8,0,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
15,0,0,0,83,86,
95,84,97,114,103,101,
116,0,171,171,83,72,
69,88,44,4,0,0,
80,0,0,0,11,1,
0,0,106,8,0,1,
90,0,0,3,0,96,
16,0,2,0,0,0,
88,24,0,4,0,112,
16,0,2,0,0,0,
85,85,0,0,98,16,
0,3,50,16,16,0,
0,0,0,0,98,16,
0,3,194,16,16,0,
0,0,0,0,98,16,
0,3,34,16,16,0,
1,0,0,0,98,16,
0,3,242,16,16,0,
2,0,0,0,98,16,
0,3,242,16,16,0,
3,0,0,0,101,0,
0,3,242,32,16,0,
0,0,0,0,104,0,
0,2,4,0,0,0,
0,0,0,10,242,0,
16,0,0,0,0,0,
182,17,16,0,3,0,
0,0,2,64,0,0,
0,0,224,64,0,0,
160,64,0,0,64,64,
0,0,128,63,50,0,
0,10,242,0,16,0,
1,0,0,0,230,30,
16,128,65,0,0,0,
0,0,0,0,6,5,
16,0,0,0,0,0,
70,20,16,0,0,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,114,0,16,0,
2,0,0,0,230,10,
16,0,1,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,1,0,0,0,
70,0,16,0,1,0,
0,0,70,126,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
56,0,0,7,114,0,
16,0,2,0,0,0,
70,2,16,0,2,0,
0,0,166,26,16,0,
2,0,0,0,50,0,
0,9,114,0,16,0,
1,0,0,0,70,2,
16,0,1,0,0,0,
246,31,16,0,2,0,
0,0,70,2,16,0,
2,0,0,0,50,0,
0,10,242,0,16,0,
2,0,0,0,230,30,
16,128,65,0,0,0,
0,0,0,0,166,15,
16,0,0,0,0,0,
70,20,16,0,0,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,114,0,16,0,
3,0,0,0,70,0,
16,0,2,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,2,0,0,0,
230,10,16,0,2,0,
0,0,70,126,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
50,0,0,9,114,0,
16,0,1,0,0,0,
70,2,16,0,3,0,
0,0,86,21,16,0,
2,0,0,0,70,2,
16,0,1,0,0,0,
50,0,0,9,114,0,
16,0,1,0,0,0,
70,2,16,0,2,0,
0,0,6,16,16,0,
2,0,0,0,70,2,
16,0,1,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
114,0,16,0,2,0,
0,0,70,16,16,0,
0,0,0,0,70,126,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,0,0,0,7,
114,0,16,0,1,0,
0,0,70,2,16,0,
1,0,0,0,70,2,
16,0,2,0,0,0,
50,0,0,9,242,0,
16,0,2,0,0,0,
230,30,16,0,0,0,
0,0,246,10,16,0,
0,0,0,0,70,20,
16,0,0,0,0,0,
50,0,0,9,242,0,
16,0,0,0,0,0,
230,30,16,0,0,0,
0,0,86,0,16,0,
0,0,0,0,70,20,
16,0,0,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
114,0,16,0,3,0,
0,0,70,0,16,0,
2,0,0,0,70,126,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,114,0,16,0,
2,0,0,0,230,10,
16,0,2,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,50,0,
0,9,114,0,16,0,
1,0,0,0,70,2,
16,0,3,0,0,0,
6,16,16,0,2,0,
0,0,70,2,16,0,
1,0,0,0,50,0,
0,9,114,0,16,0,
1,0,0,0,70,2,
16,0,2,0,0,0,
86,21,16,0,2,0,
0,0,70,2,16,0,
1,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,2,0,0,0,
70,0,16,0,0,0,
0,0,70,126,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
114,0,16,0,0,0,
0,0,230,10,16,0,
0,0,0,0,70,126,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,50,0,0,9,
114,0,16,0,1,0,
0,0,70,2,16,0,
2,0,0,0,166,26,
16,0,2,0,0,0,
70,2,16,0,1,0,
0,0,50,0,0,9,
114,0,16,0,0,0,
0,0,70,2,16,0,
0,0,0,0,246,31,
16,0,2,0,0,0,
70,2,16,0,1,0,
0,0,56,0,0,7,
114,32,16,0,0,0,
0,0,70,2,16,0,
0,0,0,0,86,21,
16,0,1,0,0,0,
54,0,0,5,130,32,
16,0,0,0,0,0,
1,64,0,0,0,0,
128,63,62,0,0,1,
83,84,65,84,148,0,
0,0,26,0,0,0,
4,0,0,0,0,0,
0,0,6,0,0,0,
15,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,9,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0
};

}

namespace RetroArch
{
class CrtShadersCrtRoyaleSrcFastCrtRoyaleBloomVerticalShaderDef : public ShaderDef
{
public:
	CrtShadersCrtRoyaleSrcFastCrtRoyaleBloomVerticalShaderDef() : ShaderDef{}
	{
		Name = "crt-royale-bloom-vertical";
		VertexByteCode = RetroArchCrtShadersCrtRoyaleSrcFastCrtRoyaleBloomVerticalShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchCrtShadersCrtRoyaleSrcFastCrtRoyaleBloomVerticalShaderDefs::sVertexByteCode);
		FragmentByteCode = RetroArchCrtShadersCrtRoyaleSrcFastCrtRoyaleBloomVerticalShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchCrtShadersCrtRoyaleSrcFastCrtRoyaleBloomVerticalShaderDefs::sFragmentByteCode);
		Format = "R8G8B8A8_SRGB";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("crt_gamma", 0, 64, 4, 1.000000f, 5.000000f, 2.400000f, 0.025000f, "Simulated CRT Gamma"));
		Params.push_back(ShaderParam("lcd_gamma", 0, 68, 4, 1.000000f, 5.000000f, 2.400000f, 0.025000f, "Your Display Gamma"));
		Params.push_back(ShaderParam("levels_contrast", 0, 72, 4, 0.000000f, 4.000000f, 0.671875f, 0.015625f, "Contrast"));
		Params.push_back(ShaderParam("bloom_underestimate_levels", 0, 76, 4, 0.000000f, 5.000000f, 1.000000f, 0.010000f, "Bloom - Underestimate Levels"));
		Params.push_back(ShaderParam("bloom_excess", 0, 80, 4, 0.000000f, 1.000000f, 0.000000f, 0.005000f, "Bloom - Excess"));
		Params.push_back(ShaderParam("beam_min_sigma", 0, 84, 4, 0.005000f, 1.000000f, 0.055000f, 0.005000f, "Beam - Min Sigma"));
		Params.push_back(ShaderParam("beam_max_sigma", 0, 88, 4, 0.005000f, 1.000000f, 0.200000f, 0.005000f, "Beam - Max Sigma"));
		Params.push_back(ShaderParam("beam_spot_power", 0, 92, 4, 0.010000f, 16.000000f, 0.380000f, 0.010000f, "Beam - Spot Power"));
		Params.push_back(ShaderParam("beam_min_shape", 0, 96, 4, 2.000000f, 32.000000f, 2.000000f, 0.100000f, "Beam - Min Shape"));
		Params.push_back(ShaderParam("beam_max_shape", 0, 100, 4, 2.000000f, 32.000000f, 2.000000f, 0.100000f, "Beam - Max Shape"));
		Params.push_back(ShaderParam("beam_shape_power", 0, 104, 4, 0.010000f, 16.000000f, 0.250000f, 0.010000f, "Beam - Shape Power"));
		Params.push_back(ShaderParam("beam_horiz_filter", 0, 108, 4, 0.000000f, 3.000000f, 0.000000f, 1.000000f, "Beam - Horiz Filter"));
		Params.push_back(ShaderParam("beam_horiz_sigma", 0, 112, 4, 0.000000f, 0.670000f, 0.350000f, 0.005000f, "Beam - Horiz Sigma"));
		Params.push_back(ShaderParam("beam_horiz_linear_rgb_weight", 0, 116, 4, 0.000000f, 1.000000f, 1.000000f, 0.010000f, "Beam - Horiz Linear RGB Weight"));
		Params.push_back(ShaderParam("convergence_offset_x_r", 0, 120, 4, -4.000000f, 4.000000f, 0.000000f, 0.050000f, "Convergence - Offset X Red"));
		Params.push_back(ShaderParam("convergence_offset_x_g", 0, 124, 4, -4.000000f, 4.000000f, 0.000000f, 0.050000f, "Convergence - Offset X Green"));
		Params.push_back(ShaderParam("convergence_offset_x_b", 0, 128, 4, -4.000000f, 4.000000f, 0.000000f, 0.050000f, "Convergence - Offset X Blue"));
		Params.push_back(ShaderParam("convergence_offset_y_r", 0, 132, 4, -2.000000f, 2.000000f, 0.050000f, 0.050000f, "Convergence - Offset Y Red"));
		Params.push_back(ShaderParam("convergence_offset_y_g", 0, 136, 4, -2.000000f, 2.000000f, -0.050000f, 0.050000f, "Convergence - Offset Y Green"));
		Params.push_back(ShaderParam("convergence_offset_y_b", 0, 140, 4, -2.000000f, 2.000000f, 0.050000f, 0.050000f, "Convergence - Offset Y Blue"));
		Params.push_back(ShaderParam("mask_type", 0, 144, 4, 0.000000f, 2.000000f, 0.000000f, 1.000000f, "Mask - Type"));
		Params.push_back(ShaderParam("mask_num_triads_desired", 0, 148, 4, 342.000000f, 1920.000000f, 480.000000f, 1.000000f, "Mask - Number of Triads Desired"));
		Params.push_back(ShaderParam("mask_triad_size_desired", 0, 152, 4, 1.000000f, 18.000000f, 3.000000f, 0.125000f, "Mask - Triad Size Desired"));
		Params.push_back(ShaderParam("mask_specify_num_triads", 0, 156, 4, 0.000000f, 1.000000f, 0.000000f, 1.000000f, "Mask - Specify Number of Triads"));
		Params.push_back(ShaderParam("aa_subpixel_r_offset_x_runtime", 0, 160, 4, -0.333333f, 0.333333f, -0.333333f, 0.333333f, "AA - Subpixel R Offset X"));
		Params.push_back(ShaderParam("aa_subpixel_r_offset_y_runtime", 0, 164, 4, -0.333333f, 0.333333f, 0.000000f, 0.333333f, "AA - Subpixel R Offset Y"));
		Params.push_back(ShaderParam("aa_cubic_c", 0, 168, 4, 0.000000f, 4.000000f, 0.500000f, 0.015625f, "AA - Cubic Sharpness"));
		Params.push_back(ShaderParam("aa_gauss_sigma", 0, 172, 4, 0.062500f, 1.000000f, 0.500000f, 0.015625f, "AA - Gaussian Sigma"));
		Params.push_back(ShaderParam("interlace_bff", 0, 176, 4, 0.000000f, 1.000000f, 0.000000f, 1.000000f, "Interlacing - Bottom Field First"));
		Params.push_back(ShaderParam("interlace_1080i", 0, 180, 4, 0.000000f, 1.000000f, 0.000000f, 1.000000f, "Interlace - Detect 1080i"));
		Params.push_back(ShaderParam("interlace_detect_toggle", 0, 184, 4, 0.000000f, 1.000000f, 0.000000f, 1.000000f, "Interlacing - Toggle"));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FrameCount", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("MASKED_SCANLINESSize", -1, 64, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("BLOOM_APPROXSize", -1, 80, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
