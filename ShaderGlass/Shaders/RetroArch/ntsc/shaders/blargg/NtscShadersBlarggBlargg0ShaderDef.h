/*
ShaderGlass shader ntsc/shaders/blargg\blargg-0 imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/ntsc/shaders/blargg/blargg-0.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

// NewRisingSun and blargg's NTSC filter
// simplified and ported to glsl by metallic77
// no license given, but I would expect it to inherit the LGPL license from the C version
// Colorspace conversion matrix for RGB-to-YIQ

*/

#pragma once

namespace RetroArchNtscShadersBlarggBlargg0ShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,144,72,
219,238,36,189,94,146,
108,132,60,95,26,150,
133,202,1,0,0,0,
68,4,0,0,5,0,
0,0,52,0,0,0,
224,1,0,0,44,2,
0,0,132,2,0,0,
168,3,0,0,82,68,
69,70,164,1,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
122,1,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,3,0,
0,0,120,0,0,0,
96,0,0,0,0,0,
0,0,0,0,0,0,
240,0,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,4,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,40,1,
0,0,64,0,0,0,
16,0,0,0,0,0,
0,0,68,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,104,1,0,0,
80,0,0,0,16,0,
0,0,0,0,0,0,
68,1,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
103,108,111,98,97,108,
95,77,86,80,0,102,
108,111,97,116,52,120,
52,0,2,0,3,0,
4,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,251,0,
0,0,103,108,111,98,
97,108,95,79,114,105,
103,105,110,97,108,83,
105,122,101,0,102,108,
111,97,116,52,0,171,
1,0,3,0,1,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,60,1,0,0,
103,108,111,98,97,108,
95,79,117,116,112,117,
116,83,105,122,101,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,171,171,
73,83,71,78,68,0,
0,0,2,0,0,0,
8,0,0,0,56,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
15,15,0,0,56,0,
0,0,1,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
3,3,0,0,84,69,
88,67,79,79,82,68,
0,171,171,171,79,83,
71,78,80,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,12,
0,0,65,0,0,0,
0,0,0,0,1,0,
0,0,3,0,0,0,
1,0,0,0,15,0,
0,0,84,69,88,67,
79,79,82,68,0,83,
86,95,80,111,115,105,
116,105,111,110,0,171,
171,171,83,72,69,88,
28,1,0,0,80,0,
1,0,71,0,0,0,
106,8,0,1,89,0,
0,4,70,142,32,0,
0,0,0,0,4,0,
0,0,95,0,0,3,
242,16,16,0,0,0,
0,0,95,0,0,3,
50,16,16,0,1,0,
0,0,101,0,0,3,
50,32,16,0,0,0,
0,0,103,0,0,4,
242,32,16,0,1,0,
0,0,1,0,0,0,
104,0,0,2,1,0,
0,0,56,0,0,10,
50,32,16,0,0,0,
0,0,70,16,16,0,
1,0,0,0,2,64,
0,0,71,3,128,63,
71,3,128,63,0,0,
0,0,0,0,0,0,
56,0,0,8,242,0,
16,0,0,0,0,0,
86,21,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,1,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,6,16,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
0,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,0,
16,0,0,0,0,0,
166,26,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,2,0,
0,0,70,14,16,0,
0,0,0,0,50,0,
0,10,242,32,16,0,
1,0,0,0,246,31,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,3,0,0,0,
70,14,16,0,0,0,
0,0,62,0,0,1,
83,84,65,84,148,0,
0,0,6,0,0,0,
1,0,0,0,0,0,
0,0,4,0,0,0,
5,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,77,11,
223,251,106,211,134,82,
242,23,149,53,78,100,
178,207,1,0,0,0,
100,11,0,0,5,0,
0,0,52,0,0,0,
84,6,0,0,136,6,
0,0,188,6,0,0,
200,10,0,0,82,68,
69,70,24,6,0,0,
2,0,0,0,220,0,
0,0,4,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
237,5,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
188,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,204,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,211,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
215,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
1,0,0,0,0,0,
0,0,95,83,111,117,
114,99,101,95,115,97,
109,112,108,101,114,0,
83,111,117,114,99,101,
0,85,66,79,0,80,
117,115,104,0,211,0,
0,0,3,0,0,0,
12,1,0,0,96,0,
0,0,0,0,0,0,
0,0,0,0,215,0,
0,0,16,0,0,0,
16,2,0,0,80,0,
0,0,0,0,0,0,
0,0,0,0,132,1,
0,0,0,0,0,0,
64,0,0,0,0,0,
0,0,152,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,188,1,0,0,
64,0,0,0,16,0,
0,0,2,0,0,0,
216,1,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
252,1,0,0,80,0,
0,0,16,0,0,0,
0,0,0,0,216,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,143,1,0,0,
103,108,111,98,97,108,
95,79,114,105,103,105,
110,97,108,83,105,122,
101,0,102,108,111,97,
116,52,0,171,1,0,
3,0,1,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
208,1,0,0,103,108,
111,98,97,108,95,79,
117,116,112,117,116,83,
105,122,101,0,171,171,
144,4,0,0,0,0,
0,0,16,0,0,0,
2,0,0,0,216,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,162,4,
0,0,16,0,0,0,
4,0,0,0,2,0,
0,0,188,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,224,4,0,0,
20,0,0,0,4,0,
0,0,0,0,0,0,
252,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
32,5,0,0,24,0,
0,0,4,0,0,0,
0,0,0,0,252,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,48,5,
0,0,28,0,0,0,
4,0,0,0,0,0,
0,0,252,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,64,5,0,0,
32,0,0,0,4,0,
0,0,2,0,0,0,
252,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
80,5,0,0,36,0,
0,0,4,0,0,0,
2,0,0,0,252,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,96,5,
0,0,40,0,0,0,
4,0,0,0,0,0,
0,0,252,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,114,5,0,0,
44,0,0,0,4,0,
0,0,0,0,0,0,
252,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
127,5,0,0,48,0,
0,0,4,0,0,0,
0,0,0,0,252,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,141,5,
0,0,52,0,0,0,
4,0,0,0,0,0,
0,0,252,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,159,5,0,0,
56,0,0,0,4,0,
0,0,0,0,0,0,
252,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
178,5,0,0,60,0,
0,0,4,0,0,0,
2,0,0,0,252,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,193,5,
0,0,64,0,0,0,
4,0,0,0,0,0,
0,0,252,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,206,5,0,0,
68,0,0,0,4,0,
0,0,2,0,0,0,
252,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
220,5,0,0,72,0,
0,0,4,0,0,0,
2,0,0,0,252,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,112,97,
114,97,109,115,95,83,
111,117,114,99,101,83,
105,122,101,0,112,97,
114,97,109,115,95,70,
114,97,109,101,67,111,
117,110,116,0,100,119,
111,114,100,0,171,171,
0,0,19,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,180,4,0,0,
112,97,114,97,109,115,
95,107,101,114,110,101,
108,95,104,97,108,102,
0,102,108,111,97,116,
0,171,171,171,0,0,
3,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
243,4,0,0,112,97,
114,97,109,115,95,110,
116,115,99,95,115,97,
116,0,112,97,114,97,
109,115,95,110,116,115,
99,95,114,101,115,0,
112,97,114,97,109,115,
95,110,116,115,99,95,
98,114,105,0,112,97,
114,97,109,115,95,110,
116,115,99,95,104,117,
101,0,112,97,114,97,
109,115,95,110,116,115,
99,95,115,104,97,114,
112,0,112,97,114,97,
109,115,95,102,114,105,
110,103,0,112,97,114,
97,109,115,95,97,102,
97,99,116,115,0,112,
97,114,97,109,115,95,
110,116,115,99,95,98,
108,101,101,100,0,112,
97,114,97,109,115,95,
76,85,77,65,95,67,
85,84,79,70,70,0,
112,97,114,97,109,115,
95,115,116,97,116,95,
112,104,0,112,97,114,
97,109,115,95,100,117,
109,109,121,0,112,97,
114,97,109,115,95,112,
105,95,109,111,100,0,
112,97,114,97,109,115,
95,118,101,114,116,95,
115,99,97,108,0,77,
105,99,114,111,115,111,
102,116,32,40,82,41,
32,72,76,83,76,32,
83,104,97,100,101,114,
32,67,111,109,112,105,
108,101,114,32,49,48,
46,49,0,171,171,171,
73,83,71,78,44,0,
0,0,1,0,0,0,
8,0,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
3,3,0,0,84,69,
88,67,79,79,82,68,
0,171,171,171,79,83,
71,78,44,0,0,0,
1,0,0,0,8,0,
0,0,32,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,0,
0,0,83,86,95,84,
97,114,103,101,116,0,
171,171,83,72,69,88,
4,4,0,0,80,0,
0,0,1,1,0,0,
106,8,0,1,89,0,
0,4,70,142,32,0,
0,0,0,0,5,0,
0,0,89,0,0,4,
70,142,32,0,1,0,
0,0,5,0,0,0,
90,0,0,3,0,96,
16,0,2,0,0,0,
88,24,0,4,0,112,
16,0,2,0,0,0,
85,85,0,0,98,16,
0,3,50,16,16,0,
0,0,0,0,101,0,
0,3,242,32,16,0,
0,0,0,0,104,0,
0,2,2,0,0,0,
85,0,0,8,18,0,
16,0,0,0,0,0,
10,128,32,0,1,0,
0,0,1,0,0,0,
1,64,0,0,1,0,
0,0,86,0,0,5,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,56,0,
0,7,34,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
0,63,65,0,0,5,
34,0,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,50,0,
0,10,18,0,16,0,
0,0,0,0,26,0,
16,128,65,0,0,0,
0,0,0,0,1,64,
0,0,0,0,0,64,
10,0,16,0,0,0,
0,0,77,0,0,6,
18,0,16,0,0,0,
0,0,0,208,0,0,
10,0,16,0,0,0,
0,0,49,0,0,8,
34,0,16,0,0,0,
0,0,1,64,0,0,
0,0,150,67,10,128,
32,0,0,0,0,0,
4,0,0,0,55,0,
0,9,34,0,16,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
0,64,1,64,0,0,
0,0,64,64,56,0,
0,8,194,0,16,0,
0,0,0,0,6,20,
16,0,0,0,0,0,
6,132,32,0,1,0,
0,0,0,0,0,0,
65,0,0,5,194,0,
16,0,0,0,0,0,
166,14,16,0,0,0,
0,0,14,0,0,7,
18,0,16,0,1,0,
0,0,58,0,16,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
65,0,0,5,18,0,
16,0,1,0,0,0,
10,0,16,0,1,0,
0,0,50,0,0,10,
34,0,16,0,0,0,
0,0,26,0,16,128,
65,0,0,0,0,0,
0,0,10,0,16,0,
1,0,0,0,58,0,
16,0,0,0,0,0,
56,0,0,8,98,0,
16,0,0,0,0,0,
86,6,16,0,0,0,
0,0,166,137,32,0,
1,0,0,0,4,0,
0,0,56,0,0,7,
34,0,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,1,64,
0,0,218,15,73,64,
50,0,0,9,34,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,1,64,0,0,
152,249,142,60,26,0,
16,0,0,0,0,0,
0,0,0,8,34,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,26,128,32,0,
1,0,0,0,2,0,
0,0,50,0,0,9,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,1,64,
0,0,218,15,73,64,
26,0,16,0,0,0,
0,0,24,0,0,8,
66,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,58,128,
32,0,1,0,0,0,
3,0,0,0,55,0,
0,9,18,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,77,0,
0,7,18,0,16,0,
0,0,0,0,18,0,
16,0,1,0,0,0,
10,0,16,0,0,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,226,0,16,0,
0,0,0,0,70,16,
16,0,0,0,0,0,
54,121,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,16,0,
0,10,34,0,16,0,
1,0,0,0,2,64,
0,0,231,140,24,63,
40,126,140,190,193,168,
164,190,0,0,0,0,
150,7,16,0,0,0,
0,0,56,0,0,7,
18,0,16,0,1,0,
0,0,10,0,16,0,
1,0,0,0,26,0,
16,0,1,0,0,0,
16,0,0,10,34,0,
16,0,1,0,0,0,
2,64,0,0,108,9,
153,62,162,69,22,63,
213,120,233,61,0,0,
0,0,150,7,16,0,
0,0,0,0,16,0,
0,10,34,0,16,0,
0,0,0,0,2,64,
0,0,117,147,88,62,
198,220,5,191,210,111,
159,62,0,0,0,0,
150,7,16,0,0,0,
0,0,50,0,0,10,
66,0,16,0,0,0,
0,0,26,0,16,0,
1,0,0,0,10,128,
32,0,1,0,0,0,
2,0,0,0,10,0,
16,0,1,0,0,0,
50,0,0,9,114,32,
16,0,0,0,0,0,
86,5,16,0,0,0,
0,0,6,0,16,0,
0,0,0,0,166,10,
16,0,0,0,0,0,
54,0,0,5,130,32,
16,0,0,0,0,0,
1,64,0,0,0,0,
128,63,62,0,0,1,
83,84,65,84,148,0,
0,0,30,0,0,0,
2,0,0,0,0,0,
0,0,2,0,0,0,
22,0,0,0,0,0,
0,0,1,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,2,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0
};


static const uint32_t sVertexHash[] = 
{
0x635b042f,0x418d5ec,0x34ede5be,0xab2af086,0x4a48875b,0xa6917bcd,
0x8d4549c5,0xac5ec671
};


static const uint32_t sFragmentHash[] =
{
0xbad4f4e8,0x314fc370,0x6016e488,0x7681756c,0xf5629b39,0x5157eef8,
0x7855597a,0x680badcf
};

}

namespace RetroArch
{
class NtscShadersBlarggBlargg0ShaderDef : public ShaderDef
{
public:
	NtscShadersBlarggBlargg0ShaderDef() : ShaderDef{}
	{
		Name = "blargg-0";
		VertexByteCode = RetroArchNtscShadersBlarggBlargg0ShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchNtscShadersBlarggBlargg0ShaderDefs::sVertexByteCode);
		VertexHash = RetroArchNtscShadersBlarggBlargg0ShaderDefs::sVertexHash;
		FragmentByteCode = RetroArchNtscShadersBlarggBlargg0ShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchNtscShadersBlarggBlargg0ShaderDefs::sFragmentByteCode);
		FragmentHash = RetroArchNtscShadersBlarggBlargg0ShaderDefs::sFragmentHash;
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", 0, 64, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", 0, 80, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FrameCount", -1, 16, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("kernel_half", -1, 20, 4, 1.000000f, 16.000000f, 16.000000f, 1.000000f, "Kernel Half-Size (speed-up)"));
		Params.push_back(ShaderParam("ntsc_sat", -1, 24, 4, 0.000000f, 6.000000f, 2.000000f, 0.050000f, "Saturation"));
		Params.push_back(ShaderParam("ntsc_res", -1, 28, 4, -1.000000f, 1.000000f, 0.000000f, 0.050000f, "Resolution"));
		Params.push_back(ShaderParam("ntsc_bri", -1, 32, 4, 0.000000f, 2.000000f, 1.000000f, 0.010000f, "Brightness"));
		Params.push_back(ShaderParam("ntsc_hue", -1, 36, 4, -1.000000f, 6.300000f, 0.000000f, 0.050000f, "Hue"));
		Params.push_back(ShaderParam("ntsc_sharp", -1, 40, 4, -1.000000f, 1.000000f, 0.100000f, 0.050000f, "Sharpness"));
		Params.push_back(ShaderParam("fring", -1, 44, 4, 0.000000f, 1.000000f, 0.000000f, 0.050000f, "Fringing"));
		Params.push_back(ShaderParam("afacts", -1, 48, 4, 0.000000f, 1.000000f, 0.000000f, 0.050000f, "Artifacts"));
		Params.push_back(ShaderParam("ntsc_bleed", -1, 52, 4, -0.750000f, 2.000000f, 0.000000f, 0.050000f, "Chroma Bleed"));
		Params.push_back(ShaderParam("LUMA_CUTOFF", -1, 56, 4, 0.000000f, 1.000000f, 0.200000f, 0.005000f, "Luma Cutoff"));
		Params.push_back(ShaderParam("stat_ph", -1, 60, 4, 0.000000f, 1.000000f, 0.000000f, 1.000000f, "Dot Crawl On/Off"));
		Params.push_back(ShaderParam("dummy", -1, 64, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, "[ System Specific Tweaks]"));
		Params.push_back(ShaderParam("pi_mod", -1, 68, 4, 1.000000f, 360.000000f, 96.000000f, 1.000000f, "Phase-Horiz. Angle"));
		Params.push_back(ShaderParam("vert_scal", -1, 72, 4, 0.000000f, 2.000000f, 0.666700f, 0.055550f, "Phase-Vertical Scale"));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
