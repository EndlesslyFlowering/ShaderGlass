/*
ShaderGlass shader bezel/Mega_Bezel/shaders/dedither / dedither-gamma-prep-1-before imported from MegaBezel:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/bezel/Mega_Bezel
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

// 'Removes' encoded gamma from color to put the color in linear space
// Adds gamma onto color in linear space to get a color with encoded gamma
// If the color was not already premultiplied (matted with black) premultiply it now
// Assumes Opacity is already encoded in alpha
// final sum and weight normalization
// Quadratic Bezier allows us to have a controlled falloff between 0 and 1
// One use is to avoid the perception of discontinuity at the outer edge experienced with a linear gradients
// Originally adapted by @kyndinfo from BEZMATH.PS (1993) by Don Lancaster
// http://www.tinaja.com/text/bezmath.html
// solve t from x (an inverse operation)
// Returns 1 if in_value < compare_value
// Useful when ifs are bad for performance
// Returns 1 if in_value > compare_value
// Useful when ifs are bad for performance
// Returns 1 if in_value == compare_value within the epsilon value provided
// Useful when ifs are bad for performance
// Sample the bilinear footprint.
// Bilinear filter.

*/

#pragma once

namespace RetroArchBezelMega_BezelShadersDeditherDeditherGammaPrep1BeforeShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,110,239,
1,38,44,138,120,137,
121,214,212,137,93,170,
129,5,1,0,0,0,
140,3,0,0,5,0,
0,0,52,0,0,0,
60,1,0,0,136,1,
0,0,224,1,0,0,
240,2,0,0,82,68,
69,70,0,1,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
216,0,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,1,0,
0,0,120,0,0,0,
64,0,0,0,0,0,
0,0,0,0,0,0,
160,0,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,180,0,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,171,0,0,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
80,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
65,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,8,1,
0,0,80,0,1,0,
66,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
95,0,0,3,242,16,
16,0,0,0,0,0,
95,0,0,3,50,16,
16,0,1,0,0,0,
101,0,0,3,50,32,
16,0,0,0,0,0,
103,0,0,4,242,32,
16,0,1,0,0,0,
1,0,0,0,104,0,
0,2,1,0,0,0,
54,0,0,5,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,56,0,0,8,
242,0,16,0,0,0,
0,0,86,21,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,6,16,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,0,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,166,26,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
2,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,32,
16,0,1,0,0,0,
246,31,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,3,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,6,0,
0,0,1,0,0,0,
0,0,0,0,4,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,90,225,
130,68,114,121,28,39,
143,145,93,242,90,77,
191,20,1,0,0,0,
108,5,0,0,5,0,
0,0,52,0,0,0,
48,3,0,0,100,3,
0,0,152,3,0,0,
208,4,0,0,82,68,
69,70,244,2,0,0,
1,0,0,0,184,0,
0,0,3,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
204,2,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,172,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,179,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,80,
117,115,104,0,179,0,
0,0,6,0,0,0,
208,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,192,1,
0,0,0,0,0,0,
16,0,0,0,0,0,
0,0,220,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,0,2,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
220,1,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
20,2,0,0,32,0,
0,0,16,0,0,0,
0,0,0,0,220,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,38,2,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,64,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,100,2,0,0,
52,0,0,0,4,0,
0,0,2,0,0,0,
132,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
168,2,0,0,56,0,
0,0,4,0,0,0,
2,0,0,0,132,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,112,97,
114,97,109,115,95,83,
111,117,114,99,101,83,
105,122,101,0,102,108,
111,97,116,52,0,171,
171,171,1,0,3,0,
1,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,210,1,
0,0,112,97,114,97,
109,115,95,79,114,105,
103,105,110,97,108,83,
105,122,101,0,112,97,
114,97,109,115,95,79,
117,116,112,117,116,83,
105,122,101,0,112,97,
114,97,109,115,95,70,
114,97,109,101,67,111,
117,110,116,0,100,119,
111,114,100,0,171,171,
0,0,19,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,56,2,0,0,
112,97,114,97,109,115,
95,83,71,80,84,95,
66,76,69,78,68,95,
79,80,84,73,79,78,
0,102,108,111,97,116,
0,171,0,0,3,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,125,2,
0,0,112,97,114,97,
109,115,95,72,83,77,
95,68,69,68,73,84,
72,69,82,95,66,82,
73,71,72,84,78,69,
83,83,95,66,73,65,
83,0,77,105,99,114,
111,115,111,102,116,32,
40,82,41,32,72,76,
83,76,32,83,104,97,
100,101,114,32,67,111,
109,112,105,108,101,114,
32,49,48,46,49,0,
73,83,71,78,44,0,
0,0,1,0,0,0,
8,0,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
3,3,0,0,84,69,
88,67,79,79,82,68,
0,171,171,171,79,83,
71,78,44,0,0,0,
1,0,0,0,8,0,
0,0,32,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,0,
0,0,83,86,95,84,
97,114,103,101,116,0,
171,171,83,72,69,88,
48,1,0,0,80,0,
0,0,76,0,0,0,
106,8,0,1,89,0,
0,4,70,142,32,0,
1,0,0,0,4,0,
0,0,90,0,0,3,
0,96,16,0,2,0,
0,0,88,24,0,4,
0,112,16,0,2,0,
0,0,85,85,0,0,
98,16,0,3,50,16,
16,0,0,0,0,0,
101,0,0,3,242,32,
16,0,0,0,0,0,
104,0,0,2,2,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,242,0,16,0,
0,0,0,0,70,16,
16,0,0,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,49,0,
0,8,18,0,16,0,
1,0,0,0,1,64,
0,0,0,0,0,63,
26,128,32,0,1,0,
0,0,3,0,0,0,
31,0,4,3,10,0,
16,0,1,0,0,0,
56,0,0,8,18,0,
16,0,1,0,0,0,
1,64,0,0,244,253,
84,60,42,128,32,0,
1,0,0,0,3,0,
0,0,47,0,0,5,
226,0,16,0,1,0,
0,0,6,9,16,0,
0,0,0,0,56,0,
0,7,114,0,16,0,
1,0,0,0,150,7,
16,0,1,0,0,0,
6,0,16,0,1,0,
0,0,25,0,0,5,
114,0,16,0,0,0,
0,0,70,2,16,0,
1,0,0,0,21,0,
0,1,54,0,0,5,
242,32,16,0,0,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,10,0,
0,0,2,0,0,0,
0,0,0,0,2,0,
0,0,5,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const uint32_t sVertexHash[] = 
{
0x127e4919,0x31a74326,0x67faba0c,0x2247acd6,0x4539f889,0x44bcfd46,
0x23ee94eb,0x2df32619
};


static const uint32_t sFragmentHash[] =
{
0x8395e4eb,0xa77104e3,0x8edab30c,0x6a68e9bd,0x54bb0907,0x57530a2b,
0xed011f21,0x899c0324
};

}

namespace RetroArch
{
class BezelMega_BezelShadersDeditherDeditherGammaPrep1BeforeShaderDef : public ShaderDef
{
public:
	BezelMega_BezelShadersDeditherDeditherGammaPrep1BeforeShaderDef() : ShaderDef{}
	{
		Name = "dedither-gamma-prep-1-before";
		VertexByteCode = RetroArchBezelMega_BezelShadersDeditherDeditherGammaPrep1BeforeShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchBezelMega_BezelShadersDeditherDeditherGammaPrep1BeforeShaderDefs::sVertexByteCode);
		VertexHash = RetroArchBezelMega_BezelShadersDeditherDeditherGammaPrep1BeforeShaderDefs::sVertexHash;
		FragmentByteCode = RetroArchBezelMega_BezelShadersDeditherDeditherGammaPrep1BeforeShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchBezelMega_BezelShadersDeditherDeditherGammaPrep1BeforeShaderDefs::sFragmentByteCode);
		FragmentHash = RetroArchBezelMega_BezelShadersDeditherDeditherGammaPrep1BeforeShaderDefs::sFragmentHash;
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FrameCount", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SGPT_BLEND_OPTION", -1, 52, 4, 0.000000f, 3.000000f, 0.000000f, 1.000000f, "Mode: OFF | CHECKERBOARD | VERTICAL LINES | BOTH"));
		Params.push_back(ShaderParam("HSM_DEDITHER_BRIGHTNESS_BIAS", -1, 56, 4, 10.000000f, 300.000000f, 100.000000f, 5.000000f, "Transparency Brightness Bias"));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
