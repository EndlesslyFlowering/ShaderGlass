/*
ShaderGlass shader bezel/Mega_Bezel/shaders/scalefx / hsm-scalefx-pass0 imported from MegaBezel:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/bezel/Mega_Bezel
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

// float HSM_SCALEFX_SOURCE_RES_DIVISION_FACTOR;
// Reference: http://www.compuphase.com/cmetric.htm
// HSM Removed
// #define TEX(x, y) textureOffset(Source, vTexCoord, ivec2(x, y)).rgb
// HSM Added
// read texels
// output

*/

#pragma once

namespace RetroArchBezelMega_BezelShadersScalefxHsmScalefxPass0ShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,110,239,
1,38,44,138,120,137,
121,214,212,137,93,170,
129,5,1,0,0,0,
140,3,0,0,5,0,
0,0,52,0,0,0,
60,1,0,0,136,1,
0,0,224,1,0,0,
240,2,0,0,82,68,
69,70,0,1,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
216,0,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,1,0,
0,0,120,0,0,0,
64,0,0,0,0,0,
0,0,0,0,0,0,
160,0,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,180,0,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,171,0,0,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
80,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
65,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,8,1,
0,0,80,0,1,0,
66,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
95,0,0,3,242,16,
16,0,0,0,0,0,
95,0,0,3,50,16,
16,0,1,0,0,0,
101,0,0,3,50,32,
16,0,0,0,0,0,
103,0,0,4,242,32,
16,0,1,0,0,0,
1,0,0,0,104,0,
0,2,1,0,0,0,
54,0,0,5,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,56,0,0,8,
242,0,16,0,0,0,
0,0,86,21,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,6,16,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,0,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,166,26,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
2,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,32,
16,0,1,0,0,0,
246,31,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,3,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,6,0,
0,0,1,0,0,0,
0,0,0,0,4,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,149,104,
7,82,105,142,166,28,
6,226,197,149,8,130,
45,145,1,0,0,0,
200,10,0,0,5,0,
0,0,52,0,0,0,
36,3,0,0,88,3,
0,0,140,3,0,0,
44,10,0,0,82,68,
69,70,232,2,0,0,
1,0,0,0,184,0,
0,0,3,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
192,2,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
1,0,0,0,1,0,
0,0,172,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,1,0,
0,0,1,0,0,0,
13,0,0,0,179,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,80,
117,115,104,0,179,0,
0,0,7,0,0,0,
208,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,232,1,
0,0,0,0,0,0,
16,0,0,0,2,0,
0,0,4,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,40,2,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
4,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
65,2,0,0,32,0,
0,0,4,0,0,0,
2,0,0,0,96,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,132,2,
0,0,36,0,0,0,
4,0,0,0,0,0,
0,0,96,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,147,2,0,0,
40,0,0,0,4,0,
0,0,0,0,0,0,
96,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
162,2,0,0,44,0,
0,0,4,0,0,0,
0,0,0,0,96,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,177,2,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,96,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,112,97,114,97,
109,115,95,83,111,117,
114,99,101,83,105,122,
101,0,102,108,111,97,
116,52,0,171,171,171,
1,0,3,0,1,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,250,1,0,0,
112,97,114,97,109,115,
95,115,99,97,108,101,
102,120,95,112,97,115,
115,48,83,105,122,101,
0,112,97,114,97,109,
115,95,72,83,77,95,
83,67,65,76,69,70,
88,95,79,78,0,102,
108,111,97,116,0,171,
171,171,0,0,3,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,87,2,
0,0,112,97,114,97,
109,115,95,83,70,88,
95,67,76,82,0,112,
97,114,97,109,115,95,
83,70,88,95,83,65,
65,0,112,97,114,97,
109,115,95,83,70,88,
95,83,67,78,0,112,
97,114,97,109,115,95,
83,70,88,95,82,65,
65,0,77,105,99,114,
111,115,111,102,116,32,
40,82,41,32,72,76,
83,76,32,83,104,97,
100,101,114,32,67,111,
109,112,105,108,101,114,
32,49,48,46,49,0,
73,83,71,78,44,0,
0,0,1,0,0,0,
8,0,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
3,3,0,0,84,69,
88,67,79,79,82,68,
0,171,171,171,79,83,
71,78,44,0,0,0,
1,0,0,0,8,0,
0,0,32,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,0,
0,0,83,86,95,84,
97,114,103,101,116,0,
171,171,83,72,69,88,
152,6,0,0,80,0,
0,0,166,1,0,0,
106,8,0,1,89,0,
0,4,70,142,32,0,
1,0,0,0,3,0,
0,0,90,0,0,3,
0,96,16,0,1,0,
0,0,88,24,0,4,
0,112,16,0,1,0,
0,0,85,85,0,0,
98,16,0,3,50,16,
16,0,0,0,0,0,
101,0,0,3,242,32,
16,0,0,0,0,0,
104,0,0,2,6,0,
0,0,49,0,0,8,
18,0,16,0,0,0,
0,0,10,128,32,0,
1,0,0,0,2,0,
0,0,1,64,0,0,
0,0,0,63,31,0,
4,3,10,0,16,0,
0,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,242,32,
16,0,0,0,0,0,
70,16,16,0,0,0,
0,0,70,126,16,0,
1,0,0,0,0,96,
16,0,1,0,0,0,
18,0,0,1,54,0,
0,8,242,32,16,0,
0,0,0,0,2,64,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
21,0,0,1,31,0,
0,3,10,0,16,0,
0,0,0,0,14,0,
0,11,242,0,16,0,
0,0,0,0,2,64,
0,0,0,0,128,191,
0,0,128,191,0,0,
0,0,0,0,128,191,
70,132,32,0,1,0,
0,0,0,0,0,0,
0,0,0,7,242,0,
16,0,0,0,0,0,
70,14,16,0,0,0,
0,0,70,20,16,0,
0,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,1,0,0,0,
70,0,16,0,0,0,
0,0,70,126,16,0,
1,0,0,0,0,96,
16,0,1,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
114,0,16,0,0,0,
0,0,230,10,16,0,
0,0,0,0,70,126,
16,0,1,0,0,0,
0,96,16,0,1,0,
0,0,14,0,0,11,
242,0,16,0,2,0,
0,0,2,64,0,0,
0,0,128,63,0,0,
128,191,0,0,128,63,
0,0,0,0,70,132,
32,0,1,0,0,0,
0,0,0,0,0,0,
0,7,242,0,16,0,
2,0,0,0,70,14,
16,0,2,0,0,0,
70,20,16,0,0,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,114,0,16,0,
3,0,0,0,70,0,
16,0,2,0,0,0,
70,126,16,0,1,0,
0,0,0,96,16,0,
1,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,4,0,0,0,
70,16,16,0,0,0,
0,0,70,126,16,0,
1,0,0,0,0,96,
16,0,1,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
114,0,16,0,2,0,
0,0,230,10,16,0,
2,0,0,0,70,126,
16,0,1,0,0,0,
0,96,16,0,1,0,
0,0,0,0,0,7,
130,0,16,0,0,0,
0,0,10,0,16,0,
1,0,0,0,10,0,
16,0,4,0,0,0,
56,0,0,7,130,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,63,0,0,
0,8,114,0,16,0,
1,0,0,0,70,2,
16,128,65,0,0,0,
1,0,0,0,70,2,
16,0,4,0,0,0,
50,0,0,15,98,0,
16,0,5,0,0,0,
246,15,16,0,0,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
128,63,0,0,128,191,
0,0,0,0,2,64,
0,0,0,0,0,0,
0,0,0,64,0,0,
64,64,0,0,0,0,
54,0,0,5,130,0,
16,0,5,0,0,0,
1,64,0,0,0,0,
128,64,56,0,0,7,
114,0,16,0,5,0,
0,0,70,2,16,0,
1,0,0,0,214,6,
16,0,5,0,0,0,
16,0,0,7,130,0,
16,0,0,0,0,0,
70,2,16,0,5,0,
0,0,70,2,16,0,
1,0,0,0,75,0,
0,5,130,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
56,0,0,7,18,32,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,1,64,0,0,
171,170,170,62,0,0,
0,7,130,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
10,0,16,0,4,0,
0,0,56,0,0,7,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,1,64,
0,0,0,0,0,63,
0,0,0,8,114,0,
16,0,0,0,0,0,
70,2,16,128,65,0,
0,0,0,0,0,0,
70,2,16,0,4,0,
0,0,50,0,0,15,
98,0,16,0,1,0,
0,0,246,15,16,0,
0,0,0,0,2,64,
0,0,0,0,0,0,
0,0,128,63,0,0,
128,191,0,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,64,
0,0,64,64,0,0,
0,0,54,0,0,5,
130,0,16,0,1,0,
0,0,1,64,0,0,
0,0,128,64,56,0,
0,7,114,0,16,0,
1,0,0,0,70,2,
16,0,0,0,0,0,
214,6,16,0,1,0,
0,0,16,0,0,7,
18,0,16,0,0,0,
0,0,70,2,16,0,
1,0,0,0,70,2,
16,0,0,0,0,0,
75,0,0,5,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,56,0,0,7,
34,32,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,1,64,
0,0,171,170,170,62,
0,0,0,7,18,0,
16,0,0,0,0,0,
10,0,16,0,3,0,
0,0,10,0,16,0,
4,0,0,0,56,0,
0,7,18,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
0,63,0,0,0,8,
226,0,16,0,0,0,
0,0,6,9,16,128,
65,0,0,0,3,0,
0,0,6,9,16,0,
4,0,0,0,50,0,
0,15,98,0,16,0,
1,0,0,0,6,0,
16,0,0,0,0,0,
2,64,0,0,0,0,
0,0,0,0,128,63,
0,0,128,191,0,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
0,64,0,0,64,64,
0,0,0,0,54,0,
0,5,130,0,16,0,
1,0,0,0,1,64,
0,0,0,0,128,64,
56,0,0,7,114,0,
16,0,1,0,0,0,
150,7,16,0,0,0,
0,0,214,6,16,0,
1,0,0,0,16,0,
0,7,18,0,16,0,
0,0,0,0,70,2,
16,0,1,0,0,0,
150,7,16,0,0,0,
0,0,75,0,0,5,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,56,0,
0,7,66,32,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
1,64,0,0,171,170,
170,62,0,0,0,7,
18,0,16,0,0,0,
0,0,10,0,16,0,
2,0,0,0,10,0,
16,0,4,0,0,0,
56,0,0,7,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,63,0,0,
0,8,226,0,16,0,
0,0,0,0,6,9,
16,128,65,0,0,0,
2,0,0,0,6,9,
16,0,4,0,0,0,
50,0,0,15,98,0,
16,0,1,0,0,0,
6,0,16,0,0,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
128,63,0,0,128,191,
0,0,0,0,2,64,
0,0,0,0,0,0,
0,0,0,64,0,0,
64,64,0,0,0,0,
54,0,0,5,130,0,
16,0,1,0,0,0,
1,64,0,0,0,0,
128,64,56,0,0,7,
114,0,16,0,1,0,
0,0,150,7,16,0,
0,0,0,0,214,6,
16,0,1,0,0,0,
16,0,0,7,18,0,
16,0,0,0,0,0,
70,2,16,0,1,0,
0,0,150,7,16,0,
0,0,0,0,75,0,
0,5,18,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
56,0,0,7,130,32,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,1,64,0,0,
171,170,170,62,21,0,
0,1,62,0,0,1,
83,84,65,84,148,0,
0,0,54,0,0,0,
6,0,0,0,0,0,
0,0,2,0,0,0,
37,0,0,0,0,0,
0,0,0,0,0,0,
2,0,0,0,2,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,6,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
5,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0
};


static const uint32_t sVertexHash[] = 
{
0x130d0a75,0x491d282d,0x603b70b5,0xb5e1f267,0xfe44b21a,0x194eef4c,
0x710195d5,0x4bf4015c
};


static const uint32_t sFragmentHash[] =
{
0x6cf99138,0x882c7834,0x66871ac1,0x1932c98f,0x5fb6db76,0xf142d623,
0xc23ff85c,0x1693f71d
};

}

namespace RetroArch
{
class BezelMega_BezelShadersScalefxHsmScalefxPass0ShaderDef : public ShaderDef
{
public:
	BezelMega_BezelShadersScalefxHsmScalefxPass0ShaderDef() : ShaderDef{}
	{
		Name = "hsm-scalefx-pass0";
		VertexByteCode = RetroArchBezelMega_BezelShadersScalefxHsmScalefxPass0ShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchBezelMega_BezelShadersScalefxHsmScalefxPass0ShaderDefs::sVertexByteCode);
		VertexHash = RetroArchBezelMega_BezelShadersScalefxHsmScalefxPass0ShaderDefs::sVertexHash;
		FragmentByteCode = RetroArchBezelMega_BezelShadersScalefxHsmScalefxPass0ShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchBezelMega_BezelShadersScalefxHsmScalefxPass0ShaderDefs::sFragmentByteCode);
		FragmentHash = RetroArchBezelMega_BezelShadersScalefxHsmScalefxPass0ShaderDefs::sFragmentHash;
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("scalefx_pass0Size", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("HSM_SCALEFX_ON", -1, 32, 4, 0.000000f, 1.000000f, 0.000000f, 1.000000f, "ScaleFx ON - Must Increase Core Res Sampling"));
		Params.push_back(ShaderParam("SFX_CLR", -1, 36, 4, 0.010000f, 1.000000f, 0.430000f, 0.010000f, "ScaleFX Threshold"));
		Params.push_back(ShaderParam("SFX_SAA", -1, 40, 4, 0.000000f, 1.000000f, 1.000000f, 1.000000f, "ScaleFX Filter AA"));
		Params.push_back(ShaderParam("SFX_SCN", -1, 44, 4, 0.000000f, 1.000000f, 0.000000f, 1.000000f, "ScaleFX Filter Corners"));
		Params.push_back(ShaderParam("SFX_RAA", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Samplers.push_back(ShaderSampler("Source", 1));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
