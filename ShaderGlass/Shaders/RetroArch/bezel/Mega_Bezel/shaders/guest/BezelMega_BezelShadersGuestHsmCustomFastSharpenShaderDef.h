/*
ShaderGlass shader bezel/Mega_Bezel/shaders/guest / hsm-custom-fast-sharpen imported from MegaBezel:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/bezel/Mega_Bezel
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

*/

#pragma once

namespace RetroArchBezelMega_BezelShadersGuestHsmCustomFastSharpenShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,110,239,
1,38,44,138,120,137,
121,214,212,137,93,170,
129,5,1,0,0,0,
140,3,0,0,5,0,
0,0,52,0,0,0,
60,1,0,0,136,1,
0,0,224,1,0,0,
240,2,0,0,82,68,
69,70,0,1,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
216,0,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,1,0,
0,0,120,0,0,0,
64,0,0,0,0,0,
0,0,0,0,0,0,
160,0,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,180,0,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,171,0,0,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
80,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
65,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,8,1,
0,0,80,0,1,0,
66,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
95,0,0,3,242,16,
16,0,0,0,0,0,
95,0,0,3,50,16,
16,0,1,0,0,0,
101,0,0,3,50,32,
16,0,0,0,0,0,
103,0,0,4,242,32,
16,0,1,0,0,0,
1,0,0,0,104,0,
0,2,1,0,0,0,
54,0,0,5,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,56,0,0,8,
242,0,16,0,0,0,
0,0,86,21,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,6,16,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,0,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,166,26,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
2,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,32,
16,0,1,0,0,0,
246,31,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,3,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,6,0,
0,0,1,0,0,0,
0,0,0,0,4,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,15,61,
72,241,139,185,205,250,
173,6,139,122,109,167,
143,134,1,0,0,0,
124,9,0,0,5,0,
0,0,52,0,0,0,
28,3,0,0,80,3,
0,0,132,3,0,0,
224,8,0,0,82,68,
69,70,224,2,0,0,
1,0,0,0,184,0,
0,0,3,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
184,2,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,172,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,179,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,80,
117,115,104,0,179,0,
0,0,7,0,0,0,
208,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,232,1,
0,0,0,0,0,0,
16,0,0,0,0,0,
0,0,4,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,40,2,0,0,
16,0,0,0,16,0,
0,0,2,0,0,0,
4,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
63,2,0,0,32,0,
0,0,4,0,0,0,
2,0,0,0,88,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,124,2,
0,0,36,0,0,0,
4,0,0,0,2,0,
0,0,88,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,140,2,0,0,
40,0,0,0,4,0,
0,0,2,0,0,0,
88,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
154,2,0,0,44,0,
0,0,4,0,0,0,
2,0,0,0,88,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,170,2,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,88,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,112,97,114,97,
109,115,95,83,111,117,
114,99,101,83,105,122,
101,0,102,108,111,97,
116,52,0,171,171,171,
1,0,3,0,1,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,250,1,0,0,
112,97,114,97,109,115,
95,68,101,114,101,122,
101,100,80,97,115,115,
83,105,122,101,0,112,
97,114,97,109,115,95,
83,72,65,82,80,69,
78,95,79,78,0,102,
108,111,97,116,0,171,
0,0,3,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,81,2,0,0,
112,97,114,97,109,115,
95,67,83,72,65,82,
80,69,78,0,112,97,
114,97,109,115,95,67,
67,79,78,84,82,0,
112,97,114,97,109,115,
95,67,68,69,84,65,
73,76,83,0,112,97,
114,97,109,115,95,68,
69,66,76,85,82,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,44,0,0,0,
1,0,0,0,8,0,
0,0,32,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,0,0,0,
83,86,95,84,97,114,
103,101,116,0,171,171,
83,72,69,88,84,5,
0,0,80,0,0,0,
85,1,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,1,0,
0,0,3,0,0,0,
90,0,0,3,0,96,
16,0,2,0,0,0,
88,24,0,4,0,112,
16,0,2,0,0,0,
85,85,0,0,98,16,
0,3,50,16,16,0,
0,0,0,0,101,0,
0,3,242,32,16,0,
0,0,0,0,104,0,
0,2,6,0,0,0,
49,0,0,8,18,0,
16,0,0,0,0,0,
10,128,32,0,1,0,
0,0,2,0,0,0,
1,64,0,0,0,0,
0,63,31,0,4,3,
10,0,16,0,0,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,242,32,16,0,
0,0,0,0,70,16,
16,0,0,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,18,0,
0,1,54,0,0,8,
242,32,16,0,0,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,21,0,
0,1,31,0,0,3,
10,0,16,0,0,0,
0,0,56,0,0,11,
82,0,16,0,0,0,
0,0,2,64,0,0,
0,0,0,191,0,0,
0,0,0,0,0,63,
0,0,0,0,166,138,
32,0,1,0,0,0,
1,0,0,0,54,0,
0,8,162,0,16,0,
0,0,0,0,2,64,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,7,242,0,
16,0,0,0,0,0,
70,14,16,0,0,0,
0,0,70,20,16,0,
0,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,1,0,0,0,
70,0,16,0,0,0,
0,0,70,126,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
114,0,16,0,0,0,
0,0,230,10,16,0,
0,0,0,0,70,126,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,114,0,16,0,
2,0,0,0,70,16,
16,0,0,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,0,0,
0,7,114,0,16,0,
3,0,0,0,70,2,
16,0,0,0,0,0,
70,2,16,0,1,0,
0,0,52,0,0,7,
130,0,16,0,0,0,
0,0,26,0,16,0,
2,0,0,0,10,0,
16,0,2,0,0,0,
52,0,0,7,130,0,
16,0,0,0,0,0,
42,0,16,0,2,0,
0,0,58,0,16,0,
0,0,0,0,0,0,
0,9,130,0,16,0,
1,0,0,0,42,128,
32,0,1,0,0,0,
2,0,0,0,42,128,
32,0,1,0,0,0,
2,0,0,0,50,0,
0,11,130,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
42,128,32,128,65,0,
0,0,1,0,0,0,
2,0,0,0,58,0,
16,0,1,0,0,0,
51,0,0,7,114,0,
16,0,4,0,0,0,
70,2,16,0,0,0,
0,0,70,2,16,0,
1,0,0,0,51,0,
0,7,114,0,16,0,
4,0,0,0,70,2,
16,0,2,0,0,0,
70,2,16,0,4,0,
0,0,0,0,0,8,
130,0,16,0,1,0,
0,0,58,0,16,128,
65,0,0,0,0,0,
0,0,1,64,0,0,
0,0,128,63,56,0,
0,7,114,0,16,0,
5,0,0,0,246,15,
16,0,1,0,0,0,
70,2,16,0,2,0,
0,0,51,0,0,7,
114,0,16,0,4,0,
0,0,70,2,16,0,
4,0,0,0,70,2,
16,0,5,0,0,0,
52,0,0,7,114,0,
16,0,0,0,0,0,
70,2,16,0,0,0,
0,0,70,2,16,0,
1,0,0,0,52,0,
0,7,114,0,16,0,
0,0,0,0,70,2,
16,0,2,0,0,0,
70,2,16,0,0,0,
0,0,0,0,0,7,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,1,64,
0,0,0,0,128,63,
56,0,0,7,114,0,
16,0,1,0,0,0,
246,15,16,0,0,0,
0,0,70,2,16,0,
2,0,0,0,52,0,
0,7,114,0,16,0,
0,0,0,0,70,2,
16,0,0,0,0,0,
70,2,16,0,1,0,
0,0,0,0,0,8,
114,0,16,0,1,0,
0,0,70,2,16,128,
65,0,0,0,4,0,
0,0,70,2,16,0,
0,0,0,0,0,0,
0,10,114,0,16,0,
1,0,0,0,70,2,
16,0,1,0,0,0,
2,64,0,0,23,183,
209,56,23,183,209,56,
23,183,209,56,0,0,
0,0,47,0,0,5,
114,0,16,0,1,0,
0,0,70,2,16,0,
1,0,0,0,56,0,
0,10,114,0,16,0,
1,0,0,0,70,2,
16,0,1,0,0,0,
2,64,0,0,0,0,
64,63,0,0,64,63,
0,0,64,63,0,0,
0,0,25,0,0,5,
114,0,16,0,1,0,
0,0,70,2,16,0,
1,0,0,0,56,0,
0,9,130,0,16,0,
0,0,0,0,58,128,
32,0,1,0,0,0,
2,0,0,0,26,128,
32,0,1,0,0,0,
2,0,0,0,50,0,
0,13,130,0,16,0,
1,0,0,0,26,128,
32,128,65,0,0,0,
1,0,0,0,2,0,
0,0,58,128,32,0,
1,0,0,0,2,0,
0,0,26,128,32,0,
1,0,0,0,2,0,
0,0,50,0,0,9,
114,0,16,0,1,0,
0,0,70,2,16,0,
1,0,0,0,246,15,
16,0,1,0,0,0,
246,15,16,0,0,0,
0,0,50,0,0,13,
114,0,16,0,3,0,
0,0,70,2,16,0,
3,0,0,0,2,64,
0,0,0,0,0,63,
0,0,0,63,0,0,
0,63,0,0,0,0,
70,2,16,128,65,0,
0,0,2,0,0,0,
50,0,0,10,114,0,
16,0,1,0,0,0,
70,2,16,128,65,0,
0,0,1,0,0,0,
70,2,16,0,3,0,
0,0,70,2,16,0,
2,0,0,0,52,0,
0,7,114,0,16,0,
1,0,0,0,70,2,
16,0,4,0,0,0,
70,2,16,0,1,0,
0,0,51,0,0,7,
114,32,16,0,0,0,
0,0,70,2,16,0,
0,0,0,0,70,2,
16,0,1,0,0,0,
54,0,0,5,130,32,
16,0,0,0,0,0,
1,64,0,0,0,0,
128,63,21,0,0,1,
62,0,0,1,83,84,
65,84,148,0,0,0,
43,0,0,0,6,0,
0,0,0,0,0,0,
2,0,0,0,30,0,
0,0,0,0,0,0,
0,0,0,0,2,0,
0,0,2,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};

}

namespace RetroArch
{
class BezelMega_BezelShadersGuestHsmCustomFastSharpenShaderDef : public ShaderDef
{
public:
	BezelMega_BezelShadersGuestHsmCustomFastSharpenShaderDef() : ShaderDef{}
	{
		Name = "hsm-custom-fast-sharpen";
		VertexByteCode = RetroArchBezelMega_BezelShadersGuestHsmCustomFastSharpenShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchBezelMega_BezelShadersGuestHsmCustomFastSharpenShaderDefs::sVertexByteCode);
		FragmentByteCode = RetroArchBezelMega_BezelShadersGuestHsmCustomFastSharpenShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchBezelMega_BezelShadersGuestHsmCustomFastSharpenShaderDefs::sFragmentByteCode);
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("DerezedPassSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SHARPEN_ON", -1, 32, 4, 0.000000f, 1.000000f, 1.000000f, 1.000000f, "FSharpen - ON"));
		Params.push_back(ShaderParam("CSHARPEN", -1, 36, 4, 0.000000f, 5.000000f, 0.000000f, 0.100000f, "FSharpen - Sharpen strength"));
		Params.push_back(ShaderParam("CCONTR", -1, 40, 4, 0.000000f, 0.250000f, 0.050000f, 0.010000f, "FSharpen - Sharpen Contrast/Ringing"));
		Params.push_back(ShaderParam("CDETAILS", -1, 44, 4, 0.000000f, 1.000000f, 1.000000f, 0.050000f, "FSharpen - Details sharpened"));
		Params.push_back(ShaderParam("DEBLUR", -1, 48, 4, 1.000000f, 7.000000f, 1.000000f, 0.250000f, "FSharpen - Deblur Strength (For NTSC Only)"));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
