/*
ShaderGlass shader bezel/Mega_Bezel/shaders/guest / hsm-gaussian_horizontal imported from MegaBezel:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/bezel/Mega_Bezel
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

*/

#pragma once

namespace RetroArchBezelMega_BezelShadersGuestHsmGaussian_horizontalShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,110,239,
1,38,44,138,120,137,
121,214,212,137,93,170,
129,5,1,0,0,0,
140,3,0,0,5,0,
0,0,52,0,0,0,
60,1,0,0,136,1,
0,0,224,1,0,0,
240,2,0,0,82,68,
69,70,0,1,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
216,0,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,1,0,
0,0,120,0,0,0,
64,0,0,0,0,0,
0,0,0,0,0,0,
160,0,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,180,0,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,171,0,0,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
80,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
65,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,8,1,
0,0,80,0,1,0,
66,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
95,0,0,3,242,16,
16,0,0,0,0,0,
95,0,0,3,50,16,
16,0,1,0,0,0,
101,0,0,3,50,32,
16,0,0,0,0,0,
103,0,0,4,242,32,
16,0,1,0,0,0,
1,0,0,0,104,0,
0,2,1,0,0,0,
54,0,0,5,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,56,0,0,8,
242,0,16,0,0,0,
0,0,86,21,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,6,16,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,0,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,166,26,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
2,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,32,
16,0,1,0,0,0,
246,31,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,3,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,6,0,
0,0,1,0,0,0,
0,0,0,0,4,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,252,62,
110,31,108,53,148,152,
90,161,15,160,55,206,
182,174,1,0,0,0,
24,13,0,0,5,0,
0,0,52,0,0,0,
224,3,0,0,20,4,
0,0,72,4,0,0,
124,12,0,0,82,68,
69,70,164,3,0,0,
1,0,0,0,200,0,
0,0,3,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
122,3,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,179,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,193,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,76,105,110,101,97,
114,105,122,101,80,97,
115,115,95,115,97,109,
112,108,101,114,0,76,
105,110,101,97,114,105,
122,101,80,97,115,115,
0,80,117,115,104,0,
171,171,193,0,0,0,
10,0,0,0,224,0,
0,0,64,0,0,0,
0,0,0,0,0,0,
0,0,112,2,0,0,
0,0,0,0,16,0,
0,0,2,0,0,0,
144,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
180,2,0,0,16,0,
0,0,4,0,0,0,
2,0,0,0,200,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,236,2,
0,0,20,0,0,0,
4,0,0,0,2,0,
0,0,200,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,251,2,0,0,
24,0,0,0,4,0,
0,0,2,0,0,0,
200,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
12,3,0,0,28,0,
0,0,4,0,0,0,
2,0,0,0,200,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,26,3,
0,0,32,0,0,0,
4,0,0,0,2,0,
0,0,200,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,47,3,0,0,
36,0,0,0,4,0,
0,0,0,0,0,0,
200,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
65,3,0,0,40,0,
0,0,4,0,0,0,
0,0,0,0,200,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,84,3,
0,0,44,0,0,0,
4,0,0,0,0,0,
0,0,200,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,103,3,0,0,
48,0,0,0,4,0,
0,0,0,0,0,0,
200,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
112,97,114,97,109,115,
95,68,101,114,101,122,
101,100,80,97,115,115,
83,105,122,101,0,102,
108,111,97,116,52,0,
171,171,1,0,3,0,
1,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,135,2,
0,0,112,97,114,97,
109,115,95,83,73,90,
69,72,0,102,108,111,
97,116,0,171,0,0,
3,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
193,2,0,0,112,97,
114,97,109,115,95,83,
73,71,77,65,95,72,
0,112,97,114,97,109,
115,95,70,73,78,69,
95,71,76,79,87,0,
112,97,114,97,109,115,
95,109,95,103,108,111,
119,0,112,97,114,97,
109,115,95,109,95,103,
108,111,119,95,99,117,
116,111,102,102,0,112,
97,114,97,109,115,95,
109,95,103,108,111,119,
95,108,111,119,0,112,
97,114,97,109,115,95,
109,95,103,108,111,119,
95,104,105,103,104,0,
112,97,114,97,109,115,
95,109,95,103,108,111,
119,95,100,105,115,116,
0,112,97,114,97,109,
115,95,109,95,103,108,
111,119,95,109,97,115,
107,0,77,105,99,114,
111,115,111,102,116,32,
40,82,41,32,72,76,
83,76,32,83,104,97,
100,101,114,32,67,111,
109,112,105,108,101,114,
32,49,48,46,49,0,
171,171,73,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,3,0,0,
84,69,88,67,79,79,
82,68,0,171,171,171,
79,83,71,78,44,0,
0,0,1,0,0,0,
8,0,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
15,0,0,0,83,86,
95,84,97,114,103,101,
116,0,171,171,83,72,
69,88,44,8,0,0,
80,0,0,0,11,2,
0,0,106,8,0,1,
89,0,0,4,70,142,
32,0,1,0,0,0,
3,0,0,0,90,0,
0,3,0,96,16,0,
2,0,0,0,88,24,
0,4,0,112,16,0,
2,0,0,0,85,85,
0,0,98,16,0,3,
50,16,16,0,0,0,
0,0,101,0,0,3,
242,32,16,0,0,0,
0,0,104,0,0,2,
7,0,0,0,15,0,
0,9,18,0,16,0,
0,0,0,0,86,133,
32,0,1,0,0,0,
1,0,0,0,86,133,
32,0,1,0,0,0,
1,0,0,0,14,0,
0,10,18,0,16,0,
0,0,0,0,2,64,
0,0,0,0,128,63,
0,0,128,63,0,0,
128,63,0,0,128,63,
10,0,16,0,0,0,
0,0,14,0,0,11,
194,0,16,0,1,0,
0,0,2,64,0,0,
0,0,128,63,0,0,
128,63,0,0,128,63,
0,0,128,63,166,138,
32,0,1,0,0,0,
1,0,0,0,0,0,
0,8,34,0,16,0,
0,0,0,0,1,64,
0,0,0,0,128,191,
42,128,32,0,1,0,
0,0,1,0,0,0,
51,0,0,7,34,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,54,0,
0,6,50,0,16,0,
1,0,0,0,166,138,
32,0,1,0,0,0,
1,0,0,0,0,0,
0,10,242,0,16,0,
1,0,0,0,70,14,
16,0,1,0,0,0,
2,64,0,0,0,0,
128,191,0,0,128,191,
0,0,128,191,0,0,
128,191,50,0,0,12,
242,0,16,0,1,0,
0,0,86,5,16,0,
0,0,0,0,70,14,
16,0,1,0,0,0,
2,64,0,0,0,0,
128,63,0,0,128,63,
0,0,128,63,0,0,
128,63,56,0,0,8,
242,0,16,0,1,0,
0,0,70,14,16,0,
1,0,0,0,70,142,
32,0,1,0,0,0,
0,0,0,0,56,0,
0,7,226,0,16,0,
0,0,0,0,6,4,
16,0,1,0,0,0,
6,20,16,0,0,0,
0,0,26,0,0,5,
34,0,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,0,0,
0,8,34,0,16,0,
0,0,0,0,26,0,
16,128,65,0,0,0,
0,0,0,0,1,64,
0,0,0,0,0,63,
65,0,0,5,194,0,
16,0,0,0,0,0,
166,14,16,0,0,0,
0,0,56,0,0,10,
50,0,16,0,1,0,
0,0,230,10,16,0,
1,0,0,0,2,64,
0,0,0,0,0,63,
0,0,0,63,0,0,
0,0,0,0,0,0,
50,0,0,9,194,0,
16,0,0,0,0,0,
166,14,16,0,0,0,
0,0,166,14,16,0,
1,0,0,0,6,4,
16,0,1,0,0,0,
56,0,0,9,18,0,
16,0,2,0,0,0,
42,0,16,0,1,0,
0,0,10,128,32,128,
65,0,0,0,1,0,
0,0,1,0,0,0,
54,0,0,8,162,0,
16,0,2,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,7,
50,0,16,0,1,0,
0,0,230,10,16,0,
0,0,0,0,70,0,
16,0,2,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
178,0,16,0,1,0,
0,0,70,0,16,0,
1,0,0,0,70,123,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,49,0,0,8,
18,0,16,0,2,0,
0,0,1,64,0,0,
0,0,0,63,58,128,
32,0,1,0,0,0,
1,0,0,0,0,0,
0,9,114,0,16,0,
3,0,0,0,70,3,
16,0,1,0,0,0,
6,128,32,128,65,0,
0,0,1,0,0,0,
2,0,0,0,52,0,
0,10,114,0,16,0,
3,0,0,0,70,2,
16,0,3,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,52,0,0,7,
34,0,16,0,2,0,
0,0,26,0,16,0,
3,0,0,0,10,0,
16,0,3,0,0,0,
52,0,0,7,34,0,
16,0,2,0,0,0,
42,0,16,0,3,0,
0,0,26,0,16,0,
2,0,0,0,0,0,
0,9,130,0,16,0,
3,0,0,0,26,0,
16,0,2,0,0,0,
10,128,32,128,65,0,
0,0,1,0,0,0,
2,0,0,0,52,0,
0,7,130,0,16,0,
3,0,0,0,58,0,
16,0,3,0,0,0,
1,64,0,0,0,0,
0,0,0,0,0,7,
34,0,16,0,2,0,
0,0,26,0,16,0,
2,0,0,0,1,64,
0,0,172,197,39,55,
56,0,0,7,114,0,
16,0,3,0,0,0,
246,15,16,0,3,0,
0,0,70,2,16,0,
3,0,0,0,14,0,
0,7,114,0,16,0,
3,0,0,0,70,2,
16,0,3,0,0,0,
86,5,16,0,2,0,
0,0,55,0,0,9,
178,0,16,0,1,0,
0,0,6,0,16,0,
2,0,0,0,70,8,
16,0,3,0,0,0,
70,12,16,0,1,0,
0,0,0,0,0,9,
34,0,16,0,2,0,
0,0,26,0,16,0,
0,0,0,0,10,128,
32,128,65,0,0,0,
1,0,0,0,1,0,
0,0,56,0,0,8,
34,0,16,0,2,0,
0,0,26,0,16,0,
2,0,0,0,26,0,
16,128,65,0,0,0,
2,0,0,0,56,0,
0,7,34,0,16,0,
2,0,0,0,10,0,
16,0,0,0,0,0,
26,0,16,0,2,0,
0,0,56,0,0,7,
34,0,16,0,2,0,
0,0,26,0,16,0,
2,0,0,0,1,64,
0,0,59,170,184,63,
25,0,0,5,34,0,
16,0,2,0,0,0,
26,0,16,0,2,0,
0,0,56,0,0,7,
178,0,16,0,1,0,
0,0,70,12,16,0,
1,0,0,0,86,5,
16,0,2,0,0,0,
0,0,0,9,18,0,
16,0,3,0,0,0,
1,64,0,0,0,0,
128,63,10,128,32,128,
65,0,0,0,1,0,
0,0,1,0,0,0,
54,0,0,5,226,0,
16,0,3,0,0,0,
6,13,16,0,1,0,
0,0,54,0,0,5,
18,0,16,0,4,0,
0,0,26,0,16,0,
2,0,0,0,54,0,
0,5,34,0,16,0,
4,0,0,0,10,0,
16,0,3,0,0,0,
48,0,0,1,49,0,
0,8,66,0,16,0,
4,0,0,0,10,128,
32,0,1,0,0,0,
1,0,0,0,26,0,
16,0,4,0,0,0,
3,0,4,3,42,0,
16,0,4,0,0,0,
56,0,0,7,66,0,
16,0,2,0,0,0,
42,0,16,0,1,0,
0,0,26,0,16,0,
4,0,0,0,0,0,
0,7,194,0,16,0,
4,0,0,0,166,14,
16,0,0,0,0,0,
166,14,16,0,2,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,114,0,16,0,
5,0,0,0,230,10,
16,0,4,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,0,0,
0,9,114,0,16,0,
6,0,0,0,70,2,
16,0,5,0,0,0,
6,128,32,128,65,0,
0,0,1,0,0,0,
2,0,0,0,52,0,
0,10,114,0,16,0,
6,0,0,0,70,2,
16,0,6,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,52,0,0,7,
66,0,16,0,2,0,
0,0,26,0,16,0,
6,0,0,0,10,0,
16,0,6,0,0,0,
52,0,0,7,66,0,
16,0,2,0,0,0,
42,0,16,0,6,0,
0,0,42,0,16,0,
2,0,0,0,0,0,
0,9,66,0,16,0,
4,0,0,0,42,0,
16,0,2,0,0,0,
10,128,32,128,65,0,
0,0,1,0,0,0,
2,0,0,0,52,0,
0,7,66,0,16,0,
4,0,0,0,42,0,
16,0,4,0,0,0,
1,64,0,0,0,0,
0,0,0,0,0,7,
66,0,16,0,2,0,
0,0,42,0,16,0,
2,0,0,0,1,64,
0,0,172,197,39,55,
56,0,0,7,114,0,
16,0,6,0,0,0,
166,10,16,0,4,0,
0,0,70,2,16,0,
6,0,0,0,14,0,
0,7,114,0,16,0,
6,0,0,0,70,2,
16,0,6,0,0,0,
166,10,16,0,2,0,
0,0,55,0,0,9,
114,0,16,0,5,0,
0,0,6,0,16,0,
2,0,0,0,70,2,
16,0,6,0,0,0,
70,2,16,0,5,0,
0,0,0,0,0,7,
66,0,16,0,2,0,
0,0,26,0,16,0,
0,0,0,0,26,0,
16,0,4,0,0,0,
56,0,0,8,66,0,
16,0,2,0,0,0,
42,0,16,0,2,0,
0,0,42,0,16,128,
65,0,0,0,2,0,
0,0,56,0,0,7,
66,0,16,0,2,0,
0,0,10,0,16,0,
0,0,0,0,42,0,
16,0,2,0,0,0,
56,0,0,7,66,0,
16,0,2,0,0,0,
42,0,16,0,2,0,
0,0,1,64,0,0,
59,170,184,63,25,0,
0,5,66,0,16,0,
2,0,0,0,42,0,
16,0,2,0,0,0,
50,0,0,9,226,0,
16,0,3,0,0,0,
6,9,16,0,5,0,
0,0,166,10,16,0,
2,0,0,0,86,14,
16,0,3,0,0,0,
0,0,0,7,18,0,
16,0,4,0,0,0,
42,0,16,0,2,0,
0,0,10,0,16,0,
4,0,0,0,0,0,
0,7,34,0,16,0,
4,0,0,0,26,0,
16,0,4,0,0,0,
1,64,0,0,0,0,
128,63,22,0,0,1,
14,0,0,7,114,32,
16,0,0,0,0,0,
150,7,16,0,3,0,
0,0,6,0,16,0,
4,0,0,0,54,0,
0,5,130,32,16,0,
0,0,0,0,1,64,
0,0,0,0,128,63,
62,0,0,1,83,84,
65,84,148,0,0,0,
68,0,0,0,7,0,
0,0,0,0,0,0,
2,0,0,0,54,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,6,0,
0,0,2,0,0,0,
2,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};


static const uint32_t sVertexHash[] = 
{
0x1a058a1,0x90748ab5,0xe61a8ae0,0x35315644,0x3fd886c3,0x7b68ba4,
0x3b2218b3,0x5f9e1493
};


static const uint32_t sFragmentHash[] =
{
0x8796579f,0x865d5c0d,0xbde0f978,0xb7a6538a,0x4dee97e1,0xbba286d5,
0x8e7cda16,0x427a110b
};

}

namespace RetroArch
{
class BezelMega_BezelShadersGuestHsmGaussian_horizontalShaderDef : public ShaderDef
{
public:
	BezelMega_BezelShadersGuestHsmGaussian_horizontalShaderDef() : ShaderDef{}
	{
		Name = "hsm-gaussian_horizontal";
		VertexByteCode = RetroArchBezelMega_BezelShadersGuestHsmGaussian_horizontalShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchBezelMega_BezelShadersGuestHsmGaussian_horizontalShaderDefs::sVertexByteCode);
		VertexHash = RetroArchBezelMega_BezelShadersGuestHsmGaussian_horizontalShaderDefs::sVertexHash;
		FragmentByteCode = RetroArchBezelMega_BezelShadersGuestHsmGaussian_horizontalShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchBezelMega_BezelShadersGuestHsmGaussian_horizontalShaderDefs::sFragmentByteCode);
		FragmentHash = RetroArchBezelMega_BezelShadersGuestHsmGaussian_horizontalShaderDefs::sFragmentHash;
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("DerezedPassSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SIZEH", -1, 16, 4, 1.000000f, 50.000000f, 6.000000f, 1.000000f, "Horizontal Glow Radius (Num Samples) -- SIZEH"));
		Params.push_back(ShaderParam("SIGMA_H", -1, 20, 4, 0.200000f, 15.000000f, 1.200000f, 0.050000f, "Horizontal Glow Sigma ( Spread ) -- SIGMA_H"));
		Params.push_back(ShaderParam("FINE_GLOW", -1, 24, 4, 1.000000f, 5.000000f, 1.000000f, 1.000000f, "Fine Glow/M.Glow Sampling"));
		Params.push_back(ShaderParam("m_glow", -1, 28, 4, 0.000000f, 1.000000f, 0.000000f, 1.000000f, "Ordinary Glow / Magic Glow -- m_glow"));
		Params.push_back(ShaderParam("m_glow_cutoff", -1, 32, 4, 0.000000f, 0.400000f, 0.120000f, 0.010000f, "Magic Glow Cutoff -- m_glow_cutoff"));
		Params.push_back(ShaderParam("m_glow_low", -1, 36, 4, 0.000000f, 7.000000f, 0.350000f, 0.050000f, "Magic Glow Low Strength -- m_glow_low"));
		Params.push_back(ShaderParam("m_glow_high", -1, 40, 4, 0.000000f, 7.000000f, 5.000000f, 0.100000f, "Magic Glow High Strength -- m_glow_high"));
		Params.push_back(ShaderParam("m_glow_dist", -1, 44, 4, 0.200000f, 4.000000f, 1.000000f, 0.050000f, "Magic Glow Distribution -- m_glow_dist"));
		Params.push_back(ShaderParam("m_glow_mask", -1, 48, 4, 0.000000f, 2.000000f, 1.000000f, 0.025000f, "Magic Glow Mask Strength -- m_glow_mask"));
		Samplers.push_back(ShaderSampler("LinearizePass", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
