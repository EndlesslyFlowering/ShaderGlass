/*
ShaderGlass shader bezel/uborder/shaders/support_shaders/koko-ambi-standalone\1_koko-ambi-avglum imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/23046258f7fd02242cc6dd4c08c997a8ddb84935/bezel/uborder/shaders/support_shaders/koko-ambi-standalone/1_koko-ambi-avglum.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

// Released under: See LICENSE.txt
//Calc a lod for a texture sized led_strip x led_strip
//Only update at right time; else return the previous frame.

*/

#pragma once

namespace RetroArchBezelUborderShadersSupport_shadersKokoAmbiStandalone1_kokoAmbiAvglumShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,232,76,
178,14,87,211,51,236,
70,237,181,87,109,179,
237,143,1,0,0,0,
48,5,0,0,5,0,
0,0,52,0,0,0,
120,2,0,0,196,2,
0,0,52,3,0,0,
148,4,0,0,82,68,
69,70,60,2,0,0,
2,0,0,0,136,0,
0,0,2,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
20,2,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
124,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,128,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,85,66,
79,0,80,117,115,104,
0,171,171,171,124,0,
0,0,1,0,0,0,
184,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,128,0,
0,0,3,0,0,0,
24,1,0,0,96,0,
0,0,0,0,0,0,
0,0,0,0,224,0,
0,0,0,0,0,0,
64,0,0,0,2,0,
0,0,244,0,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,103,108,111,98,
97,108,95,77,86,80,
0,102,108,111,97,116,
52,120,52,0,2,0,
3,0,4,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
235,0,0,0,144,1,
0,0,0,0,0,0,
64,0,0,0,0,0,
0,0,244,0,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,155,1,0,0,
64,0,0,0,16,0,
0,0,2,0,0,0,
180,1,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
216,1,0,0,80,0,
0,0,4,0,0,0,
0,0,0,0,240,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,112,97,
114,97,109,115,95,77,
86,80,0,112,97,114,
97,109,115,95,83,111,
117,114,99,101,83,105,
122,101,0,102,108,111,
97,116,52,0,1,0,
3,0,1,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
173,1,0,0,112,97,
114,97,109,115,95,70,
114,97,109,101,67,111,
117,110,116,0,100,119,
111,114,100,0,0,0,
19,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
234,1,0,0,77,105,
99,114,111,115,111,102,
116,32,40,82,41,32,
72,76,83,76,32,83,
104,97,100,101,114,32,
67,111,109,112,105,108,
101,114,32,49,48,46,
49,0,73,83,71,78,
68,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,15,0,0,
56,0,0,0,1,0,
0,0,0,0,0,0,
3,0,0,0,1,0,
0,0,3,3,0,0,
84,69,88,67,79,79,
82,68,0,171,171,171,
79,83,71,78,104,0,
0,0,3,0,0,0,
8,0,0,0,80,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
3,12,0,0,80,0,
0,0,1,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
4,11,0,0,89,0,
0,0,0,0,0,0,
1,0,0,0,3,0,
0,0,1,0,0,0,
15,0,0,0,84,69,
88,67,79,79,82,68,
0,83,86,95,80,111,
115,105,116,105,111,110,
0,171,171,171,83,72,
69,88,88,1,0,0,
80,0,1,0,86,0,
0,0,106,8,0,1,
89,0,0,4,70,142,
32,0,0,0,0,0,
4,0,0,0,89,0,
0,4,70,142,32,0,
1,0,0,0,5,0,
0,0,95,0,0,3,
242,16,16,0,0,0,
0,0,95,0,0,3,
50,16,16,0,1,0,
0,0,101,0,0,3,
50,32,16,0,0,0,
0,0,101,0,0,3,
66,32,16,0,0,0,
0,0,103,0,0,4,
242,32,16,0,1,0,
0,0,1,0,0,0,
104,0,0,2,1,0,
0,0,56,0,0,8,
18,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,62,26,128,
32,0,1,0,0,0,
4,0,0,0,47,0,
0,5,66,32,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
54,0,0,5,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,56,0,0,8,
242,0,16,0,0,0,
0,0,86,21,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,6,16,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,0,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,166,26,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
2,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,32,
16,0,1,0,0,0,
246,31,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,3,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,8,0,
0,0,1,0,0,0,
0,0,0,0,5,0,
0,0,6,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,47,102,
4,30,149,26,103,103,
29,114,13,14,53,73,
218,8,1,0,0,0,
32,6,0,0,5,0,
0,0,52,0,0,0,
212,2,0,0,32,3,
0,0,84,3,0,0,
132,5,0,0,82,68,
69,70,152,2,0,0,
1,0,0,0,44,1,
0,0,5,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
112,2,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
220,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,236,0,0,0,
3,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
1,0,0,0,9,1,
0,0,2,0,0,0,
5,0,0,0,4,0,
0,0,255,255,255,255,
2,0,0,0,1,0,
0,0,13,0,0,0,
16,1,0,0,2,0,
0,0,5,0,0,0,
4,0,0,0,255,255,
255,255,3,0,0,0,
1,0,0,0,13,0,
0,0,36,1,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,95,83,
111,117,114,99,101,95,
115,97,109,112,108,101,
114,0,95,97,118,103,
108,117,109,95,112,97,
115,115,70,101,101,100,
98,97,99,107,95,115,
97,109,112,108,101,114,
0,83,111,117,114,99,
101,0,97,118,103,108,
117,109,95,112,97,115,
115,70,101,101,100,98,
97,99,107,0,80,117,
115,104,0,171,171,171,
36,1,0,0,3,0,
0,0,68,1,0,0,
96,0,0,0,0,0,
0,0,0,0,0,0,
188,1,0,0,0,0,
0,0,64,0,0,0,
0,0,0,0,208,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,244,1,
0,0,64,0,0,0,
16,0,0,0,0,0,
0,0,16,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,52,2,0,0,
80,0,0,0,4,0,
0,0,2,0,0,0,
76,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
112,97,114,97,109,115,
95,77,86,80,0,102,
108,111,97,116,52,120,
52,0,2,0,3,0,
4,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,199,1,
0,0,112,97,114,97,
109,115,95,83,111,117,
114,99,101,83,105,122,
101,0,102,108,111,97,
116,52,0,171,171,171,
1,0,3,0,1,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,6,2,0,0,
112,97,114,97,109,115,
95,70,114,97,109,101,
67,111,117,110,116,0,
100,119,111,114,100,0,
0,0,19,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,70,2,0,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,3,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,4,4,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,0,0,0,
83,86,95,84,97,114,
103,101,116,0,171,171,
83,72,69,88,40,2,
0,0,80,0,0,0,
138,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,1,0,
0,0,6,0,0,0,
90,0,0,3,0,96,
16,0,2,0,0,0,
90,0,0,3,0,96,
16,0,3,0,0,0,
88,24,0,4,0,112,
16,0,2,0,0,0,
85,85,0,0,88,24,
0,4,0,112,16,0,
3,0,0,0,85,85,
0,0,98,16,0,3,
50,16,16,0,0,0,
0,0,98,16,0,3,
66,16,16,0,0,0,
0,0,101,0,0,3,
242,32,16,0,0,0,
0,0,104,0,0,2,
2,0,0,0,72,0,
0,141,194,0,0,128,
67,85,21,0,226,0,
16,0,0,0,0,0,
70,16,16,0,0,0,
0,0,54,121,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
42,16,16,0,0,0,
0,0,86,0,0,6,
18,0,16,0,1,0,
0,0,10,128,32,0,
1,0,0,0,5,0,
0,0,56,0,0,7,
34,0,16,0,1,0,
0,0,10,0,16,0,
1,0,0,0,1,64,
0,0,0,0,128,62,
65,0,0,5,34,0,
16,0,1,0,0,0,
26,0,16,0,1,0,
0,0,50,0,0,10,
18,0,16,0,1,0,
0,0,26,0,16,128,
65,0,0,0,1,0,
0,0,1,64,0,0,
0,0,128,64,10,0,
16,0,1,0,0,0,
24,0,0,7,18,0,
16,0,1,0,0,0,
10,0,16,0,1,0,
0,0,1,64,0,0,
0,0,0,0,31,0,
4,3,10,0,16,0,
1,0,0,0,72,0,
0,144,194,0,0,128,
67,85,21,0,226,0,
16,0,1,0,0,0,
2,64,0,0,0,0,
0,63,0,0,0,63,
0,0,0,0,0,0,
0,0,54,121,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
1,64,0,0,0,0,
160,65,16,0,0,10,
18,0,16,0,0,0,
0,0,150,7,16,0,
1,0,0,0,2,64,
0,0,171,170,170,62,
171,170,170,62,171,170,
170,62,0,0,0,0,
21,0,0,1,31,0,
0,3,10,0,16,0,
1,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,18,0,
16,0,1,0,0,0,
70,16,16,0,0,0,
0,0,54,121,16,0,
3,0,0,0,0,96,
16,0,3,0,0,0,
52,0,0,7,18,0,
16,0,0,0,0,0,
10,0,16,0,1,0,
0,0,1,64,0,0,
0,0,0,0,21,0,
0,1,54,0,0,5,
242,32,16,0,0,0,
0,0,150,3,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,16,0,
0,0,2,0,0,0,
0,0,0,0,3,0,
0,0,6,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
2,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,2,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,2,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};

}

namespace RetroArch
{
class BezelUborderShadersSupport_shadersKokoAmbiStandalone1_kokoAmbiAvglumShaderDef : public ShaderDef
{
public:
	BezelUborderShadersSupport_shadersKokoAmbiStandalone1_kokoAmbiAvglumShaderDef() : ShaderDef{}
	{
		Name = "1_koko-ambi-avglum";
		VertexByteCode = RetroArchBezelUborderShadersSupport_shadersKokoAmbiStandalone1_kokoAmbiAvglumShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchBezelUborderShadersSupport_shadersKokoAmbiStandalone1_kokoAmbiAvglumShaderDefs::sVertexByteCode);
		FragmentByteCode = RetroArchBezelUborderShadersSupport_shadersKokoAmbiStandalone1_kokoAmbiAvglumShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchBezelUborderShadersSupport_shadersKokoAmbiStandalone1_kokoAmbiAvglumShaderDefs::sFragmentByteCode);
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("MVP", -1, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 64, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FrameCount", -1, 80, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Samplers.push_back(ShaderSampler("Source", 2));
		Samplers.push_back(ShaderSampler("avglum_passFeedback", 3));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
