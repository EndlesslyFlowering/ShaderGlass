/*
ShaderGlass shader handheld/console-border/shader-files\gb-pass4 imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/handheld/console-border/shader-files/gb-pass4.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

////////////////////////////////////////////////////////////////////////////////
// Config                                                                     //
////////////////////////////////////////////////////////////////////////////////
// Useful to fine-tune the colors.
// Higher values make the "black" color closer to black - [0, 1] [DEFAULT: 0.95]
// Controls the ambient light of the screen.
// Lower values darken the screen - [0, 2] [DEFAULT: 1.00]
// Controls the opacity of the dot-matrix pixels.
// Lower values make pixels more transparent - [0, 1] [DEFAULT: 1.00]
// Higher values suppress changes in background color directly beneath
// the foreground to improve image clarity - [0, 1] [DEFAULT: 0.75]
// How strongly shadows affect the background
// Higher values darken the shadows - [0, 1] [DEFAULT: 0.55]
// How far the shadow should be shifted to the
// right in pixels - [-infinity, infinity] [DEFAULT: 1.0]
// How far the shadow should be shifted
// down in pixels - [-infinity, infinity] [DEFAULT: 1.5]
// Screen offset - [-infinity, infinity] [DEFAULT: 0]
// Screen offset - [-infinity, infinity] [DEFAULT: 0]
///////////////////////////////////////////////////////////////////////////
//                                                                       //
// Gameboy Classic Shader v0.2.2                                         //
//                                                                       //
// Copyright (C) 2013 Harlequin : unknown92835@gmail.com                 //
//                                                                       //
// This program is free software: you can redistribute it and/or modify  //
// it under the terms of the GNU General Public License as published by  //
// the Free Software Foundation, either version 3 of the License, or     //
// (at your option) any later version.                                   //
//                                                                       //
// This program is distributed in the hope that it will be useful,       //
// but WITHOUT ANY WARRANTY; without even the implied warranty of        //
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         //
// GNU General Public License for more details.                          //
//                                                                       //
// You should have received a copy of the GNU General Public License     //
// along with this program.  If not, see <http://www.gnu.org/licenses/>. //
//                                                                       //
///////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// Fragment definitions                                                       //
////////////////////////////////////////////////////////////////////////////////
// Sample the background color from the palette
// Offset for the shadow
// Offset for the entire screen
////////////////////////////////////////////////////////////////////////////////
// Fragment shader                                                            //
////////////////////////////////////////////////////////////////////////////////
// Sample all the relevant textures
// Foreground and background are blended with the background color
// Allows for highlights,
// background = bg_color when the background color is 0.5 gray
// Shadows are alpha blended with the background
// Foreground is alpha blended with the shadowed background

*/

#pragma once

namespace RetroArchHandheldConsoleBorderShaderFilesGbPass4ShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,133,115,
129,59,181,248,223,32,
171,233,103,206,34,222,
143,108,1,0,0,0,
172,7,0,0,5,0,
0,0,52,0,0,0,
16,5,0,0,92,5,
0,0,204,5,0,0,
16,7,0,0,82,68,
69,70,212,4,0,0,
2,0,0,0,136,0,
0,0,2,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
171,4,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
124,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,128,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,85,66,
79,0,80,117,115,104,
0,171,171,171,124,0,
0,0,1,0,0,0,
184,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,128,0,
0,0,13,0,0,0,
24,1,0,0,112,0,
0,0,0,0,0,0,
0,0,0,0,224,0,
0,0,0,0,0,0,
64,0,0,0,2,0,
0,0,244,0,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,103,108,111,98,
97,108,95,77,86,80,
0,102,108,111,97,116,
52,120,52,0,2,0,
3,0,4,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
235,0,0,0,32,3,
0,0,0,0,0,0,
16,0,0,0,0,0,
0,0,60,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,96,3,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
60,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
119,3,0,0,32,0,
0,0,16,0,0,0,
2,0,0,0,60,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,140,3,
0,0,48,0,0,0,
16,0,0,0,0,0,
0,0,60,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,166,3,0,0,
64,0,0,0,4,0,
0,0,0,0,0,0,
192,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
228,3,0,0,68,0,
0,0,4,0,0,0,
0,0,0,0,192,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,251,3,
0,0,72,0,0,0,
4,0,0,0,0,0,
0,0,192,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,19,4,0,0,
76,0,0,0,4,0,
0,0,0,0,0,0,
192,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
42,4,0,0,80,0,
0,0,4,0,0,0,
0,0,0,0,192,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,67,4,
0,0,84,0,0,0,
4,0,0,0,0,0,
0,0,192,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,93,4,0,0,
88,0,0,0,4,0,
0,0,0,0,0,0,
192,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
119,4,0,0,92,0,
0,0,4,0,0,0,
0,0,0,0,192,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,145,4,
0,0,96,0,0,0,
4,0,0,0,0,0,
0,0,192,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,114,101,103,105,
115,116,101,114,115,95,
79,117,116,112,117,116,
83,105,122,101,0,102,
108,111,97,116,52,0,
1,0,3,0,1,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,53,3,0,0,
114,101,103,105,115,116,
101,114,115,95,79,114,
105,103,105,110,97,108,
83,105,122,101,0,114,
101,103,105,115,116,101,
114,115,95,83,111,117,
114,99,101,83,105,122,
101,0,114,101,103,105,
115,116,101,114,115,95,
80,97,115,115,79,117,
116,112,117,116,83,105,
122,101,49,0,114,101,
103,105,115,116,101,114,
115,95,99,111,110,116,
114,97,115,116,0,102,
108,111,97,116,0,171,
0,0,3,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,185,3,0,0,
114,101,103,105,115,116,
101,114,115,95,115,99,
114,101,101,110,95,108,
105,103,104,116,0,114,
101,103,105,115,116,101,
114,115,95,112,105,120,
101,108,95,111,112,97,
99,105,116,121,0,114,
101,103,105,115,116,101,
114,115,95,98,103,95,
115,109,111,111,116,104,
105,110,103,0,114,101,
103,105,115,116,101,114,
115,95,115,104,97,100,
111,119,95,111,112,97,
99,105,116,121,0,114,
101,103,105,115,116,101,
114,115,95,115,104,97,
100,111,119,95,111,102,
102,115,101,116,95,120,
0,114,101,103,105,115,
116,101,114,115,95,115,
104,97,100,111,119,95,
111,102,102,115,101,116,
95,121,0,114,101,103,
105,115,116,101,114,115,
95,115,99,114,101,101,
110,95,111,102,102,115,
101,116,95,120,0,114,
101,103,105,115,116,101,
114,115,95,115,99,114,
101,101,110,95,111,102,
102,115,101,116,95,121,
0,77,105,99,114,111,
115,111,102,116,32,40,
82,41,32,72,76,83,
76,32,83,104,97,100,
101,114,32,67,111,109,
112,105,108,101,114,32,
49,48,46,49,0,171,
73,83,71,78,68,0,
0,0,2,0,0,0,
8,0,0,0,56,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
15,15,0,0,56,0,
0,0,1,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
3,3,0,0,84,69,
88,67,79,79,82,68,
0,171,171,171,79,83,
71,78,104,0,0,0,
3,0,0,0,8,0,
0,0,80,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,12,
0,0,80,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,12,3,
0,0,89,0,0,0,
0,0,0,0,1,0,
0,0,3,0,0,0,
1,0,0,0,15,0,
0,0,84,69,88,67,
79,79,82,68,0,83,
86,95,80,111,115,105,
116,105,111,110,0,171,
171,171,83,72,69,88,
60,1,0,0,80,0,
1,0,79,0,0,0,
106,8,0,1,89,0,
0,4,70,142,32,0,
0,0,0,0,4,0,
0,0,89,0,0,4,
70,142,32,0,1,0,
0,0,3,0,0,0,
95,0,0,3,242,16,
16,0,0,0,0,0,
95,0,0,3,50,16,
16,0,1,0,0,0,
101,0,0,3,50,32,
16,0,0,0,0,0,
101,0,0,3,194,32,
16,0,0,0,0,0,
103,0,0,4,242,32,
16,0,1,0,0,0,
1,0,0,0,104,0,
0,2,1,0,0,0,
54,0,0,5,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,54,0,0,6,
194,32,16,0,0,0,
0,0,166,142,32,0,
1,0,0,0,2,0,
0,0,56,0,0,8,
242,0,16,0,0,0,
0,0,86,21,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,6,16,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,0,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,166,26,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
2,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,32,
16,0,1,0,0,0,
246,31,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,3,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,7,0,
0,0,1,0,0,0,
0,0,0,0,5,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,254,23,
235,75,161,78,114,181,
235,187,124,171,34,100,
112,17,1,0,0,0,
16,12,0,0,5,0,
0,0,52,0,0,0,
240,5,0,0,60,6,
0,0,112,6,0,0,
116,11,0,0,82,68,
69,70,180,5,0,0,
1,0,0,0,224,1,
0,0,9,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
139,5,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,1,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
1,0,0,0,1,0,
0,0,108,1,0,0,
3,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,2,0,
0,0,1,0,0,0,
1,0,0,0,129,1,
0,0,3,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,1,0,
0,0,1,0,0,0,
149,1,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,4,0,0,0,
1,0,0,0,1,0,
0,0,172,1,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,1,0,
0,0,1,0,0,0,
13,0,0,0,179,1,
0,0,2,0,0,0,
5,0,0,0,4,0,
0,0,255,255,255,255,
2,0,0,0,1,0,
0,0,13,0,0,0,
191,1,0,0,2,0,
0,0,5,0,0,0,
4,0,0,0,255,255,
255,255,3,0,0,0,
1,0,0,0,13,0,
0,0,202,1,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,4,0,
0,0,1,0,0,0,
13,0,0,0,216,1,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,95,80,
97,115,115,79,117,116,
112,117,116,49,95,115,
97,109,112,108,101,114,
0,95,66,65,67,75,
71,82,79,85,78,68,
95,115,97,109,112,108,
101,114,0,95,67,79,
76,79,82,95,80,65,
76,69,84,84,69,95,
115,97,109,112,108,101,
114,0,83,111,117,114,
99,101,0,80,97,115,
115,79,117,116,112,117,
116,49,0,66,65,67,
75,71,82,79,85,78,
68,0,67,79,76,79,
82,95,80,65,76,69,
84,84,69,0,80,117,
115,104,0,171,171,171,
216,1,0,0,13,0,
0,0,248,1,0,0,
112,0,0,0,0,0,
0,0,0,0,0,0,
0,4,0,0,0,0,
0,0,16,0,0,0,
0,0,0,0,28,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,64,4,
0,0,16,0,0,0,
16,0,0,0,0,0,
0,0,28,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,87,4,0,0,
32,0,0,0,16,0,
0,0,0,0,0,0,
28,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
108,4,0,0,48,0,
0,0,16,0,0,0,
2,0,0,0,28,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,134,4,
0,0,64,0,0,0,
4,0,0,0,2,0,
0,0,160,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,196,4,0,0,
68,0,0,0,4,0,
0,0,2,0,0,0,
160,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
219,4,0,0,72,0,
0,0,4,0,0,0,
2,0,0,0,160,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,243,4,
0,0,76,0,0,0,
4,0,0,0,2,0,
0,0,160,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,10,5,0,0,
80,0,0,0,4,0,
0,0,2,0,0,0,
160,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
35,5,0,0,84,0,
0,0,4,0,0,0,
2,0,0,0,160,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,61,5,
0,0,88,0,0,0,
4,0,0,0,2,0,
0,0,160,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,87,5,0,0,
92,0,0,0,4,0,
0,0,2,0,0,0,
160,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
113,5,0,0,96,0,
0,0,4,0,0,0,
2,0,0,0,160,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,114,101,
103,105,115,116,101,114,
115,95,79,117,116,112,
117,116,83,105,122,101,
0,102,108,111,97,116,
52,0,1,0,3,0,
1,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,21,4,
0,0,114,101,103,105,
115,116,101,114,115,95,
79,114,105,103,105,110,
97,108,83,105,122,101,
0,114,101,103,105,115,
116,101,114,115,95,83,
111,117,114,99,101,83,
105,122,101,0,114,101,
103,105,115,116,101,114,
115,95,80,97,115,115,
79,117,116,112,117,116,
83,105,122,101,49,0,
114,101,103,105,115,116,
101,114,115,95,99,111,
110,116,114,97,115,116,
0,102,108,111,97,116,
0,171,0,0,3,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,153,4,
0,0,114,101,103,105,
115,116,101,114,115,95,
115,99,114,101,101,110,
95,108,105,103,104,116,
0,114,101,103,105,115,
116,101,114,115,95,112,
105,120,101,108,95,111,
112,97,99,105,116,121,
0,114,101,103,105,115,
116,101,114,115,95,98,
103,95,115,109,111,111,
116,104,105,110,103,0,
114,101,103,105,115,116,
101,114,115,95,115,104,
97,100,111,119,95,111,
112,97,99,105,116,121,
0,114,101,103,105,115,
116,101,114,115,95,115,
104,97,100,111,119,95,
111,102,102,115,101,116,
95,120,0,114,101,103,
105,115,116,101,114,115,
95,115,104,97,100,111,
119,95,111,102,102,115,
101,116,95,121,0,114,
101,103,105,115,116,101,
114,115,95,115,99,114,
101,101,110,95,111,102,
102,115,101,116,95,120,
0,114,101,103,105,115,
116,101,114,115,95,115,
99,114,101,101,110,95,
111,102,102,115,101,116,
95,121,0,77,105,99,
114,111,115,111,102,116,
32,40,82,41,32,72,
76,83,76,32,83,104,
97,100,101,114,32,67,
111,109,112,105,108,101,
114,32,49,48,46,49,
0,171,73,83,71,78,
68,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,3,0,0,
56,0,0,0,1,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,12,12,0,0,
84,69,88,67,79,79,
82,68,0,171,171,171,
79,83,71,78,44,0,
0,0,1,0,0,0,
8,0,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
15,0,0,0,83,86,
95,84,97,114,103,101,
116,0,171,171,83,72,
69,88,252,4,0,0,
80,0,0,0,63,1,
0,0,106,8,0,1,
89,0,0,4,70,142,
32,0,1,0,0,0,
7,0,0,0,90,0,
0,3,0,96,16,0,
1,0,0,0,90,0,
0,3,0,96,16,0,
2,0,0,0,90,0,
0,3,0,96,16,0,
3,0,0,0,90,0,
0,3,0,96,16,0,
4,0,0,0,88,24,
0,4,0,112,16,0,
1,0,0,0,85,85,
0,0,88,24,0,4,
0,112,16,0,2,0,
0,0,85,85,0,0,
88,24,0,4,0,112,
16,0,3,0,0,0,
85,85,0,0,88,24,
0,4,0,112,16,0,
4,0,0,0,85,85,
0,0,98,16,0,3,
50,16,16,0,0,0,
0,0,98,16,0,3,
194,16,16,0,0,0,
0,0,101,0,0,3,
242,32,16,0,0,0,
0,0,104,0,0,2,
5,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,242,0,
16,0,0,0,0,0,
70,16,16,0,0,0,
0,0,70,126,16,0,
3,0,0,0,0,96,
16,0,3,0,0,0,
0,0,0,10,242,0,
16,0,1,0,0,0,
70,14,16,0,0,0,
0,0,2,64,0,0,
0,0,0,191,0,0,
0,191,0,0,0,191,
0,0,0,191,56,0,
0,8,242,0,16,0,
1,0,0,0,70,14,
16,0,1,0,0,0,
246,143,32,0,1,0,
0,0,4,0,0,0,
56,0,0,8,50,0,
16,0,2,0,0,0,
70,16,16,0,0,0,
0,0,70,128,32,0,
1,0,0,0,3,0,
0,0,65,0,0,5,
50,0,16,0,2,0,
0,0,70,0,16,0,
2,0,0,0,0,0,
0,10,50,0,16,0,
2,0,0,0,70,0,
16,0,2,0,0,0,
2,64,0,0,0,0,
0,63,0,0,0,63,
0,0,0,0,0,0,
0,0,56,0,0,8,
114,0,16,0,3,0,
0,0,166,27,16,0,
0,0,0,0,118,142,
32,0,1,0,0,0,
5,0,0,0,56,0,
0,8,130,0,16,0,
3,0,0,0,58,16,
16,0,0,0,0,0,
10,128,32,0,1,0,
0,0,6,0,0,0,
50,0,0,11,50,0,
16,0,2,0,0,0,
70,0,16,0,2,0,
0,0,230,138,32,0,
1,0,0,0,3,0,
0,0,198,0,16,128,
65,0,0,0,3,0,
0,0,0,0,0,7,
194,0,16,0,2,0,
0,0,6,12,16,0,
3,0,0,0,86,9,
16,0,3,0,0,0,
0,0,0,8,194,0,
16,0,2,0,0,0,
166,14,16,128,65,0,
0,0,2,0,0,0,
6,20,16,0,0,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,242,0,16,0,
3,0,0,0,230,10,
16,0,2,0,0,0,
70,126,16,0,1,0,
0,0,0,96,16,0,
1,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,242,0,
16,0,2,0,0,0,
70,0,16,0,2,0,
0,0,70,126,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
49,0,0,7,18,0,
16,0,4,0,0,0,
1,64,0,0,0,0,
0,0,58,0,16,0,
2,0,0,0,1,0,
0,7,18,0,16,0,
4,0,0,0,10,0,
16,0,4,0,0,0,
1,64,0,0,0,0,
128,63,50,0,0,10,
242,0,16,0,0,0,
0,0,70,14,16,128,
65,0,0,0,1,0,
0,0,6,0,16,0,
4,0,0,0,70,14,
16,0,0,0,0,0,
69,0,0,142,194,0,
0,128,67,85,21,0,
114,0,16,0,1,0,
0,0,2,64,0,0,
0,0,128,62,0,0,
0,63,0,0,0,0,
0,0,0,0,70,126,
16,0,4,0,0,0,
0,96,16,0,4,0,
0,0,50,0,0,12,
114,0,16,0,1,0,
0,0,70,2,16,0,
0,0,0,0,2,64,
0,0,0,0,0,64,
0,0,0,64,0,0,
0,64,0,0,0,0,
70,2,16,0,1,0,
0,0,0,32,0,10,
114,0,16,0,0,0,
0,0,70,2,16,0,
1,0,0,0,2,64,
0,0,0,0,128,191,
0,0,128,191,0,0,
128,191,0,0,0,0,
56,0,0,9,18,0,
16,0,1,0,0,0,
10,128,32,0,1,0,
0,0,4,0,0,0,
10,128,32,0,1,0,
0,0,5,0,0,0,
50,0,0,10,34,0,
16,0,1,0,0,0,
58,0,16,128,65,0,
0,0,3,0,0,0,
10,0,16,0,1,0,
0,0,1,64,0,0,
0,0,128,63,56,0,
0,7,242,0,16,0,
3,0,0,0,246,15,
16,0,3,0,0,0,
70,14,16,0,3,0,
0,0,56,0,0,7,
242,0,16,0,0,0,
0,0,70,14,16,0,
0,0,0,0,86,5,
16,0,1,0,0,0,
50,0,0,9,242,0,
16,0,0,0,0,0,
70,14,16,0,3,0,
0,0,6,0,16,0,
1,0,0,0,70,14,
16,0,0,0,0,0,
56,0,0,8,18,0,
16,0,1,0,0,0,
58,0,16,0,2,0,
0,0,10,128,32,0,
1,0,0,0,4,0,
0,0,56,0,0,7,
242,0,16,0,2,0,
0,0,246,15,16,0,
2,0,0,0,70,14,
16,0,2,0,0,0,
50,0,0,12,18,0,
16,0,1,0,0,0,
10,0,16,128,65,0,
0,0,1,0,0,0,
42,128,32,0,1,0,
0,0,4,0,0,0,
26,128,32,0,1,0,
0,0,4,0,0,0,
56,0,0,7,242,0,
16,0,0,0,0,0,
70,14,16,0,0,0,
0,0,6,0,16,0,
1,0,0,0,50,0,
0,11,18,0,16,0,
1,0,0,0,58,0,
16,128,65,0,0,0,
2,0,0,0,10,128,
32,0,1,0,0,0,
4,0,0,0,1,64,
0,0,0,0,128,63,
50,0,0,9,242,32,
16,0,0,0,0,0,
70,14,16,0,2,0,
0,0,6,0,16,0,
1,0,0,0,70,14,
16,0,0,0,0,0,
62,0,0,1,83,84,
65,84,148,0,0,0,
31,0,0,0,5,0,
0,0,0,0,0,0,
3,0,0,0,25,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};


static const uint32_t sVertexHash[] = 
{
0x1cb7254c,0xab9bfe5,0xbc41c191,0x568d0dd8,0xff699089,0xf6405b73,
0x2be94562,0xe3dc544d
};


static const uint32_t sFragmentHash[] =
{
0x6eb47b2c,0xd2c6e1c7,0x97e7632e,0xd86609cb,0x27f21cd4,0x58043f8e,
0x997e149e,0xde61f4d0
};

}

namespace RetroArch
{
class HandheldConsoleBorderShaderFilesGbPass4ShaderDef : public ShaderDef
{
public:
	HandheldConsoleBorderShaderFilesGbPass4ShaderDef() : ShaderDef{}
	{
		Name = "gb-pass4";
		VertexByteCode = RetroArchHandheldConsoleBorderShaderFilesGbPass4ShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchHandheldConsoleBorderShaderFilesGbPass4ShaderDefs::sVertexByteCode);
		VertexHash = RetroArchHandheldConsoleBorderShaderFilesGbPass4ShaderDefs::sVertexHash;
		FragmentByteCode = RetroArchHandheldConsoleBorderShaderFilesGbPass4ShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchHandheldConsoleBorderShaderFilesGbPass4ShaderDefs::sFragmentByteCode);
		FragmentHash = RetroArchHandheldConsoleBorderShaderFilesGbPass4ShaderDefs::sFragmentHash;
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("PassOutputSize1", -1, 48, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("contrast", -1, 64, 4, 0.000000f, 1.000000f, 0.700000f, 0.050000f, "Contrast"));
		Params.push_back(ShaderParam("screen_light", -1, 68, 4, 0.000000f, 2.000000f, 0.850000f, 0.050000f, "Ambient Screen Light"));
		Params.push_back(ShaderParam("pixel_opacity", -1, 72, 4, 0.010000f, 1.000000f, 0.900000f, 0.010000f, "Pixel Opacity"));
		Params.push_back(ShaderParam("bg_smoothing", -1, 76, 4, 0.000000f, 1.000000f, 0.000000f, 0.050000f, "Background Smooth"));
		Params.push_back(ShaderParam("shadow_opacity", -1, 80, 4, 0.010000f, 1.000000f, 0.900000f, 0.010000f, "Shadow Opacity"));
		Params.push_back(ShaderParam("shadow_offset_x", -1, 84, 4, -5.000000f, 5.000000f, -1.500000f, 0.500000f, "Shadow Offset Horiz"));
		Params.push_back(ShaderParam("shadow_offset_y", -1, 88, 4, -5.000000f, 5.000000f, 1.500000f, 0.500000f, "Shadow Offset Vert"));
		Params.push_back(ShaderParam("screen_offset_x", -1, 92, 4, -5.000000f, 5.000000f, 0.000000f, 0.500000f, "Screen Offset Horiz"));
		Params.push_back(ShaderParam("screen_offset_y", -1, 96, 4, -5.000000f, 5.000000f, 0.000000f, 0.500000f, "Screen Offset Vert"));
		Samplers.push_back(ShaderSampler("PassOutput1", 2));
		Samplers.push_back(ShaderSampler("BACKGROUND", 3));
		Samplers.push_back(ShaderSampler("Source", 1));
		Samplers.push_back(ShaderSampler("COLOR_PALETTE", 4));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
