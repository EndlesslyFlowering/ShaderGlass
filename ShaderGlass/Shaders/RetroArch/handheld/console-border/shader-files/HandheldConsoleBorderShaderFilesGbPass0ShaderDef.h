/*
ShaderGlass shader handheld/console-border/shader-files\gb-pass0 imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/handheld/console-border/shader-files/gb-pass0.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

////////////////////////////////////////////////////////////////////////////////
// Config                                                                     //
////////////////////////////////////////////////////////////////////////////////
// The alpha value of dots in their "off" state
// Does not affect the border region of the screen - [0, 1]
// Fine-tune the balance between the different shades of grey
// Simulate response time
// Higher values result in longer color transition periods - [0, 1]
// Set video scale when used in console-border shaders
///////////////////////////////////////////////////////////////////////////
//                                                                       //
// Gameboy Classic Shader v0.2.2                                         //
//                                                                       //
// Copyright (C) 2013 Harlequin : unknown92835@gmail.com                 //
//                                                                       //
// This program is free software: you can redistribute it and/or modify  //
// it under the terms of the GNU General Public License as published by  //
// the Free Software Foundation, either version 3 of the License, or     //
// (at your option) any later version.                                   //
//                                                                       //
// This program is distributed in the hope that it will be useful,       //
// but WITHOUT ANY WARRANTY; without even the implied warranty of        //
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         //
// GNU General Public License for more details.                          //
//                                                                       //
// You should have received a copy of the GNU General Public License     //
// along with this program.  If not, see <http://www.gnu.org/licenses/>. //
//                                                                       //
///////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// Vertex shader                                                              //
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// Vertex definitions                                                         //
////////////////////////////////////////////////////////////////////////////////
// Largest integer scale of input video that will fit in the current output (y axis would typically be limiting on widescreens)
//#define video_scale         floor(registers.OutputSize.y * registers.SourceSize.w) <- moved to parameter
// Size of the scaled video
//#define scaled_video_out    (registers.SourceSize.xy * vec2(video_scale)) <- moved to parameter
// Remaps position to integer scaled output
////////////////////////////////////////////////////////////////////////////////
// Fragment shader                                                            //
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//fragment definitions                                                        //
////////////////////////////////////////////////////////////////////////////////
//#define rgb_to_alpha(rgb) ( ((rgb.r + rgb.g + rgb.b) / 3.0) + (is_on_dot * vec2(registers.baseline_alpha), 1.0) )       //averages rgb values (allows it to work with color games), modified for contrast and base alpha
// Frame sampling definitions
// Determine if the corrent texel lies on a dot or in the space between dots
// Sample color from the current and previous frames, apply response time modifier
// Response time effect implmented through an exponential dropoff algorithm
// Apply foreground color and assign alpha value
// Apply the foreground color to all texels -
// the color will be modified by alpha later - and assign alpha based on rgb input
// Overlay the matrix
// If the fragment is not on a dot, set its alpha value to 0

*/

#pragma once

namespace RetroArchHandheldConsoleBorderShaderFilesGbPass0ShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,240,138,
164,121,118,250,103,27,
25,105,216,98,219,161,
1,154,1,0,0,0,
60,7,0,0,5,0,
0,0,52,0,0,0,
212,3,0,0,32,4,
0,0,168,4,0,0,
160,6,0,0,82,68,
69,70,152,3,0,0,
2,0,0,0,136,0,
0,0,2,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
109,3,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
124,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,128,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,85,66,
79,0,80,117,115,104,
0,171,171,171,124,0,
0,0,1,0,0,0,
184,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,128,0,
0,0,8,0,0,0,
24,1,0,0,80,0,
0,0,0,0,0,0,
0,0,0,0,224,0,
0,0,0,0,0,0,
64,0,0,0,2,0,
0,0,244,0,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,103,108,111,98,
97,108,95,77,86,80,
0,102,108,111,97,116,
52,120,52,0,2,0,
3,0,4,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
235,0,0,0,88,2,
0,0,0,0,0,0,
16,0,0,0,2,0,
0,0,116,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,152,2,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
116,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
175,2,0,0,32,0,
0,0,16,0,0,0,
2,0,0,0,116,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,196,2,
0,0,48,0,0,0,
16,0,0,0,0,0,
0,0,116,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,227,2,0,0,
64,0,0,0,4,0,
0,0,0,0,0,0,
4,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
40,3,0,0,68,0,
0,0,4,0,0,0,
0,0,0,0,4,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,63,3,
0,0,72,0,0,0,
4,0,0,0,0,0,
0,0,4,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,87,3,0,0,
76,0,0,0,4,0,
0,0,2,0,0,0,
4,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
114,101,103,105,115,116,
101,114,115,95,79,117,
116,112,117,116,83,105,
122,101,0,102,108,111,
97,116,52,0,1,0,
3,0,1,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
109,2,0,0,114,101,
103,105,115,116,101,114,
115,95,79,114,105,103,
105,110,97,108,83,105,
122,101,0,114,101,103,
105,115,116,101,114,115,
95,83,111,117,114,99,
101,83,105,122,101,0,
114,101,103,105,115,116,
101,114,115,95,79,114,
105,103,105,110,97,108,
72,105,115,116,111,114,
121,83,105,122,101,49,
0,114,101,103,105,115,
116,101,114,115,95,98,
97,115,101,108,105,110,
101,95,97,108,112,104,
97,0,102,108,111,97,
116,0,171,171,0,0,
3,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
252,2,0,0,114,101,
103,105,115,116,101,114,
115,95,103,114,101,121,
95,98,97,108,97,110,
99,101,0,114,101,103,
105,115,116,101,114,115,
95,114,101,115,112,111,
110,115,101,95,116,105,
109,101,0,114,101,103,
105,115,116,101,114,115,
95,118,105,100,101,111,
95,115,99,97,108,101,
0,77,105,99,114,111,
115,111,102,116,32,40,
82,41,32,72,76,83,
76,32,83,104,97,100,
101,114,32,67,111,109,
112,105,108,101,114,32,
49,48,46,49,0,171,
171,171,73,83,71,78,
68,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,15,0,0,
56,0,0,0,1,0,
0,0,0,0,0,0,
3,0,0,0,1,0,
0,0,3,3,0,0,
84,69,88,67,79,79,
82,68,0,171,171,171,
79,83,71,78,128,0,
0,0,4,0,0,0,
8,0,0,0,104,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
3,12,0,0,104,0,
0,0,2,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
12,3,0,0,104,0,
0,0,3,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
3,12,0,0,113,0,
0,0,0,0,0,0,
1,0,0,0,3,0,
0,0,2,0,0,0,
15,0,0,0,84,69,
88,67,79,79,82,68,
0,83,86,95,80,111,
115,105,116,105,111,110,
0,171,171,171,83,72,
69,88,240,1,0,0,
80,0,1,0,124,0,
0,0,106,8,0,1,
89,0,0,4,70,142,
32,0,0,0,0,0,
4,0,0,0,89,0,
0,4,70,142,32,0,
1,0,0,0,5,0,
0,0,95,0,0,3,
242,16,16,0,0,0,
0,0,95,0,0,3,
50,16,16,0,1,0,
0,0,101,0,0,3,
50,32,16,0,0,0,
0,0,101,0,0,3,
194,32,16,0,0,0,
0,0,101,0,0,3,
50,32,16,0,1,0,
0,0,103,0,0,4,
242,32,16,0,2,0,
0,0,1,0,0,0,
104,0,0,2,2,0,
0,0,54,0,0,5,
50,32,16,0,0,0,
0,0,70,16,16,0,
1,0,0,0,54,0,
0,6,194,32,16,0,
0,0,0,0,166,142,
32,0,1,0,0,0,
2,0,0,0,56,0,
0,9,50,0,16,0,
0,0,0,0,70,128,
32,0,1,0,0,0,
2,0,0,0,246,143,
32,0,1,0,0,0,
4,0,0,0,14,0,
0,10,50,32,16,0,
1,0,0,0,2,64,
0,0,0,0,128,63,
0,0,128,63,0,0,
128,63,0,0,128,63,
70,0,16,0,0,0,
0,0,14,0,0,8,
50,0,16,0,0,0,
0,0,70,128,32,0,
1,0,0,0,0,0,
0,0,70,0,16,0,
0,0,0,0,56,0,
0,8,242,0,16,0,
1,0,0,0,86,21,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,1,0,0,0,
50,0,0,10,242,0,
16,0,1,0,0,0,
6,16,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,0,0,
0,0,70,14,16,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
1,0,0,0,166,26,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,2,0,0,0,
70,14,16,0,1,0,
0,0,50,0,0,10,
242,0,16,0,1,0,
0,0,246,31,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
3,0,0,0,70,14,
16,0,1,0,0,0,
54,0,0,8,194,0,
16,0,0,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,0,
0,0,128,63,0,0,
128,63,14,0,0,7,
242,32,16,0,2,0,
0,0,70,14,16,0,
1,0,0,0,70,14,
16,0,0,0,0,0,
62,0,0,1,83,84,
65,84,148,0,0,0,
12,0,0,0,2,0,
0,0,0,0,0,0,
6,0,0,0,8,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,21,169,
66,183,251,137,41,57,
159,2,162,2,88,212,
18,133,1,0,0,0,
28,17,0,0,5,0,
0,0,52,0,0,0,
224,6,0,0,68,7,
0,0,120,7,0,0,
128,16,0,0,82,68,
69,70,164,6,0,0,
1,0,0,0,12,4,
0,0,19,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
121,6,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,2,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,172,2,0,0,
3,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
1,0,0,0,198,2,
0,0,3,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
4,0,0,0,1,0,
0,0,1,0,0,0,
224,2,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,5,0,0,0,
1,0,0,0,1,0,
0,0,250,2,0,0,
3,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,6,0,
0,0,1,0,0,0,
1,0,0,0,20,3,
0,0,3,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
7,0,0,0,1,0,
0,0,1,0,0,0,
46,3,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,8,0,0,0,
1,0,0,0,1,0,
0,0,72,3,0,0,
3,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,9,0,
0,0,1,0,0,0,
1,0,0,0,98,3,
0,0,3,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
10,0,0,0,1,0,
0,0,1,0,0,0,
121,3,0,0,2,0,
0,0,5,0,0,0,
4,0,0,0,255,255,
255,255,2,0,0,0,
1,0,0,0,13,0,
0,0,128,3,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,3,0,
0,0,1,0,0,0,
13,0,0,0,145,3,
0,0,2,0,0,0,
5,0,0,0,4,0,
0,0,255,255,255,255,
4,0,0,0,1,0,
0,0,13,0,0,0,
162,3,0,0,2,0,
0,0,5,0,0,0,
4,0,0,0,255,255,
255,255,5,0,0,0,
1,0,0,0,13,0,
0,0,179,3,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,6,0,
0,0,1,0,0,0,
13,0,0,0,196,3,
0,0,2,0,0,0,
5,0,0,0,4,0,
0,0,255,255,255,255,
7,0,0,0,1,0,
0,0,13,0,0,0,
213,3,0,0,2,0,
0,0,5,0,0,0,
4,0,0,0,255,255,
255,255,8,0,0,0,
1,0,0,0,13,0,
0,0,230,3,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,9,0,
0,0,1,0,0,0,
13,0,0,0,247,3,
0,0,2,0,0,0,
5,0,0,0,4,0,
0,0,255,255,255,255,
10,0,0,0,1,0,
0,0,13,0,0,0,
5,4,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
1,0,0,0,0,0,
0,0,95,83,111,117,
114,99,101,95,115,97,
109,112,108,101,114,0,
95,79,114,105,103,105,
110,97,108,72,105,115,
116,111,114,121,49,95,
115,97,109,112,108,101,
114,0,95,79,114,105,
103,105,110,97,108,72,
105,115,116,111,114,121,
50,95,115,97,109,112,
108,101,114,0,95,79,
114,105,103,105,110,97,
108,72,105,115,116,111,
114,121,51,95,115,97,
109,112,108,101,114,0,
95,79,114,105,103,105,
110,97,108,72,105,115,
116,111,114,121,52,95,
115,97,109,112,108,101,
114,0,95,79,114,105,
103,105,110,97,108,72,
105,115,116,111,114,121,
53,95,115,97,109,112,
108,101,114,0,95,79,
114,105,103,105,110,97,
108,72,105,115,116,111,
114,121,54,95,115,97,
109,112,108,101,114,0,
95,79,114,105,103,105,
110,97,108,72,105,115,
116,111,114,121,55,95,
115,97,109,112,108,101,
114,0,95,67,79,76,
79,82,95,80,65,76,
69,84,84,69,95,115,
97,109,112,108,101,114,
0,83,111,117,114,99,
101,0,79,114,105,103,
105,110,97,108,72,105,
115,116,111,114,121,49,
0,79,114,105,103,105,
110,97,108,72,105,115,
116,111,114,121,50,0,
79,114,105,103,105,110,
97,108,72,105,115,116,
111,114,121,51,0,79,
114,105,103,105,110,97,
108,72,105,115,116,111,
114,121,52,0,79,114,
105,103,105,110,97,108,
72,105,115,116,111,114,
121,53,0,79,114,105,
103,105,110,97,108,72,
105,115,116,111,114,121,
54,0,79,114,105,103,
105,110,97,108,72,105,
115,116,111,114,121,55,
0,67,79,76,79,82,
95,80,65,76,69,84,
84,69,0,80,117,115,
104,0,171,171,5,4,
0,0,8,0,0,0,
36,4,0,0,80,0,
0,0,0,0,0,0,
0,0,0,0,100,5,
0,0,0,0,0,0,
16,0,0,0,0,0,
0,0,128,5,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,164,5,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
128,5,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
187,5,0,0,32,0,
0,0,16,0,0,0,
0,0,0,0,128,5,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,208,5,
0,0,48,0,0,0,
16,0,0,0,0,0,
0,0,128,5,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,239,5,0,0,
64,0,0,0,4,0,
0,0,2,0,0,0,
16,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
52,6,0,0,68,0,
0,0,4,0,0,0,
2,0,0,0,16,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,75,6,
0,0,72,0,0,0,
4,0,0,0,2,0,
0,0,16,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,99,6,0,0,
76,0,0,0,4,0,
0,0,0,0,0,0,
16,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
114,101,103,105,115,116,
101,114,115,95,79,117,
116,112,117,116,83,105,
122,101,0,102,108,111,
97,116,52,0,1,0,
3,0,1,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
121,5,0,0,114,101,
103,105,115,116,101,114,
115,95,79,114,105,103,
105,110,97,108,83,105,
122,101,0,114,101,103,
105,115,116,101,114,115,
95,83,111,117,114,99,
101,83,105,122,101,0,
114,101,103,105,115,116,
101,114,115,95,79,114,
105,103,105,110,97,108,
72,105,115,116,111,114,
121,83,105,122,101,49,
0,114,101,103,105,115,
116,101,114,115,95,98,
97,115,101,108,105,110,
101,95,97,108,112,104,
97,0,102,108,111,97,
116,0,171,171,0,0,
3,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
8,6,0,0,114,101,
103,105,115,116,101,114,
115,95,103,114,101,121,
95,98,97,108,97,110,
99,101,0,114,101,103,
105,115,116,101,114,115,
95,114,101,115,112,111,
110,115,101,95,116,105,
109,101,0,114,101,103,
105,115,116,101,114,115,
95,118,105,100,101,111,
95,115,99,97,108,101,
0,77,105,99,114,111,
115,111,102,116,32,40,
82,41,32,72,76,83,
76,32,83,104,97,100,
101,114,32,67,111,109,
112,105,108,101,114,32,
49,48,46,49,0,171,
171,171,73,83,71,78,
92,0,0,0,3,0,
0,0,8,0,0,0,
80,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,3,0,0,
80,0,0,0,2,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,12,12,0,0,
80,0,0,0,3,0,
0,0,0,0,0,0,
3,0,0,0,1,0,
0,0,3,3,0,0,
84,69,88,67,79,79,
82,68,0,171,171,171,
79,83,71,78,44,0,
0,0,1,0,0,0,
8,0,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
15,0,0,0,83,86,
95,84,97,114,103,101,
116,0,171,171,83,72,
69,88,0,9,0,0,
80,0,0,0,64,2,
0,0,106,8,0,1,
89,0,0,4,70,142,
32,0,1,0,0,0,
5,0,0,0,90,0,
0,3,0,96,16,0,
2,0,0,0,90,0,
0,3,0,96,16,0,
3,0,0,0,90,0,
0,3,0,96,16,0,
4,0,0,0,90,0,
0,3,0,96,16,0,
5,0,0,0,90,0,
0,3,0,96,16,0,
6,0,0,0,90,0,
0,3,0,96,16,0,
7,0,0,0,90,0,
0,3,0,96,16,0,
8,0,0,0,90,0,
0,3,0,96,16,0,
9,0,0,0,90,0,
0,3,0,96,16,0,
10,0,0,0,88,24,
0,4,0,112,16,0,
2,0,0,0,85,85,
0,0,88,24,0,4,
0,112,16,0,3,0,
0,0,85,85,0,0,
88,24,0,4,0,112,
16,0,4,0,0,0,
85,85,0,0,88,24,
0,4,0,112,16,0,
5,0,0,0,85,85,
0,0,88,24,0,4,
0,112,16,0,6,0,
0,0,85,85,0,0,
88,24,0,4,0,112,
16,0,7,0,0,0,
85,85,0,0,88,24,
0,4,0,112,16,0,
8,0,0,0,85,85,
0,0,88,24,0,4,
0,112,16,0,9,0,
0,0,85,85,0,0,
88,24,0,4,0,112,
16,0,10,0,0,0,
85,85,0,0,98,16,
0,3,50,16,16,0,
0,0,0,0,98,16,
0,3,194,16,16,0,
0,0,0,0,98,16,
0,3,50,16,16,0,
1,0,0,0,101,0,
0,3,242,32,16,0,
0,0,0,0,104,0,
0,2,3,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
114,0,16,0,0,0,
0,0,70,16,16,0,
0,0,0,0,70,126,
16,0,5,0,0,0,
0,96,16,0,5,0,
0,0,0,0,0,11,
114,0,16,0,0,0,
0,0,70,2,16,128,
65,0,0,0,0,0,
0,0,2,64,0,0,
0,0,128,63,0,0,
128,63,0,0,128,63,
0,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,1,0,0,0,
70,16,16,0,0,0,
0,0,70,126,16,0,
3,0,0,0,0,96,
16,0,3,0,0,0,
0,0,0,11,114,0,
16,0,1,0,0,0,
70,2,16,128,65,0,
0,0,1,0,0,0,
2,64,0,0,0,0,
128,63,0,0,128,63,
0,0,128,63,0,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,114,0,16,0,
2,0,0,0,70,16,
16,0,0,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,0,0,
0,11,114,0,16,0,
2,0,0,0,70,2,
16,128,65,0,0,0,
2,0,0,0,2,64,
0,0,0,0,128,63,
0,0,128,63,0,0,
128,63,0,0,0,0,
0,0,0,9,114,0,
16,0,1,0,0,0,
70,2,16,128,129,0,
0,0,1,0,0,0,
70,2,16,128,193,0,
0,0,2,0,0,0,
50,0,0,11,114,0,
16,0,1,0,0,0,
70,2,16,0,1,0,
0,0,166,138,32,0,
1,0,0,0,4,0,
0,0,70,2,16,128,
129,0,0,0,2,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,114,0,16,0,
2,0,0,0,70,16,
16,0,0,0,0,0,
70,126,16,0,4,0,
0,0,0,96,16,0,
4,0,0,0,0,0,
0,11,114,0,16,0,
2,0,0,0,70,2,
16,128,65,0,0,0,
2,0,0,0,2,64,
0,0,0,0,128,63,
0,0,128,63,0,0,
128,63,0,0,0,0,
0,0,0,9,114,0,
16,0,2,0,0,0,
70,2,16,128,65,0,
0,0,1,0,0,0,
70,2,16,128,129,0,
0,0,2,0,0,0,
56,0,0,9,130,0,
16,0,0,0,0,0,
42,128,32,0,1,0,
0,0,4,0,0,0,
42,128,32,0,1,0,
0,0,4,0,0,0,
50,0,0,9,114,0,
16,0,1,0,0,0,
70,2,16,0,2,0,
0,0,246,15,16,0,
0,0,0,0,70,2,
16,0,1,0,0,0,
0,0,0,9,114,0,
16,0,0,0,0,0,
70,2,16,128,129,0,
0,0,0,0,0,0,
70,2,16,128,65,0,
0,0,1,0,0,0,
56,0,0,8,130,0,
16,0,1,0,0,0,
58,0,16,0,0,0,
0,0,42,128,32,0,
1,0,0,0,4,0,
0,0,50,0,0,9,
114,0,16,0,0,0,
0,0,70,2,16,0,
0,0,0,0,246,15,
16,0,1,0,0,0,
70,2,16,0,1,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,114,0,16,0,
1,0,0,0,70,16,
16,0,0,0,0,0,
70,126,16,0,6,0,
0,0,0,96,16,0,
6,0,0,0,0,0,
0,11,114,0,16,0,
1,0,0,0,70,2,
16,128,65,0,0,0,
1,0,0,0,2,64,
0,0,0,0,128,63,
0,0,128,63,0,0,
128,63,0,0,0,0,
0,0,0,9,114,0,
16,0,1,0,0,0,
70,2,16,128,65,0,
0,0,0,0,0,0,
70,2,16,128,129,0,
0,0,1,0,0,0,
56,0,0,7,130,0,
16,0,1,0,0,0,
58,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,56,0,
0,7,130,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
58,0,16,0,1,0,
0,0,50,0,0,9,
114,0,16,0,0,0,
0,0,70,2,16,0,
1,0,0,0,246,15,
16,0,1,0,0,0,
70,2,16,0,0,0,
0,0,56,0,0,8,
18,0,16,0,1,0,
0,0,58,0,16,0,
1,0,0,0,42,128,
32,0,1,0,0,0,
4,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,226,0,
16,0,1,0,0,0,
70,16,16,0,0,0,
0,0,54,121,16,0,
7,0,0,0,0,96,
16,0,7,0,0,0,
0,0,0,11,226,0,
16,0,1,0,0,0,
86,14,16,128,65,0,
0,0,1,0,0,0,
2,64,0,0,0,0,
0,0,0,0,128,63,
0,0,128,63,0,0,
128,63,0,0,0,9,
226,0,16,0,1,0,
0,0,6,9,16,128,
65,0,0,0,0,0,
0,0,86,14,16,128,
129,0,0,0,1,0,
0,0,50,0,0,9,
114,0,16,0,0,0,
0,0,150,7,16,0,
1,0,0,0,6,0,
16,0,1,0,0,0,
70,2,16,0,0,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,114,0,16,0,
1,0,0,0,70,16,
16,0,0,0,0,0,
70,126,16,0,8,0,
0,0,0,96,16,0,
8,0,0,0,0,0,
0,11,114,0,16,0,
1,0,0,0,70,2,
16,128,65,0,0,0,
1,0,0,0,2,64,
0,0,0,0,128,63,
0,0,128,63,0,0,
128,63,0,0,0,0,
0,0,0,9,114,0,
16,0,1,0,0,0,
70,2,16,128,65,0,
0,0,0,0,0,0,
70,2,16,128,129,0,
0,0,1,0,0,0,
50,0,0,9,114,0,
16,0,0,0,0,0,
70,2,16,0,1,0,
0,0,246,15,16,0,
0,0,0,0,70,2,
16,0,0,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
114,0,16,0,1,0,
0,0,70,16,16,0,
0,0,0,0,70,126,
16,0,9,0,0,0,
0,96,16,0,9,0,
0,0,0,0,0,11,
114,0,16,0,1,0,
0,0,70,2,16,128,
65,0,0,0,1,0,
0,0,2,64,0,0,
0,0,128,63,0,0,
128,63,0,0,128,63,
0,0,0,0,0,0,
0,9,114,0,16,0,
1,0,0,0,70,2,
16,128,65,0,0,0,
0,0,0,0,70,2,
16,128,129,0,0,0,
1,0,0,0,47,0,
0,6,130,0,16,0,
0,0,0,0,42,128,
32,0,1,0,0,0,
4,0,0,0,56,0,
0,7,130,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
224,64,25,0,0,5,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,50,0,
0,9,114,0,16,0,
0,0,0,0,70,2,
16,0,1,0,0,0,
246,15,16,0,0,0,
0,0,70,2,16,0,
0,0,0,0,0,0,
0,7,18,0,16,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,0,0,0,7,
18,0,16,0,0,0,
0,0,42,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
14,0,0,8,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,26,128,32,0,
1,0,0,0,4,0,
0,0,56,0,0,7,
34,0,16,0,0,0,
0,0,58,16,16,0,
0,0,0,0,1,64,
0,0,71,3,128,63,
14,0,0,7,66,0,
16,0,0,0,0,0,
26,16,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,65,0,
0,5,66,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
50,0,0,10,34,0,
16,0,0,0,0,0,
26,0,16,128,65,0,
0,0,0,0,0,0,
42,0,16,0,0,0,
0,0,26,16,16,0,
0,0,0,0,14,0,
0,7,66,0,16,0,
0,0,0,0,10,16,
16,0,0,0,0,0,
42,16,16,0,0,0,
0,0,65,0,0,5,
66,0,16,0,0,0,
0,0,42,0,16,0,
0,0,0,0,50,0,
0,10,66,0,16,0,
0,0,0,0,42,16,
16,128,65,0,0,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
10,16,16,0,0,0,
0,0,49,0,0,7,
98,0,16,0,0,0,
0,0,86,20,16,0,
1,0,0,0,86,6,
16,0,0,0,0,0,
1,0,0,7,34,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,42,0,16,0,
0,0,0,0,1,0,
0,7,34,0,16,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
128,63,50,0,0,10,
18,0,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,10,128,
32,0,1,0,0,0,
4,0,0,0,10,0,
16,0,0,0,0,0,
56,0,0,7,130,32,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,69,0,
0,142,194,0,0,128,
67,85,21,0,114,0,
16,0,0,0,0,0,
2,64,0,0,0,0,
64,63,0,0,0,63,
0,0,0,0,0,0,
0,0,70,126,16,0,
10,0,0,0,0,96,
16,0,10,0,0,0,
54,0,0,5,114,32,
16,0,0,0,0,0,
70,2,16,0,0,0,
0,0,62,0,0,1,
83,84,65,84,148,0,
0,0,56,0,0,0,
3,0,0,0,0,0,
0,0,4,0,0,0,
43,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,9,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,0,0,
0,0,2,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0
};


static const uint32_t sVertexHash[] = 
{
0xbcbeaa1a,0xf2b45f61,0x955d9e20,0x9a93cd08,0xd14e83d4,0x602f6221,
0xdb14aeb3,0xe3949a7d
};


static const uint32_t sFragmentHash[] =
{
0x383e9c2f,0xe93fdf91,0x7ca49445,0xee550944,0x8339423e,0xa5721f,
0xaa2d3680,0x2a029edf
};

}

namespace RetroArch
{
class HandheldConsoleBorderShaderFilesGbPass0ShaderDef : public ShaderDef
{
public:
	HandheldConsoleBorderShaderFilesGbPass0ShaderDef() : ShaderDef{}
	{
		Name = "gb-pass0";
		VertexByteCode = RetroArchHandheldConsoleBorderShaderFilesGbPass0ShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchHandheldConsoleBorderShaderFilesGbPass0ShaderDefs::sVertexByteCode);
		VertexHash = RetroArchHandheldConsoleBorderShaderFilesGbPass0ShaderDefs::sVertexHash;
		FragmentByteCode = RetroArchHandheldConsoleBorderShaderFilesGbPass0ShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchHandheldConsoleBorderShaderFilesGbPass0ShaderDefs::sFragmentByteCode);
		FragmentHash = RetroArchHandheldConsoleBorderShaderFilesGbPass0ShaderDefs::sFragmentHash;
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalHistorySize1", -1, 48, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("baseline_alpha", -1, 64, 4, 0.000000f, 1.000000f, 0.050000f, 0.010000f, "Baseline Alpha"));
		Params.push_back(ShaderParam("grey_balance", -1, 68, 4, 2.000000f, 4.000000f, 2.700000f, 0.100000f, "Grey Balance"));
		Params.push_back(ShaderParam("response_time", -1, 72, 4, 0.000000f, 0.777000f, 0.200000f, 0.111000f, "LCD Response Time"));
		Params.push_back(ShaderParam("video_scale", -1, 76, 4, 2.000000f, 20.000000f, 3.000000f, 1.000000f, "Video Scale"));
		Samplers.push_back(ShaderSampler("Source", 2));
		Samplers.push_back(ShaderSampler("OriginalHistory1", 3));
		Samplers.push_back(ShaderSampler("OriginalHistory2", 4));
		Samplers.push_back(ShaderSampler("OriginalHistory3", 5));
		Samplers.push_back(ShaderSampler("OriginalHistory4", 6));
		Samplers.push_back(ShaderSampler("OriginalHistory5", 7));
		Samplers.push_back(ShaderSampler("OriginalHistory6", 8));
		Samplers.push_back(ShaderSampler("OriginalHistory7", 9));
		Samplers.push_back(ShaderSampler("COLOR_PALETTE", 10));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
