/*
ShaderGlass shader handheld/shaders/gameboy/shader-files\gb-pass1 imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/handheld/shaders/gameboy/shader-files/gb-pass1.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

////////////////////////////////////////////////////////////////////////////////
// Config                                                                     //
////////////////////////////////////////////////////////////////////////////////
// 0 - only the space between dots is blending
// 1 - all texels are blended
 TODO/FIXME - When set to zero, frame will be a solid green color 
// The amount of alpha swapped between neighboring texels
///////////////////////////////////////////////////////////////////////////
//                                                                       //
// Gameboy Classic Shader v0.2.2                                         //
//                                                                       //
// Copyright (C) 2013 Harlequin : unknown92835@gmail.com                 //
//                                                                       //
// This program is free software: you can redistribute it and/or modify  //
// it under the terms of the GNU General Public License as published by  //
// the Free Software Foundation, either version 3 of the License, or     //
// (at your option) any later version.                                   //
//                                                                       //
// This program is distributed in the hope that it will be useful,       //
// but WITHOUT ANY WARRANTY; without even the implied warranty of        //
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         //
// GNU General Public License for more details.                          //
//                                                                       //
// You should have received a copy of the GNU General Public License     //
// along with this program.  If not, see <http://www.gnu.org/licenses/>. //
//                                                                       //
///////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// Vertex shader                                                              //
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// Fragment shader                                                            //
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// Fragment definitions                                                       //
////////////////////////////////////////////////////////////////////////////////
// A simple blur technique that softens harsh color transitions
// Specialized to only blur alpha values and limited to only blurring texels
// lying in the spaces between two or more texels
// Sample the input textures
// Clamp the blur coords to the input texture size so it doesn't attempt to sample off the texture (it'll retrieve float4(0.0) and darken the edges otherwise)
//Sample adjacent texels based on the coordinates above
// Sum the alpha differences between neighboring texels, apply modifiers, then subtract the result from the current fragment alpha value

*/

#pragma once

namespace RetroArchHandheldShadersGameboyShaderFilesGbPass1ShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,210,7,
156,30,113,163,115,182,
52,243,236,159,132,4,
154,128,1,0,0,0,
128,8,0,0,5,0,
0,0,52,0,0,0,
28,3,0,0,104,3,
0,0,104,4,0,0,
228,7,0,0,82,68,
69,70,224,2,0,0,
2,0,0,0,136,0,
0,0,2,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
184,2,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
124,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,128,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,85,66,
79,0,80,117,115,104,
0,171,171,171,124,0,
0,0,1,0,0,0,
184,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,128,0,
0,0,5,0,0,0,
24,1,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,224,0,
0,0,0,0,0,0,
64,0,0,0,2,0,
0,0,244,0,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,103,108,111,98,
97,108,95,77,86,80,
0,102,108,111,97,116,
52,120,52,0,2,0,
3,0,4,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
235,0,0,0,224,1,
0,0,0,0,0,0,
16,0,0,0,2,0,
0,0,252,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,32,2,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
252,1,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
55,2,0,0,32,0,
0,0,16,0,0,0,
2,0,0,0,252,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,76,2,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,108,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,144,2,0,0,
52,0,0,0,4,0,
0,0,0,0,0,0,
108,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
114,101,103,105,115,116,
101,114,115,95,79,117,
116,112,117,116,83,105,
122,101,0,102,108,111,
97,116,52,0,1,0,
3,0,1,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
245,1,0,0,114,101,
103,105,115,116,101,114,
115,95,79,114,105,103,
105,110,97,108,83,105,
122,101,0,114,101,103,
105,115,116,101,114,115,
95,83,111,117,114,99,
101,83,105,122,101,0,
114,101,103,105,115,116,
101,114,115,95,98,108,
101,110,100,105,110,103,
95,109,111,100,101,0,
102,108,111,97,116,0,
171,171,0,0,3,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,100,2,
0,0,114,101,103,105,
115,116,101,114,115,95,
97,100,106,97,99,101,
110,116,95,116,101,120,
101,108,95,97,108,112,
104,97,95,98,108,101,
110,100,105,110,103,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
248,0,0,0,9,0,
0,0,8,0,0,0,
224,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
224,0,0,0,1,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,12,3,0,0,
224,0,0,0,2,0,
0,0,0,0,0,0,
3,0,0,0,1,0,
0,0,3,12,0,0,
224,0,0,0,3,0,
0,0,0,0,0,0,
3,0,0,0,1,0,
0,0,12,3,0,0,
224,0,0,0,4,0,
0,0,0,0,0,0,
3,0,0,0,2,0,
0,0,3,12,0,0,
224,0,0,0,5,0,
0,0,0,0,0,0,
3,0,0,0,2,0,
0,0,12,3,0,0,
224,0,0,0,6,0,
0,0,0,0,0,0,
3,0,0,0,3,0,
0,0,3,12,0,0,
224,0,0,0,7,0,
0,0,0,0,0,0,
3,0,0,0,3,0,
0,0,12,3,0,0,
233,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,4,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,116,3,
0,0,80,0,1,0,
221,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
89,0,0,4,70,142,
32,0,1,0,0,0,
3,0,0,0,95,0,
0,3,242,16,16,0,
0,0,0,0,95,0,
0,3,50,16,16,0,
1,0,0,0,101,0,
0,3,50,32,16,0,
0,0,0,0,101,0,
0,3,194,32,16,0,
0,0,0,0,101,0,
0,3,50,32,16,0,
1,0,0,0,101,0,
0,3,194,32,16,0,
1,0,0,0,101,0,
0,3,50,32,16,0,
2,0,0,0,101,0,
0,3,194,32,16,0,
2,0,0,0,101,0,
0,3,50,32,16,0,
3,0,0,0,101,0,
0,3,194,32,16,0,
3,0,0,0,103,0,
0,4,242,32,16,0,
4,0,0,0,1,0,
0,0,104,0,0,2,
1,0,0,0,56,0,
0,10,50,32,16,0,
0,0,0,0,70,16,
16,0,1,0,0,0,
2,64,0,0,71,3,
128,63,71,3,128,63,
0,0,0,0,0,0,
0,0,54,0,0,6,
194,32,16,0,0,0,
0,0,166,142,32,0,
1,0,0,0,2,0,
0,0,54,0,0,5,
66,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,0,54,0,
0,6,130,0,16,0,
0,0,0,0,58,128,
32,0,1,0,0,0,
2,0,0,0,50,0,
0,12,194,32,16,0,
1,0,0,0,6,20,
16,0,1,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,0,
71,3,128,63,71,3,
128,63,166,14,16,0,
0,0,0,0,54,0,
0,7,34,0,16,0,
0,0,0,0,58,128,
32,128,65,0,0,0,
1,0,0,0,2,0,
0,0,54,0,0,8,
146,0,16,0,0,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,50,0,
0,12,50,32,16,0,
1,0,0,0,70,16,
16,0,1,0,0,0,
2,64,0,0,71,3,
128,63,71,3,128,63,
0,0,0,0,0,0,
0,0,70,0,16,0,
0,0,0,0,54,0,
0,6,66,0,16,0,
0,0,0,0,42,128,
32,0,1,0,0,0,
2,0,0,0,50,0,
0,12,50,32,16,0,
2,0,0,0,70,16,
16,0,1,0,0,0,
2,64,0,0,71,3,
128,63,71,3,128,63,
0,0,0,0,0,0,
0,0,230,10,16,0,
0,0,0,0,54,0,
0,7,66,0,16,0,
0,0,0,0,42,128,
32,128,65,0,0,0,
1,0,0,0,2,0,
0,0,54,0,0,5,
130,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,0,50,0,
0,12,194,32,16,0,
2,0,0,0,6,20,
16,0,1,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,0,
71,3,128,63,71,3,
128,63,166,14,16,0,
0,0,0,0,0,0,
0,11,50,0,16,0,
0,0,0,0,2,64,
0,0,0,0,0,192,
0,0,0,192,0,0,
0,0,0,0,0,0,
70,128,32,0,1,0,
0,0,0,0,0,0,
56,0,0,8,194,32,
16,0,3,0,0,0,
6,4,16,0,0,0,
0,0,166,142,32,0,
1,0,0,0,2,0,
0,0,54,0,0,8,
50,32,16,0,3,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,56,0,
0,8,242,0,16,0,
0,0,0,0,86,21,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,1,0,0,0,
50,0,0,10,242,0,
16,0,0,0,0,0,
6,16,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,0,0,
0,0,70,14,16,0,
0,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,166,26,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,2,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,32,16,0,4,0,
0,0,246,31,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
3,0,0,0,70,14,
16,0,0,0,0,0,
62,0,0,1,83,84,
65,84,148,0,0,0,
21,0,0,0,1,0,
0,0,0,0,0,0,
11,0,0,0,13,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,7,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,229,217,
92,4,117,13,153,210,
165,201,200,93,210,129,
105,77,1,0,0,0,
192,7,0,0,5,0,
0,0,52,0,0,0,
212,2,0,0,176,3,
0,0,228,3,0,0,
36,7,0,0,82,68,
69,70,152,2,0,0,
1,0,0,0,184,0,
0,0,3,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
112,2,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,172,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,179,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,80,
117,115,104,0,179,0,
0,0,5,0,0,0,
208,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,152,1,
0,0,0,0,0,0,
16,0,0,0,0,0,
0,0,180,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,216,1,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
180,1,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
239,1,0,0,32,0,
0,0,16,0,0,0,
0,0,0,0,180,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,4,2,
0,0,48,0,0,0,
4,0,0,0,2,0,
0,0,36,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,72,2,0,0,
52,0,0,0,4,0,
0,0,2,0,0,0,
36,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
114,101,103,105,115,116,
101,114,115,95,79,117,
116,112,117,116,83,105,
122,101,0,102,108,111,
97,116,52,0,1,0,
3,0,1,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
173,1,0,0,114,101,
103,105,115,116,101,114,
115,95,79,114,105,103,
105,110,97,108,83,105,
122,101,0,114,101,103,
105,115,116,101,114,115,
95,83,111,117,114,99,
101,83,105,122,101,0,
114,101,103,105,115,116,
101,114,115,95,98,108,
101,110,100,105,110,103,
95,109,111,100,101,0,
102,108,111,97,116,0,
171,171,0,0,3,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,28,2,
0,0,114,101,103,105,
115,116,101,114,115,95,
97,100,106,97,99,101,
110,116,95,116,101,120,
101,108,95,97,108,112,
104,97,95,98,108,101,
110,100,105,110,103,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,212,0,0,0,
8,0,0,0,8,0,
0,0,200,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,3,
0,0,200,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,12,0,
0,0,200,0,0,0,
2,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,200,0,0,0,
3,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,12,12,
0,0,200,0,0,0,
4,0,0,0,0,0,
0,0,3,0,0,0,
2,0,0,0,3,3,
0,0,200,0,0,0,
5,0,0,0,0,0,
0,0,3,0,0,0,
2,0,0,0,12,12,
0,0,200,0,0,0,
6,0,0,0,0,0,
0,0,3,0,0,0,
3,0,0,0,3,3,
0,0,200,0,0,0,
7,0,0,0,0,0,
0,0,3,0,0,0,
3,0,0,0,12,12,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,0,0,0,
83,86,95,84,97,114,
103,101,116,0,171,171,
83,72,69,88,56,3,
0,0,80,0,0,0,
206,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,1,0,
0,0,4,0,0,0,
90,0,0,3,0,96,
16,0,2,0,0,0,
88,24,0,4,0,112,
16,0,2,0,0,0,
85,85,0,0,98,16,
0,3,50,16,16,0,
0,0,0,0,98,16,
0,3,50,16,16,0,
1,0,0,0,98,16,
0,3,194,16,16,0,
1,0,0,0,98,16,
0,3,50,16,16,0,
2,0,0,0,98,16,
0,3,194,16,16,0,
2,0,0,0,98,16,
0,3,50,16,16,0,
3,0,0,0,98,16,
0,3,194,16,16,0,
3,0,0,0,101,0,
0,3,242,32,16,0,
0,0,0,0,104,0,
0,2,3,0,0,0,
52,0,0,7,242,0,
16,0,0,0,0,0,
70,30,16,0,1,0,
0,0,70,20,16,0,
3,0,0,0,51,0,
0,7,242,0,16,0,
0,0,0,0,70,14,
16,0,0,0,0,0,
230,30,16,0,3,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,18,0,16,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
54,121,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,34,0,
16,0,0,0,0,0,
230,10,16,0,0,0,
0,0,198,121,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
242,0,16,0,1,0,
0,0,70,16,16,0,
0,0,0,0,70,126,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,0,0,0,8,
50,0,16,0,0,0,
0,0,70,0,16,128,
65,0,0,0,0,0,
0,0,246,15,16,0,
1,0,0,0,0,0,
0,7,18,0,16,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,52,0,0,7,
242,0,16,0,2,0,
0,0,70,30,16,0,
2,0,0,0,70,20,
16,0,3,0,0,0,
51,0,0,7,242,0,
16,0,2,0,0,0,
70,14,16,0,2,0,
0,0,230,30,16,0,
3,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,34,0,
16,0,0,0,0,0,
70,0,16,0,2,0,
0,0,198,121,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
66,0,16,0,0,0,
0,0,230,10,16,0,
2,0,0,0,70,123,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,0,0,0,8,
98,0,16,0,0,0,
0,0,86,6,16,128,
65,0,0,0,0,0,
0,0,246,15,16,0,
1,0,0,0,0,0,
0,7,18,0,16,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,0,0,0,7,
18,0,16,0,0,0,
0,0,42,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
56,0,0,8,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,26,128,32,0,
1,0,0,0,3,0,
0,0,24,0,0,7,
34,0,16,0,0,0,
0,0,58,0,16,0,
1,0,0,0,1,64,
0,0,0,0,0,0,
1,0,0,7,34,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,0,32,
0,8,34,0,16,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
10,128,32,0,1,0,
0,0,3,0,0,0,
50,0,0,10,130,32,
16,0,0,0,0,0,
10,0,16,128,65,0,
0,0,0,0,0,0,
26,0,16,0,0,0,
0,0,58,0,16,0,
1,0,0,0,54,0,
0,5,114,32,16,0,
0,0,0,0,70,2,
16,0,1,0,0,0,
62,0,0,1,83,84,
65,84,148,0,0,0,
21,0,0,0,3,0,
0,0,0,0,0,0,
8,0,0,0,13,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,5,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};


static const uint32_t sVertexHash[] = 
{
0x379e573f,0x843c07e7,0xbe3b3e51,0x6a8625cf,0xcefe838a,0x31c8a3de,
0x4ff8f75b,0x3fb7f462
};


static const uint32_t sFragmentHash[] =
{
0x238e4a7b,0x1b27df4b,0x3a99d386,0x4e176a3d,0x3174c086,0xd0e741f3,
0x4f13caa1,0xcfb5053f
};

}

namespace RetroArch
{
class HandheldShadersGameboyShaderFilesGbPass1ShaderDef : public ShaderDef
{
public:
	HandheldShadersGameboyShaderFilesGbPass1ShaderDef() : ShaderDef{}
	{
		Name = "gb-pass1";
		VertexByteCode = RetroArchHandheldShadersGameboyShaderFilesGbPass1ShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchHandheldShadersGameboyShaderFilesGbPass1ShaderDefs::sVertexByteCode);
		VertexHash = RetroArchHandheldShadersGameboyShaderFilesGbPass1ShaderDefs::sVertexHash;
		FragmentByteCode = RetroArchHandheldShadersGameboyShaderFilesGbPass1ShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchHandheldShadersGameboyShaderFilesGbPass1ShaderDefs::sFragmentByteCode);
		FragmentHash = RetroArchHandheldShadersGameboyShaderFilesGbPass1ShaderDefs::sFragmentHash;
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("blending_mode", -1, 48, 4, 0.000000f, 1.000000f, 0.000000f, 1.000000f, "Blending Mode"));
		Params.push_back(ShaderParam("adjacent_texel_alpha_blending", -1, 52, 4, 0.000000f, 1.000000f, 0.175500f, 0.050000f, "Neighbor Blending"));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
