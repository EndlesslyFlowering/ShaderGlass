/*
ShaderGlass shader handheld/shaders/gameboy/shader-files\gb-pass2 imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/handheld/shaders/gameboy/shader-files/gb-pass2.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

///////////////////////////////////////////////////////////////////////////
//                                                                       //
// Gameboy Classic Shader v0.2.2                                         //
//                                                                       //
// Copyright (C) 2013 Harlequin : unknown92835@gmail.com                 //
//                                                                       //
// This program is free software: you can redistribute it and/or modify  //
// it under the terms of the GNU General Public License as published by  //
// the Free Software Foundation, either version 3 of the License, or     //
// (at your option) any later version.                                   //
//                                                                       //
// This program is distributed in the hope that it will be useful,       //
// but WITHOUT ANY WARRANTY; without even the implied warranty of        //
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         //
// GNU General Public License for more details.                          //
//                                                                       //
// You should have received a copy of the GNU General Public License     //
// along with this program.  If not, see <http://www.gnu.org/licenses/>. //
//                                                                       //
///////////////////////////////////////////////////////////////////////////
// Define offsets and weights - change this for both the X and Y passes if you change the sigma value or number of texels sampled
// Sample the current fragment and apply its weight
// Iterate across the offsets in both directions sampling texels
// and adding their weighted alpha values to the total

*/

#pragma once

namespace RetroArchHandheldShadersGameboyShaderFilesGbPass2ShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,100,249,
150,252,141,100,211,87,
133,228,123,64,150,69,
50,217,1,0,0,0,
196,5,0,0,5,0,
0,0,52,0,0,0,
96,2,0,0,172,2,
0,0,76,3,0,0,
40,5,0,0,82,68,
69,70,36,2,0,0,
2,0,0,0,136,0,
0,0,2,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
252,1,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
124,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,128,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,85,66,
79,0,80,117,115,104,
0,171,171,171,124,0,
0,0,1,0,0,0,
184,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,128,0,
0,0,3,0,0,0,
24,1,0,0,48,0,
0,0,0,0,0,0,
0,0,0,0,224,0,
0,0,0,0,0,0,
64,0,0,0,2,0,
0,0,244,0,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,103,108,111,98,
97,108,95,77,86,80,
0,102,108,111,97,116,
52,120,52,0,2,0,
3,0,4,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
235,0,0,0,144,1,
0,0,0,0,0,0,
16,0,0,0,2,0,
0,0,172,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,208,1,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
172,1,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
231,1,0,0,32,0,
0,0,16,0,0,0,
2,0,0,0,172,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,114,101,
103,105,115,116,101,114,
115,95,79,117,116,112,
117,116,83,105,122,101,
0,102,108,111,97,116,
52,0,1,0,3,0,
1,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,165,1,
0,0,114,101,103,105,
115,116,101,114,115,95,
79,114,105,103,105,110,
97,108,83,105,122,101,
0,114,101,103,105,115,
116,101,114,115,95,83,
111,117,114,99,101,83,
105,122,101,0,77,105,
99,114,111,115,111,102,
116,32,40,82,41,32,
72,76,83,76,32,83,
104,97,100,101,114,32,
67,111,109,112,105,108,
101,114,32,49,48,46,
49,0,73,83,71,78,
68,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,15,0,0,
56,0,0,0,1,0,
0,0,0,0,0,0,
3,0,0,0,1,0,
0,0,3,3,0,0,
84,69,88,67,79,79,
82,68,0,171,171,171,
79,83,71,78,152,0,
0,0,5,0,0,0,
8,0,0,0,128,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
3,12,0,0,128,0,
0,0,1,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
12,3,0,0,128,0,
0,0,2,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
3,12,0,0,128,0,
0,0,3,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
12,3,0,0,137,0,
0,0,0,0,0,0,
1,0,0,0,3,0,
0,0,2,0,0,0,
15,0,0,0,84,69,
88,67,79,79,82,68,
0,83,86,95,80,111,
115,105,116,105,111,110,
0,171,171,171,83,72,
69,88,212,1,0,0,
80,0,1,0,117,0,
0,0,106,8,0,1,
89,0,0,4,70,142,
32,0,0,0,0,0,
4,0,0,0,89,0,
0,4,70,142,32,0,
1,0,0,0,3,0,
0,0,95,0,0,3,
242,16,16,0,0,0,
0,0,95,0,0,3,
50,16,16,0,1,0,
0,0,101,0,0,3,
50,32,16,0,0,0,
0,0,101,0,0,3,
194,32,16,0,0,0,
0,0,101,0,0,3,
50,32,16,0,1,0,
0,0,101,0,0,3,
194,32,16,0,1,0,
0,0,103,0,0,4,
242,32,16,0,2,0,
0,0,1,0,0,0,
104,0,0,2,1,0,
0,0,56,0,0,10,
50,32,16,0,0,0,
0,0,70,16,16,0,
1,0,0,0,2,64,
0,0,71,3,128,63,
71,3,128,63,0,0,
0,0,0,0,0,0,
54,0,0,6,194,32,
16,0,0,0,0,0,
166,142,32,0,1,0,
0,0,2,0,0,0,
0,0,0,11,50,0,
16,0,0,0,0,0,
2,64,0,0,0,0,
128,191,0,0,128,191,
0,0,0,0,0,0,
0,0,70,128,32,0,
1,0,0,0,0,0,
0,0,56,0,0,8,
194,32,16,0,1,0,
0,0,6,4,16,0,
0,0,0,0,166,142,
32,0,1,0,0,0,
2,0,0,0,54,0,
0,8,50,32,16,0,
1,0,0,0,2,64,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
56,0,0,8,242,0,
16,0,0,0,0,0,
86,21,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,1,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,6,16,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
0,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,0,
16,0,0,0,0,0,
166,26,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,2,0,
0,0,70,14,16,0,
0,0,0,0,50,0,
0,10,242,32,16,0,
2,0,0,0,246,31,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,3,0,0,0,
70,14,16,0,0,0,
0,0,62,0,0,1,
83,84,65,84,148,0,
0,0,10,0,0,0,
1,0,0,0,0,0,
0,0,7,0,0,0,
7,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
2,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,213,6,
8,121,237,244,235,160,
227,49,164,32,51,223,
25,68,1,0,0,0,
196,5,0,0,5,0,
0,0,52,0,0,0,
248,0,0,0,116,1,
0,0,168,1,0,0,
40,5,0,0,82,68,
69,70,188,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
147,0,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
124,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,140,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,95,83,
111,117,114,99,101,95,
115,97,109,112,108,101,
114,0,83,111,117,114,
99,101,0,77,105,99,
114,111,115,111,102,116,
32,40,82,41,32,72,
76,83,76,32,83,104,
97,100,101,114,32,67,
111,109,112,105,108,101,
114,32,49,48,46,49,
0,171,73,83,71,78,
116,0,0,0,4,0,
0,0,8,0,0,0,
104,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,3,0,0,
104,0,0,0,1,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,12,4,0,0,
104,0,0,0,2,0,
0,0,0,0,0,0,
3,0,0,0,1,0,
0,0,3,3,0,0,
104,0,0,0,3,0,
0,0,0,0,0,0,
3,0,0,0,1,0,
0,0,12,12,0,0,
84,69,88,67,79,79,
82,68,0,171,171,171,
79,83,71,78,44,0,
0,0,1,0,0,0,
8,0,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
15,0,0,0,83,86,
95,84,97,114,103,101,
116,0,171,171,83,72,
69,88,120,3,0,0,
80,0,0,0,222,0,
0,0,106,8,0,1,
53,24,0,0,22,0,
0,0,0,0,0,0,
224,227,9,62,0,0,
0,0,0,0,0,0,
0,0,128,63,208,165,
5,62,0,0,0,0,
0,0,0,0,0,0,
0,64,17,96,243,61,
0,0,0,0,0,0,
0,0,0,0,64,64,
128,43,208,61,0,0,
0,0,0,0,0,0,
0,0,128,64,238,68,
167,61,0,0,0,0,
0,0,0,0,90,0,
0,3,0,96,16,0,
2,0,0,0,88,24,
0,4,0,112,16,0,
2,0,0,0,85,85,
0,0,98,16,0,3,
50,16,16,0,0,0,
0,0,98,16,0,3,
66,16,16,0,0,0,
0,0,98,16,0,3,
50,16,16,0,1,0,
0,0,98,16,0,3,
194,16,16,0,1,0,
0,0,101,0,0,3,
242,32,16,0,0,0,
0,0,104,0,0,2,
3,0,0,0,52,0,
0,7,50,0,16,0,
0,0,0,0,70,16,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,51,0,0,7,
50,0,16,0,0,0,
0,0,70,0,16,0,
0,0,0,0,230,26,
16,0,1,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
242,0,16,0,0,0,
0,0,70,0,16,0,
0,0,0,0,70,126,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,56,0,0,10,
242,0,16,0,0,0,
0,0,70,14,16,0,
0,0,0,0,2,64,
0,0,224,227,9,62,
224,227,9,62,224,227,
9,62,224,227,9,62,
54,0,0,5,34,0,
16,0,1,0,0,0,
1,64,0,0,0,0,
0,0,54,0,0,5,
66,0,16,0,1,0,
0,0,58,0,16,0,
0,0,0,0,54,0,
0,5,130,0,16,0,
1,0,0,0,1,64,
0,0,1,0,0,0,
48,0,0,1,33,0,
0,7,18,0,16,0,
2,0,0,0,58,0,
16,0,1,0,0,0,
1,64,0,0,5,0,
0,0,3,0,4,3,
10,0,16,0,2,0,
0,0,56,0,0,8,
18,0,16,0,1,0,
0,0,42,16,16,0,
0,0,0,0,10,144,
144,0,58,0,16,0,
1,0,0,0,0,0,
0,7,50,0,16,0,
2,0,0,0,70,0,
16,0,1,0,0,0,
70,16,16,0,0,0,
0,0,52,0,0,7,
50,0,16,0,2,0,
0,0,70,0,16,0,
2,0,0,0,70,16,
16,0,1,0,0,0,
51,0,0,7,50,0,
16,0,2,0,0,0,
70,0,16,0,2,0,
0,0,230,26,16,0,
1,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,18,0,
16,0,2,0,0,0,
70,0,16,0,2,0,
0,0,54,121,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
50,0,0,10,18,0,
16,0,2,0,0,0,
10,0,16,0,2,0,
0,0,26,144,144,0,
58,0,16,0,1,0,
0,0,42,0,16,0,
1,0,0,0,0,0,
0,8,98,0,16,0,
2,0,0,0,6,1,
16,128,65,0,0,0,
1,0,0,0,6,17,
16,0,0,0,0,0,
52,0,0,7,98,0,
16,0,2,0,0,0,
86,6,16,0,2,0,
0,0,6,17,16,0,
1,0,0,0,51,0,
0,7,98,0,16,0,
2,0,0,0,86,6,
16,0,2,0,0,0,
166,27,16,0,1,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,18,0,16,0,
1,0,0,0,150,5,
16,0,2,0,0,0,
54,121,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,50,0,
0,10,66,0,16,0,
1,0,0,0,10,0,
16,0,1,0,0,0,
26,144,144,0,58,0,
16,0,1,0,0,0,
10,0,16,0,2,0,
0,0,30,0,0,7,
130,0,16,0,1,0,
0,0,58,0,16,0,
1,0,0,0,1,64,
0,0,1,0,0,0,
22,0,0,1,54,0,
0,5,130,32,16,0,
0,0,0,0,42,0,
16,0,1,0,0,0,
54,0,0,5,114,32,
16,0,0,0,0,0,
70,2,16,0,0,0,
0,0,62,0,0,1,
83,84,65,84,148,0,
0,0,26,0,0,0,
3,0,0,0,5,0,
0,0,5,0,0,0,
12,0,0,0,2,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
5,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0
};


static const uint32_t sVertexHash[] = 
{
0x44036bca,0xb932a217,0xf4109386,0x8708ec93,0xfa9cfece,0xb760adb9,
0x4ea156fd,0x44f82ad5
};


static const uint32_t sFragmentHash[] =
{
0x17dde740,0x2e548ee5,0x844aa55c,0x4a3be46a,0x712a2686,0xc870fddf,
0x11f789ac,0x7c339a4a
};

}

namespace RetroArch
{
class HandheldShadersGameboyShaderFilesGbPass2ShaderDef : public ShaderDef
{
public:
	HandheldShadersGameboyShaderFilesGbPass2ShaderDef() : ShaderDef{}
	{
		Name = "gb-pass2";
		VertexByteCode = RetroArchHandheldShadersGameboyShaderFilesGbPass2ShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchHandheldShadersGameboyShaderFilesGbPass2ShaderDefs::sVertexByteCode);
		VertexHash = RetroArchHandheldShadersGameboyShaderFilesGbPass2ShaderDefs::sVertexHash;
		FragmentByteCode = RetroArchHandheldShadersGameboyShaderFilesGbPass2ShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchHandheldShadersGameboyShaderFilesGbPass2ShaderDefs::sFragmentByteCode);
		FragmentHash = RetroArchHandheldShadersGameboyShaderFilesGbPass2ShaderDefs::sFragmentHash;
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
