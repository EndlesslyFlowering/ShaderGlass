/*
ShaderGlass shader handheld/shaders/color\gba-color imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/handheld/shaders/color/gba-color.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

// Shader that replicates the LCD Colorspace from Gameboy Advance --
// bring out our stored luminance value
// our adjustments need to happen in linear gamma

*/

#pragma once

namespace RetroArchHandheldShadersColorGbaColorShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,201,14,
214,158,234,0,226,253,
34,50,139,213,105,119,
94,94,1,0,0,0,
184,7,0,0,5,0,
0,0,52,0,0,0,
120,2,0,0,196,2,
0,0,124,3,0,0,
28,7,0,0,82,68,
69,70,60,2,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
20,2,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,5,0,
0,0,120,0,0,0,
128,0,0,0,0,0,
0,0,0,0,0,0,
64,1,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,84,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,120,1,
0,0,64,0,0,0,
16,0,0,0,0,0,
0,0,148,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,184,1,0,0,
80,0,0,0,16,0,
0,0,0,0,0,0,
148,1,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
204,1,0,0,96,0,
0,0,16,0,0,0,
0,0,0,0,148,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,222,1,
0,0,112,0,0,0,
4,0,0,0,2,0,
0,0,240,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,103,108,111,98,
97,108,95,77,86,80,
0,102,108,111,97,116,
52,120,52,0,2,0,
3,0,4,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
75,1,0,0,103,108,
111,98,97,108,95,79,
117,116,112,117,116,83,
105,122,101,0,102,108,
111,97,116,52,0,171,
171,171,1,0,3,0,
1,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,138,1,
0,0,103,108,111,98,
97,108,95,79,114,105,
103,105,110,97,108,83,
105,122,101,0,103,108,
111,98,97,108,95,83,
111,117,114,99,101,83,
105,122,101,0,103,108,
111,98,97,108,95,109,
111,100,101,0,102,108,
111,97,116,0,0,0,
3,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
234,1,0,0,77,105,
99,114,111,115,111,102,
116,32,40,82,41,32,
72,76,83,76,32,83,
104,97,100,101,114,32,
67,111,109,112,105,108,
101,114,32,49,48,46,
49,0,73,83,71,78,
68,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,15,0,0,
56,0,0,0,1,0,
0,0,0,0,0,0,
3,0,0,0,1,0,
0,0,3,3,0,0,
84,69,88,67,79,79,
82,68,0,171,171,171,
79,83,71,78,176,0,
0,0,6,0,0,0,
8,0,0,0,152,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
3,12,0,0,152,0,
0,0,1,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
15,0,0,0,152,0,
0,0,2,0,0,0,
0,0,0,0,3,0,
0,0,2,0,0,0,
15,0,0,0,152,0,
0,0,3,0,0,0,
0,0,0,0,3,0,
0,0,3,0,0,0,
15,0,0,0,152,0,
0,0,4,0,0,0,
0,0,0,0,3,0,
0,0,4,0,0,0,
15,0,0,0,161,0,
0,0,0,0,0,0,
1,0,0,0,3,0,
0,0,5,0,0,0,
15,0,0,0,84,69,
88,67,79,79,82,68,
0,83,86,95,80,111,
115,105,116,105,111,110,
0,171,171,171,83,72,
69,88,152,3,0,0,
80,0,1,0,230,0,
0,0,106,8,0,1,
89,0,0,4,70,142,
32,0,0,0,0,0,
8,0,0,0,95,0,
0,3,242,16,16,0,
0,0,0,0,95,0,
0,3,50,16,16,0,
1,0,0,0,101,0,
0,3,50,32,16,0,
0,0,0,0,101,0,
0,3,242,32,16,0,
1,0,0,0,101,0,
0,3,242,32,16,0,
2,0,0,0,101,0,
0,3,242,32,16,0,
3,0,0,0,101,0,
0,3,242,32,16,0,
4,0,0,0,103,0,
0,4,242,32,16,0,
5,0,0,0,1,0,
0,0,104,0,0,2,
2,0,0,0,54,0,
0,5,50,32,16,0,
0,0,0,0,70,16,
16,0,1,0,0,0,
27,0,0,6,18,0,
16,0,0,0,0,0,
10,128,32,0,0,0,
0,0,7,0,0,0,
32,0,0,10,114,0,
16,0,0,0,0,0,
6,0,16,0,0,0,
0,0,2,64,0,0,
1,0,0,0,2,0,
0,0,3,0,0,0,
0,0,0,0,1,0,
0,10,242,0,16,0,
1,0,0,0,166,10,
16,0,0,0,0,0,
2,64,0,0,246,40,
28,63,215,163,176,62,
236,81,56,61,0,0,
0,0,55,0,0,12,
242,0,16,0,1,0,
0,0,86,5,16,0,
0,0,0,0,2,64,
0,0,92,143,66,63,
113,61,138,62,143,194,
245,188,0,0,0,0,
70,14,16,0,1,0,
0,0,55,0,0,12,
242,32,16,0,1,0,
0,0,6,0,16,0,
0,0,0,0,2,64,
0,0,20,174,103,63,
20,174,71,62,205,204,
204,189,0,0,0,0,
70,14,16,0,1,0,
0,0,1,0,0,10,
242,0,16,0,1,0,
0,0,166,10,16,0,
0,0,0,0,2,64,
0,0,82,184,30,62,
164,112,29,63,31,133,
107,62,0,0,0,0,
55,0,0,12,242,0,
16,0,1,0,0,0,
86,5,16,0,0,0,
0,0,2,64,0,0,
0,0,0,62,51,51,
35,63,51,51,115,62,
0,0,0,0,70,14,
16,0,1,0,0,0,
55,0,0,12,242,32,
16,0,2,0,0,0,
6,0,16,0,0,0,
0,0,2,64,0,0,
205,204,204,61,102,102,
38,63,0,0,128,62,
0,0,0,0,70,14,
16,0,1,0,0,0,
1,0,0,10,242,0,
16,0,1,0,0,0,
166,10,16,0,0,0,
0,0,2,64,0,0,
10,215,35,62,0,0,
64,62,61,10,39,63,
0,0,0,0,55,0,
0,12,242,0,16,0,
1,0,0,0,86,5,
16,0,0,0,0,0,
2,64,0,0,10,215,
35,62,236,81,56,62,
195,245,40,63,0,0,
0,0,70,14,16,0,
1,0,0,0,55,0,
0,12,242,32,16,0,
3,0,0,0,6,0,
16,0,0,0,0,0,
2,64,0,0,174,71,
33,62,133,235,17,62,
51,51,51,63,0,0,
0,0,70,14,16,0,
1,0,0,0,1,0,
0,10,242,0,16,0,
1,0,0,0,166,10,
16,0,0,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
128,63,55,0,0,12,
242,0,16,0,1,0,
0,0,86,5,16,0,
0,0,0,0,2,64,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,236,81,120,63,
70,14,16,0,1,0,
0,0,55,0,0,12,
242,32,16,0,4,0,
0,0,6,0,16,0,
0,0,0,0,2,64,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,195,245,104,63,
70,14,16,0,1,0,
0,0,56,0,0,8,
242,0,16,0,0,0,
0,0,86,21,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,6,16,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,0,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,166,26,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
2,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,32,
16,0,5,0,0,0,
246,31,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,3,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,20,0,
0,0,2,0,0,0,
0,0,0,0,8,0,
0,0,4,0,0,0,
1,0,0,0,4,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
8,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,42,168,
25,159,71,108,145,81,
115,217,201,240,67,83,
75,71,1,0,0,0,
68,5,0,0,5,0,
0,0,52,0,0,0,
156,1,0,0,48,2,
0,0,100,2,0,0,
168,4,0,0,82,68,
69,70,96,1,0,0,
1,0,0,0,184,0,
0,0,3,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
56,1,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,172,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,179,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,80,
117,115,104,0,179,0,
0,0,1,0,0,0,
208,0,0,0,16,0,
0,0,0,0,0,0,
0,0,0,0,248,0,
0,0,0,0,0,0,
4,0,0,0,2,0,
0,0,20,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,112,97,114,97,
109,115,95,100,97,114,
107,101,110,95,115,99,
114,101,101,110,0,102,
108,111,97,116,0,171,
0,0,3,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,13,1,0,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,140,0,0,0,
5,0,0,0,8,0,
0,0,128,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,3,
0,0,128,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,15,15,
0,0,128,0,0,0,
2,0,0,0,0,0,
0,0,3,0,0,0,
2,0,0,0,15,15,
0,0,128,0,0,0,
3,0,0,0,0,0,
0,0,3,0,0,0,
3,0,0,0,15,15,
0,0,128,0,0,0,
4,0,0,0,0,0,
0,0,3,0,0,0,
4,0,0,0,15,15,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,0,0,0,
83,86,95,84,97,114,
103,101,116,0,171,171,
83,72,69,88,60,2,
0,0,80,0,0,0,
143,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,1,0,
0,0,1,0,0,0,
90,0,0,3,0,96,
16,0,2,0,0,0,
88,24,0,4,0,112,
16,0,2,0,0,0,
85,85,0,0,98,16,
0,3,50,16,16,0,
0,0,0,0,98,16,
0,3,242,16,16,0,
1,0,0,0,98,16,
0,3,242,16,16,0,
2,0,0,0,98,16,
0,3,242,16,16,0,
3,0,0,0,98,16,
0,3,242,16,16,0,
4,0,0,0,101,0,
0,3,242,32,16,0,
0,0,0,0,104,0,
0,2,3,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
242,0,16,0,0,0,
0,0,70,16,16,0,
0,0,0,0,70,126,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,47,0,0,5,
242,0,16,0,0,0,
0,0,70,14,16,0,
0,0,0,0,50,0,
0,10,18,0,16,0,
1,0,0,0,10,128,
32,0,1,0,0,0,
0,0,0,0,1,64,
0,0,205,204,204,63,
1,64,0,0,205,204,
12,64,56,0,0,7,
242,0,16,0,0,0,
0,0,70,14,16,0,
0,0,0,0,6,0,
16,0,1,0,0,0,
25,0,0,5,242,0,
16,0,0,0,0,0,
70,14,16,0,0,0,
0,0,56,32,0,7,
242,0,16,0,0,0,
0,0,70,14,16,0,
0,0,0,0,246,31,
16,0,4,0,0,0,
17,0,0,7,18,0,
16,0,1,0,0,0,
70,14,16,0,0,0,
0,0,70,30,16,0,
1,0,0,0,47,0,
0,5,18,0,16,0,
1,0,0,0,10,0,
16,0,1,0,0,0,
17,0,0,7,18,0,
16,0,2,0,0,0,
70,14,16,0,0,0,
0,0,70,30,16,0,
2,0,0,0,47,0,
0,5,34,0,16,0,
1,0,0,0,10,0,
16,0,2,0,0,0,
17,0,0,7,18,0,
16,0,2,0,0,0,
70,14,16,0,0,0,
0,0,70,30,16,0,
3,0,0,0,17,0,
0,7,18,0,16,0,
0,0,0,0,70,14,
16,0,0,0,0,0,
70,30,16,0,4,0,
0,0,47,0,0,5,
130,0,16,0,1,0,
0,0,10,0,16,0,
0,0,0,0,47,0,
0,5,66,0,16,0,
1,0,0,0,10,0,
16,0,2,0,0,0,
56,0,0,10,242,0,
16,0,0,0,0,0,
70,14,16,0,1,0,
0,0,2,64,0,0,
47,186,232,62,47,186,
232,62,47,186,232,62,
47,186,232,62,25,0,
0,5,242,32,16,0,
0,0,0,0,70,14,
16,0,0,0,0,0,
62,0,0,1,83,84,
65,84,148,0,0,0,
17,0,0,0,3,0,
0,0,0,0,0,0,
6,0,0,0,15,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};


static const uint32_t sVertexHash[] = 
{
0x15717ea3,0x7b9089c3,0x7043c84e,0x584a6e6f,0x37529368,0xb5ed3927,
0x5a56b99d,0xb73284dc
};


static const uint32_t sFragmentHash[] =
{
0x33c03e27,0xe4991e74,0xf6bb713c,0xfe625ddb,0x1629c290,0xbf5e6193,
0x633c8b73,0xe0ae53c6
};

}

namespace RetroArch
{
class HandheldShadersColorGbaColorShaderDef : public ShaderDef
{
public:
	HandheldShadersColorGbaColorShaderDef() : ShaderDef{}
	{
		Name = "gba-color";
		VertexByteCode = RetroArchHandheldShadersColorGbaColorShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchHandheldShadersColorGbaColorShaderDefs::sVertexByteCode);
		VertexHash = RetroArchHandheldShadersColorGbaColorShaderDefs::sVertexHash;
		FragmentByteCode = RetroArchHandheldShadersColorGbaColorShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchHandheldShadersColorGbaColorShaderDefs::sFragmentByteCode);
		FragmentHash = RetroArchHandheldShadersColorGbaColorShaderDefs::sFragmentHash;
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", 0, 64, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", 0, 80, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", 0, 96, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("mode", 0, 112, 4, 1.000000f, 3.000000f, 1.000000f, 1.000000f, "Color Profile (1=sRGB, 2=DCI, 3=Rec2020)"));
		Params.push_back(ShaderParam("darken_screen", -1, 0, 4, 0.000000f, 1.000000f, 0.000000f, 0.050000f, "External Darken Screen"));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
