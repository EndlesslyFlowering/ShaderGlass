/*
ShaderGlass shader edge-smoothing/ddt/shaders\ddt imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/25311dc03332d9ef2dff8d9d06c611d828028fac/edge-smoothing/ddt/shaders/ddt.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

*/

#pragma once

namespace RetroArchEdgeSmoothingDdtShadersDdtShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,46,208,
6,112,166,95,153,12,
80,133,1,222,140,83,
31,197,1,0,0,0,
100,6,0,0,5,0,
0,0,52,0,0,0,
40,3,0,0,116,3,
0,0,252,3,0,0,
200,5,0,0,82,68,
69,70,236,2,0,0,
2,0,0,0,136,0,
0,0,2,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
196,2,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
124,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,128,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,85,66,
79,0,80,117,115,104,
0,171,171,171,124,0,
0,0,1,0,0,0,
184,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,128,0,
0,0,5,0,0,0,
24,1,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,224,0,
0,0,0,0,0,0,
64,0,0,0,2,0,
0,0,244,0,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,103,108,111,98,
97,108,95,77,86,80,
0,102,108,111,97,116,
52,120,52,0,2,0,
3,0,4,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
235,0,0,0,224,1,
0,0,0,0,0,0,
16,0,0,0,2,0,
0,0,252,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,32,2,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
252,1,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
52,2,0,0,32,0,
0,0,16,0,0,0,
0,0,0,0,252,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,70,2,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,96,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,132,2,0,0,
52,0,0,0,4,0,
0,0,0,0,0,0,
160,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
112,97,114,97,109,115,
95,83,111,117,114,99,
101,83,105,122,101,0,
102,108,111,97,116,52,
0,171,171,171,1,0,
3,0,1,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
242,1,0,0,112,97,
114,97,109,115,95,79,
114,105,103,105,110,97,
108,83,105,122,101,0,
112,97,114,97,109,115,
95,79,117,116,112,117,
116,83,105,122,101,0,
112,97,114,97,109,115,
95,70,114,97,109,101,
67,111,117,110,116,0,
100,119,111,114,100,0,
171,171,0,0,19,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,88,2,
0,0,112,97,114,97,
109,115,95,66,73,76,
95,70,65,76,76,66,
65,67,75,0,102,108,
111,97,116,0,171,171,
0,0,3,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,152,2,0,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
128,0,0,0,4,0,
0,0,8,0,0,0,
104,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
104,0,0,0,2,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,12,3,0,0,
104,0,0,0,1,0,
0,0,0,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
113,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,2,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,196,1,
0,0,80,0,1,0,
113,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
89,0,0,4,70,142,
32,0,1,0,0,0,
1,0,0,0,95,0,
0,3,242,16,16,0,
0,0,0,0,95,0,
0,3,50,16,16,0,
1,0,0,0,101,0,
0,3,50,32,16,0,
0,0,0,0,101,0,
0,3,194,32,16,0,
0,0,0,0,101,0,
0,3,242,32,16,0,
1,0,0,0,103,0,
0,4,242,32,16,0,
2,0,0,0,1,0,
0,0,104,0,0,2,
1,0,0,0,56,0,
0,10,50,0,16,0,
0,0,0,0,70,16,
16,0,1,0,0,0,
2,64,0,0,71,3,
128,63,71,3,128,63,
0,0,0,0,0,0,
0,0,56,0,0,8,
194,32,16,0,0,0,
0,0,6,4,16,0,
0,0,0,0,6,132,
32,0,1,0,0,0,
0,0,0,0,56,0,
0,10,50,32,16,0,
0,0,0,0,70,16,
16,0,1,0,0,0,
2,64,0,0,71,3,
128,63,71,3,128,63,
0,0,0,0,0,0,
0,0,54,0,0,6,
146,32,16,0,1,0,
0,0,166,142,32,0,
1,0,0,0,0,0,
0,0,54,0,0,8,
98,32,16,0,1,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,56,0,
0,8,242,0,16,0,
0,0,0,0,86,21,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,1,0,0,0,
50,0,0,10,242,0,
16,0,0,0,0,0,
6,16,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,0,0,
0,0,70,14,16,0,
0,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,166,26,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,2,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,32,16,0,2,0,
0,0,246,31,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
3,0,0,0,70,14,
16,0,0,0,0,0,
62,0,0,1,83,84,
65,84,148,0,0,0,
10,0,0,0,1,0,
0,0,0,0,0,0,
6,0,0,0,7,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,2,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,217,139,
16,9,162,159,197,110,
181,102,218,91,133,222,
149,218,1,0,0,0,
52,12,0,0,5,0,
0,0,52,0,0,0,
224,2,0,0,68,3,
0,0,120,3,0,0,
152,11,0,0,82,68,
69,70,164,2,0,0,
1,0,0,0,184,0,
0,0,3,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
124,2,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,172,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,179,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,80,
117,115,104,0,179,0,
0,0,5,0,0,0,
208,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,152,1,
0,0,0,0,0,0,
16,0,0,0,2,0,
0,0,180,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,216,1,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
180,1,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
236,1,0,0,32,0,
0,0,16,0,0,0,
0,0,0,0,180,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,254,1,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,24,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,60,2,0,0,
52,0,0,0,4,0,
0,0,2,0,0,0,
88,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
112,97,114,97,109,115,
95,83,111,117,114,99,
101,83,105,122,101,0,
102,108,111,97,116,52,
0,171,171,171,1,0,
3,0,1,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
170,1,0,0,112,97,
114,97,109,115,95,79,
114,105,103,105,110,97,
108,83,105,122,101,0,
112,97,114,97,109,115,
95,79,117,116,112,117,
116,83,105,122,101,0,
112,97,114,97,109,115,
95,70,114,97,109,101,
67,111,117,110,116,0,
100,119,111,114,100,0,
171,171,0,0,19,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,16,2,
0,0,112,97,114,97,
109,115,95,66,73,76,
95,70,65,76,76,66,
65,67,75,0,102,108,
111,97,116,0,171,171,
0,0,3,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,80,2,0,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,92,0,0,0,
3,0,0,0,8,0,
0,0,80,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,3,
0,0,80,0,0,0,
2,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,12,12,
0,0,80,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,15,15,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,0,0,0,
83,86,95,84,97,114,
103,101,116,0,171,171,
83,72,69,88,24,8,
0,0,80,0,0,0,
6,2,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,1,0,
0,0,4,0,0,0,
90,0,0,3,0,96,
16,0,2,0,0,0,
88,24,0,4,0,112,
16,0,2,0,0,0,
85,85,0,0,98,16,
0,3,50,16,16,0,
0,0,0,0,98,16,
0,3,194,16,16,0,
0,0,0,0,98,16,
0,3,242,16,16,0,
1,0,0,0,101,0,
0,3,242,32,16,0,
0,0,0,0,104,0,
0,2,9,0,0,0,
26,0,0,5,242,0,
16,0,0,0,0,0,
230,30,16,0,0,0,
0,0,0,0,0,10,
242,0,16,0,0,0,
0,0,70,14,16,0,
0,0,0,0,2,64,
0,0,0,0,0,191,
0,0,0,191,0,0,
0,191,0,0,0,191,
49,0,0,10,242,0,
16,0,1,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,230,14,16,0,
0,0,0,0,49,0,
0,10,242,0,16,0,
2,0,0,0,230,14,
16,0,0,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,30,0,0,8,
242,0,16,0,1,0,
0,0,70,14,16,128,
65,0,0,0,1,0,
0,0,70,14,16,0,
2,0,0,0,43,0,
0,5,242,0,16,0,
1,0,0,0,70,14,
16,0,1,0,0,0,
56,0,0,7,242,0,
16,0,2,0,0,0,
70,14,16,0,1,0,
0,0,70,30,16,0,
1,0,0,0,50,0,
0,11,242,0,16,0,
2,0,0,0,70,14,
16,128,65,0,0,0,
2,0,0,0,70,132,
32,0,1,0,0,0,
0,0,0,0,70,14,
16,0,0,0,0,0,
15,0,0,7,18,0,
16,0,0,0,0,0,
70,0,16,0,2,0,
0,0,70,0,16,0,
2,0,0,0,15,0,
0,7,34,0,16,0,
0,0,0,0,230,10,
16,0,2,0,0,0,
230,10,16,0,2,0,
0,0,75,0,0,5,
50,0,16,0,0,0,
0,0,70,0,16,0,
0,0,0,0,49,0,
0,7,18,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,50,0,0,9,
242,0,16,0,2,0,
0,0,70,14,16,0,
1,0,0,0,70,30,
16,0,1,0,0,0,
70,20,16,0,0,0,
0,0,50,0,0,9,
50,0,16,0,1,0,
0,0,230,10,16,0,
1,0,0,0,230,26,
16,0,1,0,0,0,
70,0,16,0,2,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,114,0,16,0,
1,0,0,0,70,0,
16,0,1,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,3,0,0,0,
70,16,16,0,0,0,
0,0,70,126,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
0,0,0,7,114,0,
16,0,4,0,0,0,
70,2,16,0,1,0,
0,0,70,2,16,0,
3,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,5,0,0,0,
230,10,16,0,2,0,
0,0,70,126,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
114,0,16,0,2,0,
0,0,70,0,16,0,
2,0,0,0,70,126,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,0,0,0,8,
114,0,16,0,6,0,
0,0,70,2,16,0,
4,0,0,0,70,2,
16,128,65,0,0,0,
5,0,0,0,0,0,
0,8,114,0,16,0,
4,0,0,0,70,2,
16,128,65,0,0,0,
2,0,0,0,70,2,
16,0,4,0,0,0,
55,0,0,9,114,0,
16,0,4,0,0,0,
6,0,16,0,0,0,
0,0,70,2,16,0,
4,0,0,0,70,2,
16,0,5,0,0,0,
55,0,0,9,114,0,
16,0,6,0,0,0,
6,0,16,0,0,0,
0,0,70,2,16,0,
2,0,0,0,70,2,
16,0,6,0,0,0,
16,0,0,10,18,0,
16,0,0,0,0,0,
70,2,16,0,1,0,
0,0,2,64,0,0,
208,179,89,62,89,23,
55,63,152,221,147,61,
0,0,0,0,16,0,
0,10,34,0,16,0,
0,0,0,0,70,2,
16,0,3,0,0,0,
2,64,0,0,208,179,
89,62,89,23,55,63,
152,221,147,61,0,0,
0,0,0,0,0,8,
18,0,16,0,0,0,
0,0,10,0,16,128,
65,0,0,0,0,0,
0,0,26,0,16,0,
0,0,0,0,16,0,
0,10,34,0,16,0,
0,0,0,0,70,2,
16,0,2,0,0,0,
2,64,0,0,208,179,
89,62,89,23,55,63,
152,221,147,61,0,0,
0,0,16,0,0,10,
130,0,16,0,1,0,
0,0,70,2,16,0,
5,0,0,0,2,64,
0,0,208,179,89,62,
89,23,55,63,152,221,
147,61,0,0,0,0,
0,0,0,8,34,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,58,0,16,128,
65,0,0,0,1,0,
0,0,49,0,0,9,
130,0,16,0,1,0,
0,0,10,0,16,128,
129,0,0,0,0,0,
0,0,26,0,16,128,
129,0,0,0,0,0,
0,0,55,0,0,9,
114,0,16,0,6,0,
0,0,246,15,16,0,
1,0,0,0,70,2,
16,0,6,0,0,0,
70,2,16,0,2,0,
0,0,0,0,0,11,
50,0,16,0,7,0,
0,0,182,15,16,128,
193,0,0,0,0,0,
0,0,2,64,0,0,
0,0,128,63,0,0,
128,63,0,0,0,0,
0,0,0,0,56,0,
0,7,130,0,16,0,
2,0,0,0,10,0,
16,0,7,0,0,0,
26,0,16,0,7,0,
0,0,56,0,0,8,
50,0,16,0,7,0,
0,0,230,10,16,128,
129,0,0,0,0,0,
0,0,70,0,16,0,
7,0,0,0,56,0,
0,9,66,0,16,0,
0,0,0,0,58,0,
16,128,129,0,0,0,
0,0,0,0,42,0,
16,128,129,0,0,0,
0,0,0,0,56,0,
0,7,114,0,16,0,
8,0,0,0,246,15,
16,0,2,0,0,0,
70,2,16,0,3,0,
0,0,50,0,0,9,
114,0,16,0,6,0,
0,0,70,2,16,0,
6,0,0,0,6,0,
16,0,7,0,0,0,
70,2,16,0,8,0,
0,0,50,0,0,9,
210,0,16,0,7,0,
0,0,6,9,16,0,
2,0,0,0,6,0,
16,0,7,0,0,0,
6,9,16,0,8,0,
0,0,0,0,0,7,
114,0,16,0,2,0,
0,0,70,2,16,0,
5,0,0,0,70,2,
16,0,2,0,0,0,
0,0,0,8,114,0,
16,0,2,0,0,0,
70,2,16,128,65,0,
0,0,3,0,0,0,
70,2,16,0,2,0,
0,0,50,0,0,9,
114,0,16,0,3,0,
0,0,70,2,16,0,
5,0,0,0,86,5,
16,0,7,0,0,0,
134,3,16,0,7,0,
0,0,55,0,0,9,
114,0,16,0,4,0,
0,0,246,15,16,0,
1,0,0,0,70,2,
16,0,4,0,0,0,
70,2,16,0,5,0,
0,0,50,0,0,9,
114,0,16,0,4,0,
0,0,70,2,16,0,
4,0,0,0,86,5,
16,0,7,0,0,0,
70,2,16,0,6,0,
0,0,50,0,0,9,
114,0,16,0,3,0,
0,0,70,2,16,0,
1,0,0,0,166,10,
16,0,0,0,0,0,
70,2,16,0,3,0,
0,0,49,0,0,9,
130,0,16,0,0,0,
0,0,26,0,16,128,
129,0,0,0,0,0,
0,0,10,0,16,128,
129,0,0,0,0,0,
0,0,0,0,0,9,
18,0,16,0,0,0,
0,0,10,0,16,128,
193,0,0,0,0,0,
0,0,26,0,16,128,
129,0,0,0,0,0,
0,0,55,0,0,9,
114,0,16,0,2,0,
0,0,246,15,16,0,
0,0,0,0,70,2,
16,0,2,0,0,0,
70,2,16,0,1,0,
0,0,55,0,0,9,
114,0,16,0,1,0,
0,0,246,15,16,0,
1,0,0,0,70,2,
16,0,1,0,0,0,
70,2,16,0,2,0,
0,0,50,0,0,9,
226,0,16,0,0,0,
0,0,6,9,16,0,
1,0,0,0,166,10,
16,0,0,0,0,0,
6,9,16,0,4,0,
0,0,0,0,0,8,
226,0,16,0,0,0,
0,0,6,9,16,128,
65,0,0,0,3,0,
0,0,86,14,16,0,
0,0,0,0,14,0,
0,11,18,0,16,0,
1,0,0,0,2,64,
0,0,0,0,128,63,
0,0,128,63,0,0,
128,63,0,0,128,63,
26,128,32,0,1,0,
0,0,3,0,0,0,
56,32,0,8,18,0,
16,0,0,0,0,0,
10,0,16,128,129,0,
0,0,0,0,0,0,
10,0,16,0,1,0,
0,0,50,0,0,9,
18,0,16,0,1,0,
0,0,10,0,16,0,
0,0,0,0,1,64,
0,0,0,0,0,192,
1,64,0,0,0,0,
64,64,56,0,0,7,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
56,0,0,7,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,10,0,16,0,
1,0,0,0,50,0,
0,9,114,32,16,0,
0,0,0,0,6,0,
16,0,0,0,0,0,
150,7,16,0,0,0,
0,0,70,2,16,0,
3,0,0,0,54,0,
0,5,130,32,16,0,
0,0,0,0,1,64,
0,0,0,0,128,63,
62,0,0,1,83,84,
65,84,148,0,0,0,
58,0,0,0,9,0,
0,0,0,0,0,0,
4,0,0,0,44,0,
0,0,1,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,6,0,0,0,
2,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};


static const uint32_t sVertexHash[] = 
{
0x5d67e148,0x39eecb9d,0xe396dea0,0x4a1d2095,0x45fa5ec0,0x7898d5e7,
0x930746e4,0xf4e36fc3
};


static const uint32_t sFragmentHash[] =
{
0x4293a9d,0x6034a1e2,0x37ab317e,0xcbb982a1,0x906971f0,0x2c75ddcb,
0xada4980d,0x436c0437
};

}

namespace RetroArch
{
class EdgeSmoothingDdtShadersDdtShaderDef : public ShaderDef
{
public:
	EdgeSmoothingDdtShadersDdtShaderDef() : ShaderDef{}
	{
		Name = "ddt";
		VertexByteCode = RetroArchEdgeSmoothingDdtShadersDdtShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchEdgeSmoothingDdtShadersDdtShaderDefs::sVertexByteCode);
		VertexHash = RetroArchEdgeSmoothingDdtShadersDdtShaderDefs::sVertexHash;
		FragmentByteCode = RetroArchEdgeSmoothingDdtShadersDdtShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchEdgeSmoothingDdtShadersDdtShaderDefs::sFragmentByteCode);
		FragmentHash = RetroArchEdgeSmoothingDdtShadersDdtShaderDefs::sFragmentHash;
		Format = "";
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FrameCount", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("BIL_FALLBACK", -1, 52, 4, 0.000000f, 1.000000f, 0.600000f, 0.050000f, "Bilinear Fallback Threshold"));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
